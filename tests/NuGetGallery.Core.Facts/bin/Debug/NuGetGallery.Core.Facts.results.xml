<?xml version="1.0" encoding="utf-8"?>
<assemblies>
  <assembly name="C:\Users\fugatash\Documents\GitHub\NuGetGallery\tests\NuGetGallery.Core.Facts\bin\Debug\NuGetGallery.Core.Facts.DLL" environment="32-bit .NET 4.0.30319.34209 [collection-per-class, parallel]" test-framework="xUnit.net 2.0.0.2929" run-date="2015-06-21" run-time="18:21:53" config-file="C:\Users\fugatash\Documents\GitHub\NuGetGallery\tests\NuGetGallery.Core.Facts\bin\Debug\NuGetGallery.Core.Facts.dll.config" total="93" passed="93" failed="0" skipped="0" time="2.353" errors="0">
    <errors />
    <collection total="3" passed="3" failed="0" skipped="0" name="Test collection for NuGetGallery.Packaging.NupkgFacts+TheGetLogicalPartNameMethod" time="0.181">
      <test name="NuGetGallery.Packaging.NupkgFacts+TheGetLogicalPartNameMethod.UnderstandsInterleavedItems" type="NuGetGallery.Packaging.NupkgFacts+TheGetLogicalPartNameMethod" method="UnderstandsInterleavedItems" time="0.1811044" result="Pass" />
      <test name="NuGetGallery.Packaging.NupkgFacts+TheGetLogicalPartNameMethod.PrependsSlash" type="NuGetGallery.Packaging.NupkgFacts+TheGetLogicalPartNameMethod" method="PrependsSlash" time="0.0001767" result="Pass" />
      <test name="NuGetGallery.Packaging.NupkgFacts+TheGetLogicalPartNameMethod.UnderstandsNonInterleavedItems" type="NuGetGallery.Packaging.NupkgFacts+TheGetLogicalPartNameMethod" method="UnderstandsNonInterleavedItems" time="0.0001531" result="Pass" />
    </collection>
    <collection total="13" passed="13" failed="0" skipped="0" name="Test collection for NuGetGallery.Packaging.ManifestValidatorFacts" time="0.220">
      <test name="NuGetGallery.Packaging.ManifestValidatorFacts.ReturnsErrorIfVersionInvalid" type="NuGetGallery.Packaging.ManifestValidatorFacts" method="ReturnsErrorIfVersionInvalid" time="0.1796798" result="Pass" />
      <test name="NuGetGallery.Packaging.ManifestValidatorFacts.ReturnsErrorIfIconUrlInvalid" type="NuGetGallery.Packaging.ManifestValidatorFacts" method="ReturnsErrorIfIconUrlInvalid" time="0.016669" result="Pass" />
      <test name="NuGetGallery.Packaging.ManifestValidatorFacts.ReturnsErrorIfFrameworkAssemblyReferenceContainsInvalidTargetFramework" type="NuGetGallery.Packaging.ManifestValidatorFacts" method="ReturnsErrorIfFrameworkAssemblyReferenceContainsInvalidTargetFramework" time="0.008564" result="Pass" />
      <test name="NuGetGallery.Packaging.ManifestValidatorFacts.ReturnsErrorIfIdInvalid" type="NuGetGallery.Packaging.ManifestValidatorFacts" method="ReturnsErrorIfIdInvalid" time="0.0005901" result="Pass" />
      <test name="NuGetGallery.Packaging.ManifestValidatorFacts.ReturnsErrorIfLicenseUrlInvalid" type="NuGetGallery.Packaging.ManifestValidatorFacts" method="ReturnsErrorIfLicenseUrlInvalid" time="0.0003836" result="Pass" />
      <test name="NuGetGallery.Packaging.ManifestValidatorFacts.ReturnsErrorIfDependencySetContainsInvalidTargetFramework" type="NuGetGallery.Packaging.ManifestValidatorFacts" method="ReturnsErrorIfDependencySetContainsInvalidTargetFramework" time="0.0074421" result="Pass" />
      <test name="NuGetGallery.Packaging.ManifestValidatorFacts.ReturnsErrorIfIdNotPresent" type="NuGetGallery.Packaging.ManifestValidatorFacts" method="ReturnsErrorIfIdNotPresent" time="0.0003943" result="Pass" />
      <test name="NuGetGallery.Packaging.ManifestValidatorFacts.ReturnsErrorIfProjectUrlInvalid" type="NuGetGallery.Packaging.ManifestValidatorFacts" method="ReturnsErrorIfProjectUrlInvalid" time="0.0006508" result="Pass" />
      <test name="NuGetGallery.Packaging.ManifestValidatorFacts.NoErrorIfDependencySetContainsEmptyTargetFramework" type="NuGetGallery.Packaging.ManifestValidatorFacts" method="NoErrorIfDependencySetContainsEmptyTargetFramework" time="0.0004152" result="Pass" />
      <test name="NuGetGallery.Packaging.ManifestValidatorFacts.NoErrorIfFrameworkAssemblyReferenceContainsEmptyTargetFramework" type="NuGetGallery.Packaging.ManifestValidatorFacts" method="NoErrorIfFrameworkAssemblyReferenceContainsEmptyTargetFramework" time="0.0003402" result="Pass" />
      <test name="NuGetGallery.Packaging.ManifestValidatorFacts.ReturnsErrorIfDependencySetContainsInvalidId" type="NuGetGallery.Packaging.ManifestValidatorFacts" method="ReturnsErrorIfDependencySetContainsInvalidId" time="0.002265" result="Pass" />
      <test name="NuGetGallery.Packaging.ManifestValidatorFacts.ReturnsErrorIfIdTooLong" type="NuGetGallery.Packaging.ManifestValidatorFacts" method="ReturnsErrorIfIdTooLong" time="0.0004172" result="Pass" />
      <test name="NuGetGallery.Packaging.ManifestValidatorFacts.ReturnsErrorIfDependencySetContainsInvalidVersion" type="NuGetGallery.Packaging.ManifestValidatorFacts" method="ReturnsErrorIfDependencySetContainsInvalidVersion" time="0.0018726" result="Pass" />
    </collection>
    <collection total="48" passed="48" failed="0" skipped="0" name="Test collection for NuGetGallery.Packaging.NupkgFacts+TheGetSupportedFrameworksMethod" time="2.008">
      <test name="NuGetGallery.Packaging.NupkgFacts+TheGetSupportedFrameworksMethod.ReturnsFilePathFrameworksIfPresent(directoryName: &quot;net10&quot;, fxName: .NETFramework,Version=v1.0)" type="NuGetGallery.Packaging.NupkgFacts+TheGetSupportedFrameworksMethod" method="ReturnsFilePathFrameworksIfPresent" time="1.8812581" result="Pass" />
      <test name="NuGetGallery.Packaging.NupkgFacts+TheGetSupportedFrameworksMethod.ReturnsFilePathFrameworksIfPresent(directoryName: &quot;net11&quot;, fxName: .NETFramework,Version=v1.1)" type="NuGetGallery.Packaging.NupkgFacts+TheGetSupportedFrameworksMethod" method="ReturnsFilePathFrameworksIfPresent" time="0.0026826" result="Pass" />
      <test name="NuGetGallery.Packaging.NupkgFacts+TheGetSupportedFrameworksMethod.ReturnsFilePathFrameworksIfPresent(directoryName: &quot;net20&quot;, fxName: .NETFramework,Version=v2.0)" type="NuGetGallery.Packaging.NupkgFacts+TheGetSupportedFrameworksMethod" method="ReturnsFilePathFrameworksIfPresent" time="0.0018193" result="Pass" />
      <test name="NuGetGallery.Packaging.NupkgFacts+TheGetSupportedFrameworksMethod.ReturnsFilePathFrameworksIfPresent(directoryName: &quot;net30&quot;, fxName: .NETFramework,Version=v3.0)" type="NuGetGallery.Packaging.NupkgFacts+TheGetSupportedFrameworksMethod" method="ReturnsFilePathFrameworksIfPresent" time="0.0016606" result="Pass" />
      <test name="NuGetGallery.Packaging.NupkgFacts+TheGetSupportedFrameworksMethod.ReturnsFilePathFrameworksIfPresent(directoryName: &quot;net35&quot;, fxName: .NETFramework,Version=v3.5)" type="NuGetGallery.Packaging.NupkgFacts+TheGetSupportedFrameworksMethod" method="ReturnsFilePathFrameworksIfPresent" time="0.0016484" result="Pass" />
      <test name="NuGetGallery.Packaging.NupkgFacts+TheGetSupportedFrameworksMethod.ReturnsFilePathFrameworksIfPresent(directoryName: &quot;net40&quot;, fxName: .NETFramework,Version=v4.0)" type="NuGetGallery.Packaging.NupkgFacts+TheGetSupportedFrameworksMethod" method="ReturnsFilePathFrameworksIfPresent" time="0.0016357" result="Pass" />
      <test name="NuGetGallery.Packaging.NupkgFacts+TheGetSupportedFrameworksMethod.ReturnsFilePathFrameworksIfPresent(directoryName: &quot;net45&quot;, fxName: .NETFramework,Version=v4.5)" type="NuGetGallery.Packaging.NupkgFacts+TheGetSupportedFrameworksMethod" method="ReturnsFilePathFrameworksIfPresent" time="0.001618" result="Pass" />
      <test name="NuGetGallery.Packaging.NupkgFacts+TheGetSupportedFrameworksMethod.ReturnsFilePathFrameworksIfPresent(directoryName: &quot;netmf40&quot;, fxName: .NETMicroFramework,Version=v4.0)" type="NuGetGallery.Packaging.NupkgFacts+TheGetSupportedFrameworksMethod" method="ReturnsFilePathFrameworksIfPresent" time="0.0016413" result="Pass" />
      <test name="NuGetGallery.Packaging.NupkgFacts+TheGetSupportedFrameworksMethod.ReturnsFilePathFrameworksIfPresent(directoryName: &quot;netmf41&quot;, fxName: .NETMicroFramework,Version=v4.1)" type="NuGetGallery.Packaging.NupkgFacts+TheGetSupportedFrameworksMethod" method="ReturnsFilePathFrameworksIfPresent" time="0.0016393" result="Pass" />
      <test name="NuGetGallery.Packaging.NupkgFacts+TheGetSupportedFrameworksMethod.ReturnsFilePathFrameworksIfPresent(directoryName: &quot;netmf42&quot;, fxName: .NETMicroFramework,Version=v4.2)" type="NuGetGallery.Packaging.NupkgFacts+TheGetSupportedFrameworksMethod" method="ReturnsFilePathFrameworksIfPresent" time="0.0016792" result="Pass" />
      <test name="NuGetGallery.Packaging.NupkgFacts+TheGetSupportedFrameworksMethod.ReturnsFilePathFrameworksIfPresent(directoryName: &quot;netmf43&quot;, fxName: .NETMicroFramework,Version=v4.3)" type="NuGetGallery.Packaging.NupkgFacts+TheGetSupportedFrameworksMethod" method="ReturnsFilePathFrameworksIfPresent" time="0.0019468" result="Pass" />
      <test name="NuGetGallery.Packaging.NupkgFacts+TheGetSupportedFrameworksMethod.ReturnsFilePathFrameworksIfPresent(directoryName: &quot;netmf44&quot;, fxName: .NETMicroFramework,Version=v4.4)" type="NuGetGallery.Packaging.NupkgFacts+TheGetSupportedFrameworksMethod" method="ReturnsFilePathFrameworksIfPresent" time="0.0041128" result="Pass" />
      <test name="NuGetGallery.Packaging.NupkgFacts+TheGetSupportedFrameworksMethod.ReturnsFilePathFrameworksIfPresent(directoryName: &quot;sl10&quot;, fxName: Silverlight,Version=v1.0)" type="NuGetGallery.Packaging.NupkgFacts+TheGetSupportedFrameworksMethod" method="ReturnsFilePathFrameworksIfPresent" time="0.0013389" result="Pass" />
      <test name="NuGetGallery.Packaging.NupkgFacts+TheGetSupportedFrameworksMethod.ReturnsFilePathFrameworksIfPresent(directoryName: &quot;sl20&quot;, fxName: Silverlight,Version=v2.0)" type="NuGetGallery.Packaging.NupkgFacts+TheGetSupportedFrameworksMethod" method="ReturnsFilePathFrameworksIfPresent" time="0.0011557" result="Pass" />
      <test name="NuGetGallery.Packaging.NupkgFacts+TheGetSupportedFrameworksMethod.ReturnsFilePathFrameworksIfPresent(directoryName: &quot;sl30&quot;, fxName: Silverlight,Version=v3.0)" type="NuGetGallery.Packaging.NupkgFacts+TheGetSupportedFrameworksMethod" method="ReturnsFilePathFrameworksIfPresent" time="0.0011455" result="Pass" />
      <test name="NuGetGallery.Packaging.NupkgFacts+TheGetSupportedFrameworksMethod.ReturnsFilePathFrameworksIfPresent(directoryName: &quot;sl40&quot;, fxName: Silverlight,Version=v4.0)" type="NuGetGallery.Packaging.NupkgFacts+TheGetSupportedFrameworksMethod" method="ReturnsFilePathFrameworksIfPresent" time="0.0011478" result="Pass" />
      <test name="NuGetGallery.Packaging.NupkgFacts+TheGetSupportedFrameworksMethod.ReturnsFilePathFrameworksIfPresent(directoryName: &quot;sl-wp&quot;, fxName: Silverlight,Version=v0.0,Profile=WindowsPhone)" type="NuGetGallery.Packaging.NupkgFacts+TheGetSupportedFrameworksMethod" method="ReturnsFilePathFrameworksIfPresent" time="0.0011419" result="Pass" />
      <test name="NuGetGallery.Packaging.NupkgFacts+TheGetSupportedFrameworksMethod.ReturnsFilePathFrameworksIfPresent(directoryName: &quot;sl-wp71&quot;, fxName: Silverlight,Version=v0.0,Profile=WindowsPhone71)" type="NuGetGallery.Packaging.NupkgFacts+TheGetSupportedFrameworksMethod" method="ReturnsFilePathFrameworksIfPresent" time="0.0018525" result="Pass" />
      <test name="NuGetGallery.Packaging.NupkgFacts+TheGetSupportedFrameworksMethod.ReturnsFilePathFrameworksIfPresent(directoryName: &quot;win&quot;, fxName: Windows,Version=v0.0)" type="NuGetGallery.Packaging.NupkgFacts+TheGetSupportedFrameworksMethod" method="ReturnsFilePathFrameworksIfPresent" time="0.0012801" result="Pass" />
      <test name="NuGetGallery.Packaging.NupkgFacts+TheGetSupportedFrameworksMethod.ReturnsFilePathFrameworksIfPresent(directoryName: &quot;winrt&quot;, fxName: .NETCore,Version=v0.0)" type="NuGetGallery.Packaging.NupkgFacts+TheGetSupportedFrameworksMethod" method="ReturnsFilePathFrameworksIfPresent" time="0.0011549" result="Pass" />
      <test name="NuGetGallery.Packaging.NupkgFacts+TheGetSupportedFrameworksMethod.ReturnsFilePathFrameworksIfPresent(directoryName: &quot;winrt80&quot;, fxName: .NETCore,Version=v8.0)" type="NuGetGallery.Packaging.NupkgFacts+TheGetSupportedFrameworksMethod" method="ReturnsFilePathFrameworksIfPresent" time="0.0098619" result="Pass" />
      <test name="NuGetGallery.Packaging.NupkgFacts+TheGetSupportedFrameworksMethod.ReturnsFilePathFrameworksIfPresent(directoryName: &quot;win80&quot;, fxName: Windows,Version=v8.0)" type="NuGetGallery.Packaging.NupkgFacts+TheGetSupportedFrameworksMethod" method="ReturnsFilePathFrameworksIfPresent" time="0.0014372" result="Pass" />
      <test name="NuGetGallery.Packaging.NupkgFacts+TheGetSupportedFrameworksMethod.ReturnsFilePathFrameworksIfPresent(directoryName: &quot;win81&quot;, fxName: Windows,Version=v8.1)" type="NuGetGallery.Packaging.NupkgFacts+TheGetSupportedFrameworksMethod" method="ReturnsFilePathFrameworksIfPresent" time="0.0012043" result="Pass" />
      <test name="NuGetGallery.Packaging.NupkgFacts+TheGetSupportedFrameworksMethod.ReturnsFilePathFrameworksIfPresent(directoryName: &quot;wp&quot;, fxName: WindowsPhone,Version=v0.0)" type="NuGetGallery.Packaging.NupkgFacts+TheGetSupportedFrameworksMethod" method="ReturnsFilePathFrameworksIfPresent" time="0.001164" result="Pass" />
      <test name="NuGetGallery.Packaging.NupkgFacts+TheGetSupportedFrameworksMethod.ReturnsFilePathFrameworksIfPresent(directoryName: &quot;wp70&quot;, fxName: WindowsPhone,Version=v7.0)" type="NuGetGallery.Packaging.NupkgFacts+TheGetSupportedFrameworksMethod" method="ReturnsFilePathFrameworksIfPresent" time="0.0011537" result="Pass" />
      <test name="NuGetGallery.Packaging.NupkgFacts+TheGetSupportedFrameworksMethod.ReturnsFilePathFrameworksIfPresent(directoryName: &quot;wp71&quot;, fxName: WindowsPhone,Version=v7.1)" type="NuGetGallery.Packaging.NupkgFacts+TheGetSupportedFrameworksMethod" method="ReturnsFilePathFrameworksIfPresent" time="0.0028054" result="Pass" />
      <test name="NuGetGallery.Packaging.NupkgFacts+TheGetSupportedFrameworksMethod.ReturnsFilePathFrameworksIfPresent(directoryName: &quot;wp80&quot;, fxName: WindowsPhone,Version=v8.0)" type="NuGetGallery.Packaging.NupkgFacts+TheGetSupportedFrameworksMethod" method="ReturnsFilePathFrameworksIfPresent" time="0.0022749" result="Pass" />
      <test name="NuGetGallery.Packaging.NupkgFacts+TheGetSupportedFrameworksMethod.ReturnsFilePathFrameworksIfPresent(directoryName: &quot;MonoAndroid&quot;, fxName: MonoAndroid,Version=v0.0)" type="NuGetGallery.Packaging.NupkgFacts+TheGetSupportedFrameworksMethod" method="ReturnsFilePathFrameworksIfPresent" time="0.001832" result="Pass" />
      <test name="NuGetGallery.Packaging.NupkgFacts+TheGetSupportedFrameworksMethod.ReturnsFilePathFrameworksIfPresent(directoryName: &quot;MonoAndroid30&quot;, fxName: MonoAndroid,Version=v3.0)" type="NuGetGallery.Packaging.NupkgFacts+TheGetSupportedFrameworksMethod" method="ReturnsFilePathFrameworksIfPresent" time="0.0017735" result="Pass" />
      <test name="NuGetGallery.Packaging.NupkgFacts+TheGetSupportedFrameworksMethod.ReturnsFilePathFrameworksIfPresent(directoryName: &quot;MonoAndroid45&quot;, fxName: MonoAndroid,Version=v4.5)" type="NuGetGallery.Packaging.NupkgFacts+TheGetSupportedFrameworksMethod" method="ReturnsFilePathFrameworksIfPresent" time="0.0016669" result="Pass" />
      <test name="NuGetGallery.Packaging.NupkgFacts+TheGetSupportedFrameworksMethod.ReturnsFilePathFrameworksIfPresent(directoryName: &quot;MonoTouch&quot;, fxName: MonoTouch,Version=v0.0)" type="NuGetGallery.Packaging.NupkgFacts+TheGetSupportedFrameworksMethod" method="ReturnsFilePathFrameworksIfPresent" time="0.0029033" result="Pass" />
      <test name="NuGetGallery.Packaging.NupkgFacts+TheGetSupportedFrameworksMethod.ReturnsFilePathFrameworksIfPresent(directoryName: &quot;MonoTouch30&quot;, fxName: MonoTouch,Version=v3.0)" type="NuGetGallery.Packaging.NupkgFacts+TheGetSupportedFrameworksMethod" method="ReturnsFilePathFrameworksIfPresent" time="0.0013614" result="Pass" />
      <test name="NuGetGallery.Packaging.NupkgFacts+TheGetSupportedFrameworksMethod.ReturnsFilePathFrameworksIfPresent(directoryName: &quot;MonoTouch45&quot;, fxName: MonoTouch,Version=v4.5)" type="NuGetGallery.Packaging.NupkgFacts+TheGetSupportedFrameworksMethod" method="ReturnsFilePathFrameworksIfPresent" time="0.0011909" result="Pass" />
      <test name="NuGetGallery.Packaging.NupkgFacts+TheGetSupportedFrameworksMethod.ReturnsFilePathFrameworksIfPresent(directoryName: &quot;MonoMac&quot;, fxName: MonoMac,Version=v0.0)" type="NuGetGallery.Packaging.NupkgFacts+TheGetSupportedFrameworksMethod" method="ReturnsFilePathFrameworksIfPresent" time="0.001408" result="Pass" />
      <test name="NuGetGallery.Packaging.NupkgFacts+TheGetSupportedFrameworksMethod.ReturnsFilePathFrameworksIfPresent(directoryName: &quot;MonoMac30&quot;, fxName: MonoMac,Version=v3.0)" type="NuGetGallery.Packaging.NupkgFacts+TheGetSupportedFrameworksMethod" method="ReturnsFilePathFrameworksIfPresent" time="0.0012374" result="Pass" />
      <test name="NuGetGallery.Packaging.NupkgFacts+TheGetSupportedFrameworksMethod.ReturnsFilePathFrameworksIfPresent(directoryName: &quot;MonoMac45&quot;, fxName: MonoMac,Version=v4.5)" type="NuGetGallery.Packaging.NupkgFacts+TheGetSupportedFrameworksMethod" method="ReturnsFilePathFrameworksIfPresent" time="0.0030892" result="Pass" />
      <test name="NuGetGallery.Packaging.NupkgFacts+TheGetSupportedFrameworksMethod.ReturnsFilePathFrameworksIfPresent(directoryName: &quot;native&quot;, fxName: native,Version=v0.0)" type="NuGetGallery.Packaging.NupkgFacts+TheGetSupportedFrameworksMethod" method="ReturnsFilePathFrameworksIfPresent" time="0.0014151" result="Pass" />
      <test name="NuGetGallery.Packaging.NupkgFacts+TheGetSupportedFrameworksMethod.ReturnsFilePathFrameworksIfPresent(directoryName: &quot;native30&quot;, fxName: native,Version=v3.0)" type="NuGetGallery.Packaging.NupkgFacts+TheGetSupportedFrameworksMethod" method="ReturnsFilePathFrameworksIfPresent" time="0.0011703" result="Pass" />
      <test name="NuGetGallery.Packaging.NupkgFacts+TheGetSupportedFrameworksMethod.ReturnsFilePathFrameworksIfPresent(directoryName: &quot;native45&quot;, fxName: native,Version=v4.5)" type="NuGetGallery.Packaging.NupkgFacts+TheGetSupportedFrameworksMethod" method="ReturnsFilePathFrameworksIfPresent" time="0.0011545" result="Pass" />
      <test name="NuGetGallery.Packaging.NupkgFacts+TheGetSupportedFrameworksMethod.ReturnsFilePathFrameworksIfPresent(directoryName: &quot;portable-net10&quot;, fxName: .NETPortable,Version=v0.0,Profile=net10)" type="NuGetGallery.Packaging.NupkgFacts+TheGetSupportedFrameworksMethod" method="ReturnsFilePathFrameworksIfPresent" time="0.0038629" result="Pass" />
      <test name="NuGetGallery.Packaging.NupkgFacts+TheGetSupportedFrameworksMethod.ReturnsFilePathFrameworksIfPresent(directoryName: &quot;portable-net10+net40&quot;, fxName: .NETPortable,Version=v0.0,Profile=net10+net40)" type="NuGetGallery.Packaging.NupkgFacts+TheGetSupportedFrameworksMethod" method="ReturnsFilePathFrameworksIfPresent" time="0.0169512" result="Pass" />
      <test name="NuGetGallery.Packaging.NupkgFacts+TheGetSupportedFrameworksMethod.ReturnsFilePathFrameworksIfPresent(directoryName: &quot;portable-net10+wp71+win81&quot;, fxName: .NETPortable,Version=v0.0,Profile=net10+wp71+win81)" type="NuGetGallery.Packaging.NupkgFacts+TheGetSupportedFrameworksMethod" method="ReturnsFilePathFrameworksIfPresent" time="0.0013768" result="Pass" />
      <test name="NuGetGallery.Packaging.NupkgFacts+TheGetSupportedFrameworksMethod.ReturnsFilePathFrameworksIfPresent(directoryName: &quot;portable-native+win&quot;, fxName: .NETPortable,Version=v0.0,Profile=native+win)" type="NuGetGallery.Packaging.NupkgFacts+TheGetSupportedFrameworksMethod" method="ReturnsFilePathFrameworksIfPresent" time="0.0011711" result="Pass" />
      <test name="NuGetGallery.Packaging.NupkgFacts+TheGetSupportedFrameworksMethod.ReturnsFilePathFrameworksIfPresent(directoryName: &quot;portable-win81+wp80&quot;, fxName: .NETPortable,Version=v0.0,Profile=win81+wp80)" type="NuGetGallery.Packaging.NupkgFacts+TheGetSupportedFrameworksMethod" method="ReturnsFilePathFrameworksIfPresent" time="0.0011589" result="Pass" />
      <test name="NuGetGallery.Packaging.NupkgFacts+TheGetSupportedFrameworksMethod.ReturnsFilePathFrameworksIfPresent(directoryName: &quot;portable-native30+monomac+monotouch+monoandroid&quot;, fxName: .NETPortable,Version=v0.0,Profile=native30+monomac+monotouch+monoandroid)" type="NuGetGallery.Packaging.NupkgFacts+TheGetSupportedFrameworksMethod" method="ReturnsFilePathFrameworksIfPresent" time="0.0011857" result="Pass" />
      <test name="NuGetGallery.Packaging.NupkgFacts+TheGetSupportedFrameworksMethod.ReturnsUnionOfFrameworkReferenceAndFileFrameworks" type="NuGetGallery.Packaging.NupkgFacts+TheGetSupportedFrameworksMethod" method="ReturnsUnionOfFrameworkReferenceAndFileFrameworks" time="0.0159386" result="Pass" />
      <test name="NuGetGallery.Packaging.NupkgFacts+TheGetSupportedFrameworksMethod.ReturnsFrameworkAssemblyReferenceFrameworksIfNoFileFrameworks" type="NuGetGallery.Packaging.NupkgFacts+TheGetSupportedFrameworksMethod" method="ReturnsFrameworkAssemblyReferenceFrameworksIfNoFileFrameworks" time="0.0106656" result="Pass" />
      <test name="NuGetGallery.Packaging.NupkgFacts+TheGetSupportedFrameworksMethod.ReturnsNothingForNoFilesAndNoFrameworkReferences" type="NuGetGallery.Packaging.NupkgFacts+TheGetSupportedFrameworksMethod" method="ReturnsNothingForNoFilesAndNoFrameworkReferences" time="0.0019145" result="Pass" />
    </collection>
    <collection total="1" passed="1" failed="0" skipped="0" name="Test collection for NuGetGallery.Packaging.NupkgFacts+IgnorablePieces" time="0.004">
      <test name="NuGetGallery.Packaging.NupkgFacts+IgnorablePieces.PiecesWithTrailingSlashesAreIgnored" type="NuGetGallery.Packaging.NupkgFacts+IgnorablePieces" method="PiecesWithTrailingSlashesAreIgnored" time="0.0040516" result="Pass" />
    </collection>
    <collection total="1" passed="1" failed="0" skipped="0" name="Test collection for NuGetGallery.PackageFacts+PositiveScenarios" time="0.020">
      <test name="NuGetGallery.PackageFacts+PositiveScenarios.ApplyPackageEditUpdatesPackage" type="NuGetGallery.PackageFacts+PositiveScenarios" method="ApplyPackageEditUpdatesPackage" time="0.0199844" result="Pass" />
    </collection>
    <collection total="3" passed="3" failed="0" skipped="0" name="Test collection for NuGetGallery.Packaging.NupkgFacts+PositiveScenarios" time="2.031">
      <test name="NuGetGallery.Packaging.NupkgFacts+PositiveScenarios.ExtractTheFilesList" type="NuGetGallery.Packaging.NupkgFacts+PositiveScenarios" method="ExtractTheFilesList" time="2.0251793" result="Pass" />
      <test name="NuGetGallery.Packaging.NupkgFacts+PositiveScenarios.ExtractTheManifest" type="NuGetGallery.Packaging.NupkgFacts+PositiveScenarios" method="ExtractTheManifest" time="0.0016208" result="Pass" />
      <test name="NuGetGallery.Packaging.NupkgFacts+PositiveScenarios.ExtractThePartsList" type="NuGetGallery.Packaging.NupkgFacts+PositiveScenarios" method="ExtractThePartsList" time="0.0046082" result="Pass" />
    </collection>
    <collection total="3" passed="3" failed="0" skipped="0" name="Test collection for NuGetGallery.Packaging.NupkgFacts+TheCanonicalNameMethod" time="0.061">
      <test name="NuGetGallery.Packaging.NupkgFacts+TheCanonicalNameMethod.RemovesLeadingSlashes" type="NuGetGallery.Packaging.NupkgFacts+TheCanonicalNameMethod" method="RemovesLeadingSlashes" time="0.0605938" result="Pass" />
      <test name="NuGetGallery.Packaging.NupkgFacts+TheCanonicalNameMethod.ConvertsBackSlashesToSlashes" type="NuGetGallery.Packaging.NupkgFacts+TheCanonicalNameMethod" method="ConvertsBackSlashesToSlashes" time="0.0001385" result="Pass" />
      <test name="NuGetGallery.Packaging.NupkgFacts+TheCanonicalNameMethod.RemovesLeadingBackSlashes" type="NuGetGallery.Packaging.NupkgFacts+TheCanonicalNameMethod" method="RemovesLeadingBackSlashes" time="0.0000828" result="Pass" />
    </collection>
    <collection total="1" passed="1" failed="0" skipped="0" name="Test collection for NuGetGallery.Packaging.NupkgRewriterFacts" time="2.098">
      <test name="NuGetGallery.Packaging.NupkgRewriterFacts.CanRewriteTheNuspecInANupkg" type="NuGetGallery.Packaging.NupkgRewriterFacts" method="CanRewriteTheNuspecInANupkg" time="2.0983139" result="Pass" />
    </collection>
    <collection total="20" passed="20" failed="0" skipped="0" name="Test collection for NuGetGallery.Packaging.NupkgFacts+TheIgnoredPartMethod" time="0.001">
      <test name="NuGetGallery.Packaging.NupkgFacts+TheIgnoredPartMethod.LegitPartNamesAreAccepted(logicalPartName: &quot;/TestPackage.nuspec&quot;)" type="NuGetGallery.Packaging.NupkgFacts+TheIgnoredPartMethod" method="LegitPartNamesAreAccepted" time="0.0002332" result="Pass" />
      <test name="NuGetGallery.Packaging.NupkgFacts+TheIgnoredPartMethod.LegitPartNamesAreAccepted(logicalPartName: &quot;/[Content_Types].xml&quot;)" type="NuGetGallery.Packaging.NupkgFacts+TheIgnoredPartMethod" method="LegitPartNamesAreAccepted" time="0.0000272" result="Pass" />
      <test name="NuGetGallery.Packaging.NupkgFacts+TheIgnoredPartMethod.LegitPartNamesAreAccepted(logicalPartName: &quot;/content/HelloWorld.cs&quot;)" type="NuGetGallery.Packaging.NupkgFacts+TheIgnoredPartMethod" method="LegitPartNamesAreAccepted" time="0.000013" result="Pass" />
      <test name="NuGetGallery.Packaging.NupkgFacts+TheIgnoredPartMethod.LegitPartNamesAreAccepted(logicalPartName: &quot;/_rels/.rels&quot;)" type="NuGetGallery.Packaging.NupkgFacts+TheIgnoredPartMethod" method="LegitPartNamesAreAccepted" time="0.000007" result="Pass" />
      <test name="NuGetGallery.Packaging.NupkgFacts+TheIgnoredPartMethod.LegitPartNamesAreAccepted(logicalPartName: &quot;/package/services/metadata/core-properties/1cd4867&quot;...)" type="NuGetGallery.Packaging.NupkgFacts+TheIgnoredPartMethod" method="LegitPartNamesAreAccepted" time="0.0000074" result="Pass" />
      <test name="NuGetGallery.Packaging.NupkgFacts+TheIgnoredPartMethod.PartsWithEmptyISegmentsAreIgnored(logicalPartName: &quot;/Dir1/Dir2//file.txt&quot;)" type="NuGetGallery.Packaging.NupkgFacts+TheIgnoredPartMethod" method="PartsWithEmptyISegmentsAreIgnored" time="0.0001195" result="Pass" />
      <test name="NuGetGallery.Packaging.NupkgFacts+TheIgnoredPartMethod.PartsWithEmptyISegmentsAreIgnored(logicalPartName: &quot;//&quot;)" type="NuGetGallery.Packaging.NupkgFacts+TheIgnoredPartMethod" method="PartsWithEmptyISegmentsAreIgnored" time="0.0000082" result="Pass" />
      <test name="NuGetGallery.Packaging.NupkgFacts+TheIgnoredPartMethod.PartsWithEmptyISegmentsAreIgnored(logicalPartName: &quot;/Dir1//Dir2/file.txt&quot;)" type="NuGetGallery.Packaging.NupkgFacts+TheIgnoredPartMethod" method="PartsWithEmptyISegmentsAreIgnored" time="0.000007" result="Pass" />
      <test name="NuGetGallery.Packaging.NupkgFacts+TheIgnoredPartMethod.PartsWithEmptyISegmentsAreIgnored(logicalPartName: &quot;/Dir1//file.txt&quot;)" type="NuGetGallery.Packaging.NupkgFacts+TheIgnoredPartMethod" method="PartsWithEmptyISegmentsAreIgnored" time="0.0000066" result="Pass" />
      <test name="NuGetGallery.Packaging.NupkgFacts+TheIgnoredPartMethod.PartsWithDotEndingSegmentsAreIgnored(logicalPartName: &quot;/./&quot;)" type="NuGetGallery.Packaging.NupkgFacts+TheIgnoredPartMethod" method="PartsWithDotEndingSegmentsAreIgnored" time="0.0001116" result="Pass" />
      <test name="NuGetGallery.Packaging.NupkgFacts+TheIgnoredPartMethod.PartsWithDotEndingSegmentsAreIgnored(logicalPartName: &quot;/Dir1/File.&quot;)" type="NuGetGallery.Packaging.NupkgFacts+TheIgnoredPartMethod" method="PartsWithDotEndingSegmentsAreIgnored" time="0.0000086" result="Pass" />
      <test name="NuGetGallery.Packaging.NupkgFacts+TheIgnoredPartMethod.PartsWithDotEndingSegmentsAreIgnored(logicalPartName: &quot;/File./&quot;)" type="NuGetGallery.Packaging.NupkgFacts+TheIgnoredPartMethod" method="PartsWithDotEndingSegmentsAreIgnored" time="0.0000066" result="Pass" />
      <test name="NuGetGallery.Packaging.NupkgFacts+TheIgnoredPartMethod.PartsWithDotEndingSegmentsAreIgnored(logicalPartName: &quot;/Dir./&quot;)" type="NuGetGallery.Packaging.NupkgFacts+TheIgnoredPartMethod" method="PartsWithDotEndingSegmentsAreIgnored" time="0.000007" result="Pass" />
      <test name="NuGetGallery.Packaging.NupkgFacts+TheIgnoredPartMethod.PartsWithDotOnlyISegmentsAreIgnored(logicalPartName: &quot;/Dir1/./File.txt&quot;)" type="NuGetGallery.Packaging.NupkgFacts+TheIgnoredPartMethod" method="PartsWithDotOnlyISegmentsAreIgnored" time="0.0001088" result="Pass" />
      <test name="NuGetGallery.Packaging.NupkgFacts+TheIgnoredPartMethod.PartsWithDotOnlyISegmentsAreIgnored(logicalPartName: &quot;/.../&quot;)" type="NuGetGallery.Packaging.NupkgFacts+TheIgnoredPartMethod" method="PartsWithDotOnlyISegmentsAreIgnored" time="0.0000082" result="Pass" />
      <test name="NuGetGallery.Packaging.NupkgFacts+TheIgnoredPartMethod.PartsWithDotOnlyISegmentsAreIgnored(logicalPartName: &quot;/../&quot;)" type="NuGetGallery.Packaging.NupkgFacts+TheIgnoredPartMethod" method="PartsWithDotOnlyISegmentsAreIgnored" time="0.0000066" result="Pass" />
      <test name="NuGetGallery.Packaging.NupkgFacts+TheIgnoredPartMethod.PartsWithDotOnlyISegmentsAreIgnored(logicalPartName: &quot;/./&quot;)" type="NuGetGallery.Packaging.NupkgFacts+TheIgnoredPartMethod" method="PartsWithDotOnlyISegmentsAreIgnored" time="0.0000062" result="Pass" />
      <test name="NuGetGallery.Packaging.NupkgFacts+TheIgnoredPartMethod.PartsWithDotOnlyISegmentsAreIgnored(logicalPartName: &quot;/Dir1/../File.txt&quot;)" type="NuGetGallery.Packaging.NupkgFacts+TheIgnoredPartMethod" method="PartsWithDotOnlyISegmentsAreIgnored" time="0.0000062" result="Pass" />
      <test name="NuGetGallery.Packaging.NupkgFacts+TheIgnoredPartMethod.PartsWithTrailingSlashesAreIgnored" type="NuGetGallery.Packaging.NupkgFacts+TheIgnoredPartMethod" method="PartsWithTrailingSlashesAreIgnored" time="0.0001136" result="Pass" />
      <test name="NuGetGallery.Packaging.NupkgFacts+TheIgnoredPartMethod.EmptyPartNamesAreIgnored" type="NuGetGallery.Packaging.NupkgFacts+TheIgnoredPartMethod" method="EmptyPartNamesAreIgnored" time="0.0001069" result="Pass" />
    </collection>
  </assembly>
</assemblies>