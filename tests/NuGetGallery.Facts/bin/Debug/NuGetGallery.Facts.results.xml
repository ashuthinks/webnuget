<?xml version="1.0" encoding="utf-8"?>
<assemblies>
  <assembly name="C:\Users\fugatash\Documents\GitHub\NuGetGallery\tests\NuGetGallery.Facts\bin\Debug\NuGetGallery.Facts.DLL" environment="32-bit .NET 4.0.30319.34209 [collection-per-class, parallel]" test-framework="xUnit.net 2.0.0.2929" run-date="2015-06-21" run-time="18:20:27" config-file="C:\Users\fugatash\Documents\GitHub\NuGetGallery\tests\NuGetGallery.Facts\bin\Debug\NuGetGallery.Facts.dll.config" total="793" passed="792" failed="1" skipped="0" time="81.171" errors="0">
    <errors />
    <collection total="3" passed="3" failed="0" skipped="0" name="Test collection for NuGetGallery.Infrastructure.AnalysisHelperFacts" time="0.059">
      <test name="NuGetGallery.Infrastructure.AnalysisHelperFacts.UnderstandsPhraseQueries" type="NuGetGallery.Infrastructure.AnalysisHelperFacts" method="UnderstandsPhraseQueries" time="0.0564631" result="Pass" />
      <test name="NuGetGallery.Infrastructure.AnalysisHelperFacts.UnderstandsTermQueries" type="NuGetGallery.Infrastructure.AnalysisHelperFacts" method="UnderstandsTermQueries" time="0.0015575" result="Pass" />
      <test name="NuGetGallery.Infrastructure.AnalysisHelperFacts.UnderstandsEmptyQueries" type="NuGetGallery.Infrastructure.AnalysisHelperFacts" method="UnderstandsEmptyQueries" time="0.000487" result="Pass" />
    </collection>
    <collection total="25" passed="25" failed="0" skipped="0" name="Test collection for NuGetGallery.Infrastructure.LuceneSearchServiceFacts" time="1.085">
      <test name="NuGetGallery.Infrastructure.LuceneSearchServiceFacts.IndexAndSearchAPackageByDescription" type="NuGetGallery.Infrastructure.LuceneSearchServiceFacts" method="IndexAndSearchAPackageByDescription" time="0.7798173" result="Pass" />
      <test name="NuGetGallery.Infrastructure.LuceneSearchServiceFacts.SearchForNuGetCoreWithExactField(field: &quot;TITLE&quot;, term: &quot;NuGet.Core&quot;)" type="NuGetGallery.Infrastructure.LuceneSearchServiceFacts" method="SearchForNuGetCoreWithExactField" time="0.0440254" result="Pass" />
      <test name="NuGetGallery.Infrastructure.LuceneSearchServiceFacts.SearchForNuGetCoreWithExactField(field: &quot;title&quot;, term: &quot;NuGet.Core&quot;)" type="NuGetGallery.Infrastructure.LuceneSearchServiceFacts" method="SearchForNuGetCoreWithExactField" time="0.0276161" result="Pass" />
      <test name="NuGetGallery.Infrastructure.LuceneSearchServiceFacts.SearchForNuGetCoreWithExactField(field: &quot;author&quot;, term: &quot;&quot;Alpha Beta Gamma&quot;&quot;)" type="NuGetGallery.Infrastructure.LuceneSearchServiceFacts" method="SearchForNuGetCoreWithExactField" time="0.0062342" result="Pass" />
      <test name="NuGetGallery.Infrastructure.LuceneSearchServiceFacts.SearchForNuGetCoreWithExactField(field: &quot;Id&quot;, term: &quot;NuGet.Core&quot;)" type="NuGetGallery.Infrastructure.LuceneSearchServiceFacts" method="SearchForNuGetCoreWithExactField" time="0.0068326" result="Pass" />
      <test name="NuGetGallery.Infrastructure.LuceneSearchServiceFacts.SearchForNuGetCoreWithExactField(field: &quot;Description&quot;, term: &quot;core framework&quot;)" type="NuGetGallery.Infrastructure.LuceneSearchServiceFacts" method="SearchForNuGetCoreWithExactField" time="0.0117362" result="Pass" />
      <test name="NuGetGallery.Infrastructure.LuceneSearchServiceFacts.SearchForNuGetCoreWithExactField(field: &quot;Author&quot;, term: &quot;Alpha&quot;)" type="NuGetGallery.Infrastructure.LuceneSearchServiceFacts" method="SearchForNuGetCoreWithExactField" time="0.0120354" result="Pass" />
      <test name="NuGetGallery.Infrastructure.LuceneSearchServiceFacts.SearchForNuGetCoreWithExactField(field: &quot;Tag&quot;, term: &quot;dotnet&quot;)" type="NuGetGallery.Infrastructure.LuceneSearchServiceFacts" method="SearchForNuGetCoreWithExactField" time="0.008007" result="Pass" />
      <test name="NuGetGallery.Infrastructure.LuceneSearchServiceFacts.SearchForNuGetCoreWithExactField(field: &quot;Owners&quot;, term: &quot;NugetCoreOwner&quot;)" type="NuGetGallery.Infrastructure.LuceneSearchServiceFacts" method="SearchForNuGetCoreWithExactField" time="0.0156284" result="Pass" />
      <test name="NuGetGallery.Infrastructure.LuceneSearchServiceFacts.SearchForNuGetCoreWithExactField(field: &quot;Tags&quot;, term: &quot;dotnet&quot;)" type="NuGetGallery.Infrastructure.LuceneSearchServiceFacts" method="SearchForNuGetCoreWithExactField" time="0.0331232" result="Pass" />
      <test name="NuGetGallery.Infrastructure.LuceneSearchServiceFacts.SearchForNuGetCoreWithExactField(field: &quot;id&quot;, term: &quot;NuGet.Core&quot;)" type="NuGetGallery.Infrastructure.LuceneSearchServiceFacts" method="SearchForNuGetCoreWithExactField" time="0.0067548" result="Pass" />
      <test name="NuGetGallery.Infrastructure.LuceneSearchServiceFacts.SearchForNuGetCoreWithExactField(field: &quot;Authors&quot;, term: &quot;Alpha&quot;)" type="NuGetGallery.Infrastructure.LuceneSearchServiceFacts" method="SearchForNuGetCoreWithExactField" time="0.0072001" result="Pass" />
      <test name="NuGetGallery.Infrastructure.LuceneSearchServiceFacts.SearchForNuGetCoreWithExactField(field: &quot;Authors&quot;, term: &quot;Alpha&quot;)" type="NuGetGallery.Infrastructure.LuceneSearchServiceFacts" method="SearchForNuGetCoreWithExactField" time="0.006441" result="Pass" />
      <test name="NuGetGallery.Infrastructure.LuceneSearchServiceFacts.SearchForNuGetCoreWithExactField(field: &quot;Owner&quot;, term: &quot;NugetCoreOwner&quot;)" type="NuGetGallery.Infrastructure.LuceneSearchServiceFacts" method="SearchForNuGetCoreWithExactField" time="0.006203" result="Pass" />
      <test name="NuGetGallery.Infrastructure.LuceneSearchServiceFacts.IndexAndSearchDavid123For12" type="NuGetGallery.Infrastructure.LuceneSearchServiceFacts" method="IndexAndSearchDavid123For12" time="0.0072791" result="Pass" />
      <test name="NuGetGallery.Infrastructure.LuceneSearchServiceFacts.SearchForJQueryUICombinedWithPartialId" type="NuGetGallery.Infrastructure.LuceneSearchServiceFacts" method="SearchForJQueryUICombinedWithPartialId" time="0.0235301" result="Pass" />
      <test name="NuGetGallery.Infrastructure.LuceneSearchServiceFacts.SearchUsingExactPackageId" type="NuGetGallery.Infrastructure.LuceneSearchServiceFacts" method="SearchUsingExactPackageId" time="0.0100238" result="Pass" />
      <test name="NuGetGallery.Infrastructure.LuceneSearchServiceFacts.SearchWorksAroundLuceneQuerySyntaxExceptions" type="NuGetGallery.Infrastructure.LuceneSearchServiceFacts" method="SearchWorksAroundLuceneQuerySyntaxExceptions" time="0.0064714" result="Pass" />
      <test name="NuGetGallery.Infrastructure.LuceneSearchServiceFacts.ResultsIncludeVersionAndNormalizedVersionEvenIfNormalizedVersionColumnNull" type="NuGetGallery.Infrastructure.LuceneSearchServiceFacts" method="ResultsIncludeVersionAndNormalizedVersionEvenIfNormalizedVersionColumnNull" time="0.0066285" result="Pass" />
      <test name="NuGetGallery.Infrastructure.LuceneSearchServiceFacts.SearchUsingCombinedIdAndGeneralTerms" type="NuGetGallery.Infrastructure.LuceneSearchServiceFacts" method="SearchUsingCombinedIdAndGeneralTerms" time="0.0073178" result="Pass" />
      <test name="NuGetGallery.Infrastructure.LuceneSearchServiceFacts.SearchForDegenerateSingleQuoteQuery" type="NuGetGallery.Infrastructure.LuceneSearchServiceFacts" method="SearchForDegenerateSingleQuoteQuery" time="0.0190019" result="Pass" />
      <test name="NuGetGallery.Infrastructure.LuceneSearchServiceFacts.IndexAndSearchRetrievesCanDriveV2Feed" type="NuGetGallery.Infrastructure.LuceneSearchServiceFacts" method="IndexAndSearchRetrievesCanDriveV2Feed" time="0.0128387" result="Pass" />
      <test name="NuGetGallery.Infrastructure.LuceneSearchServiceFacts.ResultsIncludeVersionAndNormalizedVersion" type="NuGetGallery.Infrastructure.LuceneSearchServiceFacts" method="ResultsIncludeVersionAndNormalizedVersion" time="0.0065291" result="Pass" />
      <test name="NuGetGallery.Infrastructure.LuceneSearchServiceFacts.IndexAndSearchWithWordStemming" type="NuGetGallery.Infrastructure.LuceneSearchServiceFacts" method="IndexAndSearchWithWordStemming" time="0.0070082" result="Pass" />
      <test name="NuGetGallery.Infrastructure.LuceneSearchServiceFacts.SearchUsesPackageRegistrationDownloadCountsToPrioritize" type="NuGetGallery.Infrastructure.LuceneSearchServiceFacts" method="SearchUsesPackageRegistrationDownloadCountsToPrioritize" time="0.0068524" result="Pass" />
    </collection>
    <collection total="1" passed="1" failed="0" skipped="0" name="Test collection for NuGetGallery.Controllers.AppControllerFacts+TheGetCurrentUserMethod" time="0.001">
      <test name="NuGetGallery.Controllers.AppControllerFacts+TheGetCurrentUserMethod.GivenNoActiveUserPrincipal_ItReturnsNull" type="NuGetGallery.Controllers.AppControllerFacts+TheGetCurrentUserMethod" method="GivenNoActiveUserPrincipal_ItReturnsNull" time="0.0005249" result="Pass" />
    </collection>
    <collection total="6" passed="6" failed="0" skipped="0" name="Test collection for NuGetGallery.PackageFileServiceFacts+TheDeletePackageFileMethod" time="0.019">
      <test name="NuGetGallery.PackageFileServiceFacts+TheDeletePackageFileMethod.WillThrowIfVersionIsNullOrEmpty(version: null)" type="NuGetGallery.PackageFileServiceFacts+TheDeletePackageFileMethod" method="WillThrowIfVersionIsNullOrEmpty" time="0.0107209" result="Pass" />
      <test name="NuGetGallery.PackageFileServiceFacts+TheDeletePackageFileMethod.WillThrowIfVersionIsNullOrEmpty(version: &quot;&quot;)" type="NuGetGallery.PackageFileServiceFacts+TheDeletePackageFileMethod" method="WillThrowIfVersionIsNullOrEmpty" time="0.0001183" result="Pass" />
      <test name="NuGetGallery.PackageFileServiceFacts+TheDeletePackageFileMethod.WillThrowIfIdIsNullOrEmpty(id: null)" type="NuGetGallery.PackageFileServiceFacts+TheDeletePackageFileMethod" method="WillThrowIfIdIsNullOrEmpty" time="0.0005987" result="Pass" />
      <test name="NuGetGallery.PackageFileServiceFacts+TheDeletePackageFileMethod.WillThrowIfIdIsNullOrEmpty(id: &quot;&quot;)" type="NuGetGallery.PackageFileServiceFacts+TheDeletePackageFileMethod" method="WillThrowIfIdIsNullOrEmpty" time="0.0000887" result="Pass" />
      <test name="NuGetGallery.PackageFileServiceFacts+TheDeletePackageFileMethod.WillDeleteTheFileViaTheFileStorageServiceUsingAFileNameWithIdAndVersion" type="NuGetGallery.PackageFileServiceFacts+TheDeletePackageFileMethod" method="WillDeleteTheFileViaTheFileStorageServiceUsingAFileNameWithIdAndVersion" time="0.0047397" result="Pass" />
      <test name="NuGetGallery.PackageFileServiceFacts+TheDeletePackageFileMethod.WillDeleteTheFileViaTheFileStorageServiceUsingThePackagesFolder" type="NuGetGallery.PackageFileServiceFacts+TheDeletePackageFileMethod" method="WillDeleteTheFileViaTheFileStorageServiceUsingThePackagesFolder" time="0.0026179" result="Pass" />
    </collection>
    <collection total="32" passed="32" failed="0" skipped="0" name="Test collection for NuGetGallery.EmailValidationRegex" time="0.002">
      <test name="NuGetGallery.EmailValidationRegex.TheSecondPartDoesntAllow(testSecondPart: &quot;mailserver1&quot;)" type="NuGetGallery.EmailValidationRegex" method="TheSecondPartDoesntAllow" time="0.0003208" result="Pass" />
      <test name="NuGetGallery.EmailValidationRegex.TheSecondPartDoesntAllow(testSecondPart: &quot;.com&quot;)" type="NuGetGallery.EmailValidationRegex" method="TheSecondPartDoesntAllow" time="0.0000532" result="Pass" />
      <test name="NuGetGallery.EmailValidationRegex.TheSecondPartDoesntAllow(testSecondPart: &quot;[1.1.1.1]&quot;)" type="NuGetGallery.EmailValidationRegex" method="TheSecondPartDoesntAllow" time="0.0000323" result="Pass" />
      <test name="NuGetGallery.EmailValidationRegex.TheSecondPartDoesntAllow(testSecondPart: &quot;[IPv6:2001:db8:1ff::a0b:dbd0]&quot;)" type="NuGetGallery.EmailValidationRegex" method="TheSecondPartDoesntAllow" time="0.0000319" result="Pass" />
      <test name="NuGetGallery.EmailValidationRegex.TheSecondPartDoesntAllow(testSecondPart: &quot;com&quot;)" type="NuGetGallery.EmailValidationRegex" method="TheSecondPartDoesntAllow" time="0.0000331" result="Pass" />
      <test name="NuGetGallery.EmailValidationRegex.TheFirstPartDoesntAllow(testFirstPart: &quot;abc&quot;defghi&quot;xyz&quot;)" type="NuGetGallery.EmailValidationRegex" method="TheFirstPartDoesntAllow" time="0.0002604" result="Pass" />
      <test name="NuGetGallery.EmailValidationRegex.TheFirstPartDoesntAllow(testFirstPart: &quot;fr\ed&quot;)" type="NuGetGallery.EmailValidationRegex" method="TheFirstPartDoesntAllow" time="0.0000287" result="Pass" />
      <test name="NuGetGallery.EmailValidationRegex.TheFirstPartDoesntAllow(testFirstPart: &quot;abc.&quot;defghi&quot;.xyz&quot;)" type="NuGetGallery.EmailValidationRegex" method="TheFirstPartDoesntAllow" time="0.0000303" result="Pass" />
      <test name="NuGetGallery.EmailValidationRegex.TheFirstPartDoesntAllow(testFirstPart: &quot;fr@ed&quot;)" type="NuGetGallery.EmailValidationRegex" method="TheFirstPartDoesntAllow" time="0.0000283" result="Pass" />
      <test name="NuGetGallery.EmailValidationRegex.TheFirstPartDoesntAllow(testFirstPart: &quot;fr[]ed&quot;)" type="NuGetGallery.EmailValidationRegex" method="TheFirstPartDoesntAllow" time="0.0000267" result="Pass" />
      <test name="NuGetGallery.EmailValidationRegex.TheFirstPartDoesntAllow(testFirstPart: &quot;fr()ed&quot;)" type="NuGetGallery.EmailValidationRegex" method="TheFirstPartDoesntAllow" time="0.0000256" result="Pass" />
      <test name="NuGetGallery.EmailValidationRegex.TheFirstPartDoesntAllow(testFirstPart: &quot;fr&quot;ed&quot;)" type="NuGetGallery.EmailValidationRegex" method="TheFirstPartDoesntAllow" time="0.0000252" result="Pass" />
      <test name="NuGetGallery.EmailValidationRegex.TheFirstPartDoesntAllow(testFirstPart: &quot;abc.&quot;def\&quot;&quot;ghi&quot;.xyz&quot;)" type="NuGetGallery.EmailValidationRegex" method="TheFirstPartDoesntAllow" time="0.000024" result="Pass" />
      <test name="NuGetGallery.EmailValidationRegex.TheFirstPartMatches(testFirstPart: &quot;fred~`'.baz&quot;)" type="NuGetGallery.EmailValidationRegex" method="TheFirstPartMatches" time="0.0001649" result="Pass" />
      <test name="NuGetGallery.EmailValidationRegex.TheFirstPartMatches(testFirstPart: &quot;fr..ed&quot;)" type="NuGetGallery.EmailValidationRegex" method="TheFirstPartMatches" time="0.0000279" result="Pass" />
      <test name="NuGetGallery.EmailValidationRegex.TheFirstPartMatches(testFirstPart: &quot;fr.ed&quot;)" type="NuGetGallery.EmailValidationRegex" method="TheFirstPartMatches" time="0.0000259" result="Pass" />
      <test name="NuGetGallery.EmailValidationRegex.TheFirstPartMatches(testFirstPart: &quot;fred&quot;)" type="NuGetGallery.EmailValidationRegex" method="TheFirstPartMatches" time="0.0000244" result="Pass" />
      <test name="NuGetGallery.EmailValidationRegex.TheFirstPartMatches(testFirstPart: &quot;.fred&quot;)" type="NuGetGallery.EmailValidationRegex" method="TheFirstPartMatches" time="0.0000461" result="Pass" />
      <test name="NuGetGallery.EmailValidationRegex.TheFirstPartMatches(testFirstPart: &quot;!#$%&amp;'*+-/=?^_`{}|~&quot;)" type="NuGetGallery.EmailValidationRegex" method="TheFirstPartMatches" time="0.0000271" result="Pass" />
      <test name="NuGetGallery.EmailValidationRegex.TheFirstPartMatches(testFirstPart: &quot;fred.&quot;)" type="NuGetGallery.EmailValidationRegex" method="TheFirstPartMatches" time="0.0000256" result="Pass" />
      <test name="NuGetGallery.EmailValidationRegex.TheWholeDoesntAllow(testWhole: &quot;fred@.com&quot;)" type="NuGetGallery.EmailValidationRegex" method="TheWholeDoesntAllow" time="0.0001716" result="Pass" />
      <test name="NuGetGallery.EmailValidationRegex.TheWholeDoesntAllow(testWhole: &quot;fred@fred@fred.com&quot;)" type="NuGetGallery.EmailValidationRegex" method="TheWholeDoesntAllow" time="0.0000449" result="Pass" />
      <test name="NuGetGallery.EmailValidationRegex.TheWholeDoesntAllow(testWhole: &quot;fred@@fred.com&quot;)" type="NuGetGallery.EmailValidationRegex" method="TheWholeDoesntAllow" time="0.0000382" result="Pass" />
      <test name="NuGetGallery.EmailValidationRegex.TheSecondPartMatches(testSecondPart: &quot;xyz.govt.nz&quot;)" type="NuGetGallery.EmailValidationRegex" method="TheSecondPartMatches" time="0.0001629" result="Pass" />
      <test name="NuGetGallery.EmailValidationRegex.TheSecondPartMatches(testSecondPart: &quot;b.co.uk&quot;)" type="NuGetGallery.EmailValidationRegex" method="TheSecondPartMatches" time="0.0000346" result="Pass" />
      <test name="NuGetGallery.EmailValidationRegex.TheSecondPartMatches(testSecondPart: &quot;b.co&quot;)" type="NuGetGallery.EmailValidationRegex" method="TheSecondPartMatches" time="0.0000335" result="Pass" />
      <test name="NuGetGallery.EmailValidationRegex.TheSecondPartMatches(testSecondPart: &quot;X1-Y2-Z3.net&quot;)" type="NuGetGallery.EmailValidationRegex" method="TheSecondPartMatches" time="0.000035" result="Pass" />
      <test name="NuGetGallery.EmailValidationRegex.TheSecondPartMatches(testSecondPart: &quot;XYZ.com&quot;)" type="NuGetGallery.EmailValidationRegex" method="TheSecondPartMatches" time="0.0000334" result="Pass" />
      <test name="NuGetGallery.EmailValidationRegex.TheSecondPartMatches(testSecondPart: &quot;a.b.c.d.e.f&quot;)" type="NuGetGallery.EmailValidationRegex" method="TheSecondPartMatches" time="0.0000335" result="Pass" />
      <test name="NuGetGallery.EmailValidationRegex.TheWholeAllows(address: &quot;a@b.c.d.e.f&quot;)" type="NuGetGallery.EmailValidationRegex" method="TheWholeAllows" time="0.0001625" result="Pass" />
      <test name="NuGetGallery.EmailValidationRegex.TheWholeAllows(address: &quot;a@b.co&quot;)" type="NuGetGallery.EmailValidationRegex" method="TheWholeAllows" time="0.0000421" result="Pass" />
      <test name="NuGetGallery.EmailValidationRegex.TheWholeAllows(address: &quot;fred@fred.com&quot;)" type="NuGetGallery.EmailValidationRegex" method="TheWholeAllows" time="0.0000437" result="Pass" />
    </collection>
    <collection total="1" passed="1" failed="0" skipped="0" name="Test collection for NuGetGallery.FeedServiceFacts+TheV2Feed+TheFindPackagesByIdMethod" time="0.089">
      <test name="NuGetGallery.FeedServiceFacts+TheV2Feed+TheFindPackagesByIdMethod.V2FeedFindPackagesByIdReturnsUnlistedAndPrereleasePackages" type="NuGetGallery.FeedServiceFacts+TheV2Feed+TheFindPackagesByIdMethod" method="V2FeedFindPackagesByIdReturnsUnlistedAndPrereleasePackages" time="0.0888304" result="Pass" />
    </collection>
    <collection total="5" passed="5" failed="0" skipped="0" name="Test collection for NuGetGallery.MessageServiceFacts+TheSendContactOwnersMessageMethod" time="0.008">
      <test name="NuGetGallery.MessageServiceFacts+TheSendContactOwnersMessageMethod.WillSendEmailToAllOwners" type="NuGetGallery.MessageServiceFacts+TheSendContactOwnersMessageMethod" method="WillSendEmailToAllOwners" time="0.0032806" result="Pass" />
      <test name="NuGetGallery.MessageServiceFacts+TheSendContactOwnersMessageMethod.WillNotCopySenderIfNoOwnersAllow" type="NuGetGallery.MessageServiceFacts+TheSendContactOwnersMessageMethod" method="WillNotCopySenderIfNoOwnersAllow" time="0.0008905" result="Pass" />
      <test name="NuGetGallery.MessageServiceFacts+TheSendContactOwnersMessageMethod.WillNotSendEmailToOwnerThatOptsOut" type="NuGetGallery.MessageServiceFacts+TheSendContactOwnersMessageMethod" method="WillNotSendEmailToOwnerThatOptsOut" time="0.000838" result="Pass" />
      <test name="NuGetGallery.MessageServiceFacts+TheSendContactOwnersMessageMethod.WillCopySenderIfAsked" type="NuGetGallery.MessageServiceFacts+TheSendContactOwnersMessageMethod" method="WillCopySenderIfAsked" time="0.0020652" result="Pass" />
      <test name="NuGetGallery.MessageServiceFacts+TheSendContactOwnersMessageMethod.WillNotAttemptToSendIfNoOwnersAllow" type="NuGetGallery.MessageServiceFacts+TheSendContactOwnersMessageMethod" method="WillNotAttemptToSendIfNoOwnersAllow" time="0.0007235" result="Pass" />
    </collection>
    <collection total="6" passed="6" failed="0" skipped="0" name="Test collection for NuGetGallery.CuratedPackagesControllerFacts+ThePatchCuratedPackageAction" time="0.359">
      <test name="NuGetGallery.CuratedPackagesControllerFacts+ThePatchCuratedPackageAction.WillReturn404IfTheCuratedPackageDoesNotExist" type="NuGetGallery.CuratedPackagesControllerFacts+ThePatchCuratedPackageAction" method="WillReturn404IfTheCuratedPackageDoesNotExist" time="0.0864735" result="Pass" />
      <test name="NuGetGallery.CuratedPackagesControllerFacts+ThePatchCuratedPackageAction.WillModifyTheCuratedPackageWhenRequestIsValid" type="NuGetGallery.CuratedPackagesControllerFacts+ThePatchCuratedPackageAction" method="WillModifyTheCuratedPackageWhenRequestIsValid" time="0.0370952" result="Pass" />
      <test name="NuGetGallery.CuratedPackagesControllerFacts+ThePatchCuratedPackageAction.WillReturn404IfTheCuratedFeedDoesNotExist" type="NuGetGallery.CuratedPackagesControllerFacts+ThePatchCuratedPackageAction" method="WillReturn404IfTheCuratedFeedDoesNotExist" time="0.0548608" result="Pass" />
      <test name="NuGetGallery.CuratedPackagesControllerFacts+ThePatchCuratedPackageAction.WillReturn204AfterModifyingTheCuratedPackage" type="NuGetGallery.CuratedPackagesControllerFacts+ThePatchCuratedPackageAction" method="WillReturn204AfterModifyingTheCuratedPackage" time="0.0318371" result="Pass" />
      <test name="NuGetGallery.CuratedPackagesControllerFacts+ThePatchCuratedPackageAction.WillReturn403IfNotAFeedManager" type="NuGetGallery.CuratedPackagesControllerFacts+ThePatchCuratedPackageAction" method="WillReturn403IfNotAFeedManager" time="0.0323949" result="Pass" />
      <test name="NuGetGallery.CuratedPackagesControllerFacts+ThePatchCuratedPackageAction.WillReturn400IfTheModelStateIsInvalid" type="NuGetGallery.CuratedPackagesControllerFacts+ThePatchCuratedPackageAction" method="WillReturn400IfTheModelStateIsInvalid" time="0.1161672" result="Pass" />
    </collection>
    <collection total="7" passed="7" failed="0" skipped="0" name="Test collection for NuGetGallery.UserServiceFacts+TheConfirmEmailAddressMethod" time="0.135">
      <test name="NuGetGallery.UserServiceFacts+TheConfirmEmailAddressMethod.ForUserWithConfirmedEmailWithTokenThatDoesMatchUserConfirmsUserAndReturnsTrue" type="NuGetGallery.UserServiceFacts+TheConfirmEmailAddressMethod" method="ForUserWithConfirmedEmailWithTokenThatDoesMatchUserConfirmsUserAndReturnsTrue" time="0.1117783" result="Pass" />
      <test name="NuGetGallery.UserServiceFacts+TheConfirmEmailAddressMethod.WithNullUserThrowsArgumentNullException" type="NuGetGallery.UserServiceFacts+TheConfirmEmailAddressMethod" method="WithNullUserThrowsArgumentNullException" time="0.0025681" result="Pass" />
      <test name="NuGetGallery.UserServiceFacts+TheConfirmEmailAddressMethod.WritesAuditRecord" type="NuGetGallery.UserServiceFacts+TheConfirmEmailAddressMethod" method="WritesAuditRecord" time="0.0032586" result="Pass" />
      <test name="NuGetGallery.UserServiceFacts+TheConfirmEmailAddressMethod.WithTokenThatDoesMatchUserConfirmsUserAndReturnsTrue" type="NuGetGallery.UserServiceFacts+TheConfirmEmailAddressMethod" method="WithTokenThatDoesMatchUserConfirmsUserAndReturnsTrue" time="0.0029139" result="Pass" />
      <test name="NuGetGallery.UserServiceFacts+TheConfirmEmailAddressMethod.WithEmptyTokenThrowsArgumentNullException" type="NuGetGallery.UserServiceFacts+TheConfirmEmailAddressMethod" method="WithEmptyTokenThrowsArgumentNullException" time="0.0092528" result="Pass" />
      <test name="NuGetGallery.UserServiceFacts+TheConfirmEmailAddressMethod.ThrowsForDuplicateConfirmedEmailAddresses" type="NuGetGallery.UserServiceFacts+TheConfirmEmailAddressMethod" method="ThrowsForDuplicateConfirmedEmailAddresses" time="0.0037058" result="Pass" />
      <test name="NuGetGallery.UserServiceFacts+TheConfirmEmailAddressMethod.WithTokenThatDoesNotMatchUserReturnsFalse" type="NuGetGallery.UserServiceFacts+TheConfirmEmailAddressMethod" method="WithTokenThatDoesNotMatchUserReturnsFalse" time="0.0018995" result="Pass" />
    </collection>
    <collection total="1" passed="1" failed="0" skipped="0" name="Test collection for NuGetGallery.ViewModels.DisplayPackageViewModelFacts" time="0.003">
      <test name="NuGetGallery.ViewModels.DisplayPackageViewModelFacts.TheCtorSortsPackageVersionsProperly" type="NuGetGallery.ViewModels.DisplayPackageViewModelFacts" method="TheCtorSortsPackageVersionsProperly" time="0.0025768" result="Pass" />
    </collection>
    <collection total="1" passed="1" failed="0" skipped="0" name="Test collection for NuGetGallery.PolicyFacts" time="0.127">
      <test name="NuGetGallery.PolicyFacts.AllAdminControllersHaveAuthorizeAttributeOnClassSettingAllowedRolesToAdmins" type="NuGetGallery.PolicyFacts" method="AllAdminControllersHaveAuthorizeAttributeOnClassSettingAllowedRolesToAdmins" time="0.1268751" result="Pass" />
    </collection>
    <collection total="3" passed="3" failed="0" skipped="0" name="Test collection for NuGetGallery.Authentication.AuthenticationServiceFacts+TheChangePasswordMethod" time="0.689">
      <test name="NuGetGallery.Authentication.AuthenticationServiceFacts+TheChangePasswordMethod.GivenValidOldPassword_ItReturnsTrueAndReplacesPasswordCredential" type="NuGetGallery.Authentication.AuthenticationServiceFacts+TheChangePasswordMethod" method="GivenValidOldPassword_ItReturnsTrueAndReplacesPasswordCredential" time="0.348373" result="Pass" />
      <test name="NuGetGallery.Authentication.AuthenticationServiceFacts+TheChangePasswordMethod.GivenValidOldPassword_ItWritesAnAuditRecordOfTheChange" type="NuGetGallery.Authentication.AuthenticationServiceFacts+TheChangePasswordMethod" method="GivenValidOldPassword_ItWritesAnAuditRecordOfTheChange" time="0.2151166" result="Pass" />
      <test name="NuGetGallery.Authentication.AuthenticationServiceFacts+TheChangePasswordMethod.GivenInvalidOldPassword_ItReturnsFalseAndDoesNotChangePassword" type="NuGetGallery.Authentication.AuthenticationServiceFacts+TheChangePasswordMethod" method="GivenInvalidOldPassword_ItReturnsFalseAndDoesNotChangePassword" time="0.1258476" result="Pass" />
    </collection>
    <collection total="3" passed="3" failed="0" skipped="0" name="Test collection for NuGetGallery.UploadFileServiceFacts+TheDeleteUploadFileMethod" time="0.013">
      <test name="NuGetGallery.UploadFileServiceFacts+TheDeleteUploadFileMethod.WillUseTheUserKeyInTheFileName" type="NuGetGallery.UploadFileServiceFacts+TheDeleteUploadFileMethod" method="WillUseTheUserKeyInTheFileName" time="0.003778" result="Pass" />
      <test name="NuGetGallery.UploadFileServiceFacts+TheDeleteUploadFileMethod.WillDeleteFromTheUploadToTheUploadsFolder" type="NuGetGallery.UploadFileServiceFacts+TheDeleteUploadFileMethod" method="WillDeleteFromTheUploadToTheUploadsFolder" time="0.0090404" result="Pass" />
      <test name="NuGetGallery.UploadFileServiceFacts+TheDeleteUploadFileMethod.WillThrowIfTheUserKeyIsMissing" type="NuGetGallery.UploadFileServiceFacts+TheDeleteUploadFileMethod" method="WillThrowIfTheUserKeyIsMissing" time="0.0005636" result="Pass" />
    </collection>
    <collection total="2" passed="2" failed="0" skipped="0" name="Test collection for NuGetGallery.MessageServiceFacts+TheSendCredentialRemovedNoticeMethod" time="0.041">
      <test name="NuGetGallery.MessageServiceFacts+TheSendCredentialRemovedNoticeMethod.UsesProviderNounToDescribeCredentialIfPresent" type="NuGetGallery.MessageServiceFacts+TheSendCredentialRemovedNoticeMethod" method="UsesProviderNounToDescribeCredentialIfPresent" time="0.0036067" result="Pass" />
      <test name="NuGetGallery.MessageServiceFacts+TheSendCredentialRemovedNoticeMethod.UsesTypeCaptionToDescribeCredentialIfNoProviderNounPresent" type="NuGetGallery.MessageServiceFacts+TheSendCredentialRemovedNoticeMethod" method="UsesTypeCaptionToDescribeCredentialIfNoProviderNounPresent" time="0.0375602" result="Pass" />
    </collection>
    <collection total="1" passed="1" failed="0" skipped="0" name="Test collection for NuGetGallery.NuGetExeDownloaderServiceFacts" time="0.027">
      <test name="NuGetGallery.NuGetExeDownloaderServiceFacts.CreateNuGetExeDownloadDoesNotExtractFileIfItAlreadyExists" type="NuGetGallery.NuGetExeDownloaderServiceFacts" method="CreateNuGetExeDownloadDoesNotExtractFileIfItAlreadyExists" time="0.0267539" result="Pass" />
    </collection>
    <collection total="3" passed="3" failed="0" skipped="0" name="Test collection for NuGetGallery.FeedServiceFacts+TheGetSiteRootMethod" time="0.044">
      <test name="NuGetGallery.FeedServiceFacts+TheGetSiteRootMethod.UsesCurrentRequestToDetermineSiteRoot" type="NuGetGallery.FeedServiceFacts+TheGetSiteRootMethod" method="UsesCurrentRequestToDetermineSiteRoot" time="0.0419253" result="Pass" />
      <test name="NuGetGallery.FeedServiceFacts+TheGetSiteRootMethod.AddsTrailingSlashes(siteRoot: &quot;http://nuget.org&quot;, expected: &quot;http://nuget.org/&quot;)" type="NuGetGallery.FeedServiceFacts+TheGetSiteRootMethod" method="AddsTrailingSlashes" time="0.001106" result="Pass" />
      <test name="NuGetGallery.FeedServiceFacts+TheGetSiteRootMethod.AddsTrailingSlashes(siteRoot: &quot;http://nuget.org/&quot;, expected: &quot;http://nuget.org/&quot;)" type="NuGetGallery.FeedServiceFacts+TheGetSiteRootMethod" method="AddsTrailingSlashes" time="0.0006978" result="Pass" />
    </collection>
    <collection total="2" passed="2" failed="0" skipped="0" name="Test collection for NuGetGallery.PackagesControllerFacts+TheCancelVerifyPackageAction" time="0.097">
      <test name="NuGetGallery.PackagesControllerFacts+TheCancelVerifyPackageAction.DeletesTheInProgressPackageUpload" type="NuGetGallery.PackagesControllerFacts+TheCancelVerifyPackageAction" method="DeletesTheInProgressPackageUpload" time="0.0576872" result="Pass" />
      <test name="NuGetGallery.PackagesControllerFacts+TheCancelVerifyPackageAction.RedirectsToUploadPageAfterDelete" type="NuGetGallery.PackagesControllerFacts+TheCancelVerifyPackageAction" method="RedirectsToUploadPageAfterDelete" time="0.0397728" result="Pass" />
    </collection>
    <collection total="2" passed="2" failed="0" skipped="0" name="Test collection for NuGetGallery.PackageServiceFacts+TheSetLicenseReportVisibilityMethod" time="0.002">
      <test name="NuGetGallery.PackageServiceFacts+TheSetLicenseReportVisibilityMethod.SetsHideLicenseReportTrueWhenVisibleFalse" type="NuGetGallery.PackageServiceFacts+TheSetLicenseReportVisibilityMethod" method="SetsHideLicenseReportTrueWhenVisibleFalse" time="0.0018485" result="Pass" />
      <test name="NuGetGallery.PackageServiceFacts+TheSetLicenseReportVisibilityMethod.SetsHideLicenseReportFalseWhenVisibleTrue" type="NuGetGallery.PackageServiceFacts+TheSetLicenseReportVisibilityMethod" method="SetsHideLicenseReportFalseWhenVisibleTrue" time="0.0004598" result="Pass" />
    </collection>
    <collection total="9" passed="9" failed="0" skipped="0" name="Test collection for NuGetGallery.Filters.RequireSslAttributeFacts" time="0.431">
      <test name="NuGetGallery.Filters.RequireSslAttributeFacts.RequireHttpsAttributeRedirectsGetRequest(port: 443, hostFormatter: &quot;{0}&quot;)" type="NuGetGallery.Filters.RequireSslAttributeFacts" method="RequireHttpsAttributeRedirectsGetRequest" time="0.1152118" result="Pass" />
      <test name="NuGetGallery.Filters.RequireSslAttributeFacts.RequireHttpsAttributeRedirectsGetRequest(port: 44300, hostFormatter: &quot;{0}:44300&quot;)" type="NuGetGallery.Filters.RequireSslAttributeFacts" method="RequireHttpsAttributeRedirectsGetRequest" time="0.0331114" result="Pass" />
      <test name="NuGetGallery.Filters.RequireSslAttributeFacts.RequireHttpsAttributeReturns403IfNonGetRequest(method: &quot;PUT&quot;)" type="NuGetGallery.Filters.RequireSslAttributeFacts" method="RequireHttpsAttributeReturns403IfNonGetRequest" time="0.0465834" result="Pass" />
      <test name="NuGetGallery.Filters.RequireSslAttributeFacts.RequireHttpsAttributeReturns403IfNonGetRequest(method: &quot;POST&quot;)" type="NuGetGallery.Filters.RequireSslAttributeFacts" method="RequireHttpsAttributeReturns403IfNonGetRequest" time="0.0319938" result="Pass" />
      <test name="NuGetGallery.Filters.RequireSslAttributeFacts.RequireHttpsAttributeReturns403IfNonGetRequest(method: &quot;TRACE&quot;)" type="NuGetGallery.Filters.RequireSslAttributeFacts" method="RequireHttpsAttributeReturns403IfNonGetRequest" time="0.0335389" result="Pass" />
      <test name="NuGetGallery.Filters.RequireSslAttributeFacts.RequireHttpsAttributeReturns403IfNonGetRequest(method: &quot;DELETE&quot;)" type="NuGetGallery.Filters.RequireSslAttributeFacts" method="RequireHttpsAttributeReturns403IfNonGetRequest" time="0.0310086" result="Pass" />
      <test name="NuGetGallery.Filters.RequireSslAttributeFacts.RequireHttpsAttributeReturns403IfNonGetRequest(method: &quot;HEAD&quot;)" type="NuGetGallery.Filters.RequireSslAttributeFacts" method="RequireHttpsAttributeReturns403IfNonGetRequest" time="0.0378949" result="Pass" />
      <test name="NuGetGallery.Filters.RequireSslAttributeFacts.RequireHttpsAttributeDoesNotThrowWhenRequireSSLIsFalse" type="NuGetGallery.Filters.RequireSslAttributeFacts" method="RequireHttpsAttributeDoesNotThrowWhenRequireSSLIsFalse" time="0.0718579" result="Pass" />
      <test name="NuGetGallery.Filters.RequireSslAttributeFacts.RequireHttpsAttributeDoesNotThrowForSecureConnection" type="NuGetGallery.Filters.RequireSslAttributeFacts" method="RequireHttpsAttributeDoesNotThrowForSecureConnection" time="0.0300299" result="Pass" />
    </collection>
    <collection total="9" passed="9" failed="0" skipped="0" name="Test collection for NuGetGallery.PackageFileServiceFacts+TheSavePackageFileMethod" time="0.023">
      <test name="NuGetGallery.PackageFileServiceFacts+TheSavePackageFileMethod.WillThrowIfPackageFileIsNull" type="NuGetGallery.PackageFileServiceFacts+TheSavePackageFileMethod" method="WillThrowIfPackageFileIsNull" time="0.0011818" result="Pass" />
      <test name="NuGetGallery.PackageFileServiceFacts+TheSavePackageFileMethod.WillUseNormalizedRegularVersionIfNormalizedVersionMissing" type="NuGetGallery.PackageFileServiceFacts+TheSavePackageFileMethod" method="WillUseNormalizedRegularVersionIfNormalizedVersionMissing" time="0.0074165" result="Pass" />
      <test name="NuGetGallery.PackageFileServiceFacts+TheSavePackageFileMethod.WillThrowIfPackageIsMissingPackageRegistration" type="NuGetGallery.PackageFileServiceFacts+TheSavePackageFileMethod" method="WillThrowIfPackageIsMissingPackageRegistration" time="0.0008091" result="Pass" />
      <test name="NuGetGallery.PackageFileServiceFacts+TheSavePackageFileMethod.WillSaveTheFileViaTheFileStorageServiceUsingAFileNameWithIdAndNormalizedersion" type="NuGetGallery.PackageFileServiceFacts+TheSavePackageFileMethod" method="WillSaveTheFileViaTheFileStorageServiceUsingAFileNameWithIdAndNormalizedersion" time="0.0041574" result="Pass" />
      <test name="NuGetGallery.PackageFileServiceFacts+TheSavePackageFileMethod.WillThrowIfPackageIsMissingNormalizedVersionAndVersion" type="NuGetGallery.PackageFileServiceFacts+TheSavePackageFileMethod" method="WillThrowIfPackageIsMissingNormalizedVersionAndVersion" time="0.0007042" result="Pass" />
      <test name="NuGetGallery.PackageFileServiceFacts+TheSavePackageFileMethod.WillThrowIfPackageIsMissingPackageRegistrationId" type="NuGetGallery.PackageFileServiceFacts+TheSavePackageFileMethod" method="WillThrowIfPackageIsMissingPackageRegistrationId" time="0.0006915" result="Pass" />
      <test name="NuGetGallery.PackageFileServiceFacts+TheSavePackageFileMethod.WillSaveTheFileViaTheFileStorageServiceUsingThePackagesFolder" type="NuGetGallery.PackageFileServiceFacts+TheSavePackageFileMethod" method="WillSaveTheFileViaTheFileStorageServiceUsingThePackagesFolder" time="0.0029057" result="Pass" />
      <test name="NuGetGallery.PackageFileServiceFacts+TheSavePackageFileMethod.WillThrowIfPackageIsNull" type="NuGetGallery.PackageFileServiceFacts+TheSavePackageFileMethod" method="WillThrowIfPackageIsNull" time="0.0006264" result="Pass" />
      <test name="NuGetGallery.PackageFileServiceFacts+TheSavePackageFileMethod.WillSaveTheFileStreamViaTheFileStorageService" type="NuGetGallery.PackageFileServiceFacts+TheSavePackageFileMethod" method="WillSaveTheFileStreamViaTheFileStorageService" time="0.0041941" result="Pass" />
    </collection>
    <collection total="1" passed="1" failed="0" skipped="0" name="Test collection for NuGetGallery.PackagesControllerFacts+TheListPackagesMethod" time="0.065">
      <test name="NuGetGallery.PackagesControllerFacts+TheListPackagesMethod.TrimsSearchTerm" type="NuGetGallery.PackagesControllerFacts+TheListPackagesMethod" method="TrimsSearchTerm" time="0.0648211" result="Pass" />
    </collection>
    <collection total="4" passed="4" failed="0" skipped="0" name="Test collection for NuGetGallery.DataServices.PackageExtensionsFacts+TheProjectV2FeedPackageMethod" time="0.049">
      <test name="NuGetGallery.DataServices.PackageExtensionsFacts+TheProjectV2FeedPackageMethod.InjectsGalleryUrlsCorrectly" type="NuGetGallery.DataServices.PackageExtensionsFacts+TheProjectV2FeedPackageMethod" method="InjectsGalleryUrlsCorrectly" time="0.0278814" result="Pass" />
      <test name="NuGetGallery.DataServices.PackageExtensionsFacts+TheProjectV2FeedPackageMethod.ReturnsNullLicenseReportInfoIfFeatureDisabled" type="NuGetGallery.DataServices.PackageExtensionsFacts+TheProjectV2FeedPackageMethod" method="ReturnsNullLicenseReportInfoIfFeatureDisabled" time="0.0070079" result="Pass" />
      <test name="NuGetGallery.DataServices.PackageExtensionsFacts+TheProjectV2FeedPackageMethod.MapsBasicPackagePropertiesCorrectly" type="NuGetGallery.DataServices.PackageExtensionsFacts+TheProjectV2FeedPackageMethod" method="MapsBasicPackagePropertiesCorrectly" time="0.0073087" result="Pass" />
      <test name="NuGetGallery.DataServices.PackageExtensionsFacts+TheProjectV2FeedPackageMethod.InjectsDummyDateIfNotListed" type="NuGetGallery.DataServices.PackageExtensionsFacts+TheProjectV2FeedPackageMethod" method="InjectsDummyDateIfNotListed" time="0.0070075" result="Pass" />
    </collection>
    <collection total="2" passed="2" failed="0" skipped="0" name="Test collection for NuGetGallery.MessageServiceFacts+TheSendPackageOwnerRequestMethod" time="0.003">
      <test name="NuGetGallery.MessageServiceFacts+TheSendPackageOwnerRequestMethod.SendsPackageOwnerRequestConfirmationUrl" type="NuGetGallery.MessageServiceFacts+TheSendPackageOwnerRequestMethod" method="SendsPackageOwnerRequestConfirmationUrl" time="0.0021769" result="Pass" />
      <test name="NuGetGallery.MessageServiceFacts+TheSendPackageOwnerRequestMethod.DoesNotSendRequestIfUserDoesNotAllowEmails" type="NuGetGallery.MessageServiceFacts+TheSendPackageOwnerRequestMethod" method="DoesNotSendRequestIfUserDoesNotAllowEmails" time="0.0006402" result="Pass" />
    </collection>
    <collection total="11" passed="11" failed="0" skipped="0" name="Test collection for NuGetGallery.PackagesControllerFacts+TheVerifyPackageActionForGetRequests" time="0.722">
      <test name="NuGetGallery.PackagesControllerFacts+TheVerifyPackageActionForGetRequests.WillPassThePackageLicenseUrlToTheView" type="NuGetGallery.PackagesControllerFacts+TheVerifyPackageActionForGetRequests" method="WillPassThePackageLicenseUrlToTheView" time="0.0547096" result="Pass" />
      <test name="NuGetGallery.PackagesControllerFacts+TheVerifyPackageActionForGetRequests.WillRedirectToUploadPackagePageWhenThereIsNoUploadInProgress" type="NuGetGallery.PackagesControllerFacts+TheVerifyPackageActionForGetRequests" method="WillRedirectToUploadPackagePageWhenThereIsNoUploadInProgress" time="0.044591" result="Pass" />
      <test name="NuGetGallery.PackagesControllerFacts+TheVerifyPackageActionForGetRequests.WillPassThePackageDescriptionToTheView" type="NuGetGallery.PackagesControllerFacts+TheVerifyPackageActionForGetRequests" method="WillPassThePackageDescriptionToTheView" time="0.0386383" result="Pass" />
      <test name="NuGetGallery.PackagesControllerFacts+TheVerifyPackageActionForGetRequests.WillPassThePackageLicenseAcceptanceRequirementToTheView" type="NuGetGallery.PackagesControllerFacts+TheVerifyPackageActionForGetRequests" method="WillPassThePackageLicenseAcceptanceRequirementToTheView" time="0.0378575" result="Pass" />
      <test name="NuGetGallery.PackagesControllerFacts+TheVerifyPackageActionForGetRequests.WillPassThePackageProjectUrlToTheView" type="NuGetGallery.PackagesControllerFacts+TheVerifyPackageActionForGetRequests" method="WillPassThePackageProjectUrlToTheView" time="0.1051983" result="Pass" />
      <test name="NuGetGallery.PackagesControllerFacts+TheVerifyPackageActionForGetRequests.WillPassThePackageTagsToTheView" type="NuGetGallery.PackagesControllerFacts+TheVerifyPackageActionForGetRequests" method="WillPassThePackageTagsToTheView" time="0.0643072" result="Pass" />
      <test name="NuGetGallery.PackagesControllerFacts+TheVerifyPackageActionForGetRequests.WillPassThePackagAuthorsToTheView" type="NuGetGallery.PackagesControllerFacts+TheVerifyPackageActionForGetRequests" method="WillPassThePackagAuthorsToTheView" time="0.0577717" result="Pass" />
      <test name="NuGetGallery.PackagesControllerFacts+TheVerifyPackageActionForGetRequests.WillPassThePackageTitleToTheView" type="NuGetGallery.PackagesControllerFacts+TheVerifyPackageActionForGetRequests" method="WillPassThePackageTitleToTheView" time="0.0402508" result="Pass" />
      <test name="NuGetGallery.PackagesControllerFacts+TheVerifyPackageActionForGetRequests.WillPassThePackageVersionToTheView" type="NuGetGallery.PackagesControllerFacts+TheVerifyPackageActionForGetRequests" method="WillPassThePackageVersionToTheView" time="0.0419455" result="Pass" />
      <test name="NuGetGallery.PackagesControllerFacts+TheVerifyPackageActionForGetRequests.WillPassThePackageSummaryToTheView" type="NuGetGallery.PackagesControllerFacts+TheVerifyPackageActionForGetRequests" method="WillPassThePackageSummaryToTheView" time="0.1906179" result="Pass" />
      <test name="NuGetGallery.PackagesControllerFacts+TheVerifyPackageActionForGetRequests.WillPassThePackageIdToTheView" type="NuGetGallery.PackagesControllerFacts+TheVerifyPackageActionForGetRequests" method="WillPassThePackageIdToTheView" time="0.0457646" result="Pass" />
    </collection>
    <collection total="11" passed="11" failed="0" skipped="0" name="Test collection for NuGetGallery.PackageServiceFacts+ThePublishPackageMethod" time="0.031">
      <test name="NuGetGallery.PackageServiceFacts+ThePublishPackageMethod.WillNotSetUpdateIsLatestStableOnThePackageWhenItIsNotTheLatestVersionWithOverload" type="NuGetGallery.PackageServiceFacts+ThePublishPackageMethod" method="WillNotSetUpdateIsLatestStableOnThePackageWhenItIsNotTheLatestVersionWithOverload" time="0.0053085" result="Pass" />
      <test name="NuGetGallery.PackageServiceFacts+ThePublishPackageMethod.WillSetThePublishedDateOnThePackageBeingPublished" type="NuGetGallery.PackageServiceFacts+ThePublishPackageMethod" method="WillSetThePublishedDateOnThePackageBeingPublished" time="0.0044901" result="Pass" />
      <test name="NuGetGallery.PackageServiceFacts+ThePublishPackageMethod.WillSetThePublishedDateOnThePackageBeingPublishedWithOverload" type="NuGetGallery.PackageServiceFacts+ThePublishPackageMethod" method="WillSetThePublishedDateOnThePackageBeingPublishedWithOverload" time="0.0028547" result="Pass" />
      <test name="NuGetGallery.PackageServiceFacts+ThePublishPackageMethod.WillThrowIfThePackageDoesNotExist" type="NuGetGallery.PackageServiceFacts+ThePublishPackageMethod" method="WillThrowIfThePackageDoesNotExist" time="0.0030758" result="Pass" />
      <test name="NuGetGallery.PackageServiceFacts+ThePublishPackageMethod.SetUpdateDoesNotSetIsLatestStableForAnyIfAllPackagesArePrereleaseWithOverload" type="NuGetGallery.PackageServiceFacts+ThePublishPackageMethod" method="SetUpdateDoesNotSetIsLatestStableForAnyIfAllPackagesArePrereleaseWithOverload" time="0.0027545" result="Pass" />
      <test name="NuGetGallery.PackageServiceFacts+ThePublishPackageMethod.WillSetUpdateIsLatestStableOnThePackageWhenItIsTheLatestVersionWithOverload" type="NuGetGallery.PackageServiceFacts+ThePublishPackageMethod" method="WillSetUpdateIsLatestStableOnThePackageWhenItIsTheLatestVersionWithOverload" time="0.0021912" result="Pass" />
      <test name="NuGetGallery.PackageServiceFacts+ThePublishPackageMethod.SetUpdateDoesNotSetIsLatestStableForAnyIfAllPackagesArePrerelease" type="NuGetGallery.PackageServiceFacts+ThePublishPackageMethod" method="SetUpdateDoesNotSetIsLatestStableForAnyIfAllPackagesArePrerelease" time="0.0025168" result="Pass" />
      <test name="NuGetGallery.PackageServiceFacts+ThePublishPackageMethod.PublishPackageUpdatesIsAbsoluteLatestForPrereleasePackage" type="NuGetGallery.PackageServiceFacts+ThePublishPackageMethod" method="PublishPackageUpdatesIsAbsoluteLatestForPrereleasePackage" time="0.0024785" result="Pass" />
      <test name="NuGetGallery.PackageServiceFacts+ThePublishPackageMethod.WillSetUpdateIsLatestStableOnThePackageWhenItIsTheLatestVersion" type="NuGetGallery.PackageServiceFacts+ThePublishPackageMethod" method="WillSetUpdateIsLatestStableOnThePackageWhenItIsTheLatestVersion" time="0.0023479" result="Pass" />
      <test name="NuGetGallery.PackageServiceFacts+ThePublishPackageMethod.PublishPackageUpdatesIsAbsoluteLatestForPrereleasePackageWithOverload" type="NuGetGallery.PackageServiceFacts+ThePublishPackageMethod" method="PublishPackageUpdatesIsAbsoluteLatestForPrereleasePackageWithOverload" time="0.0024702" result="Pass" />
      <test name="NuGetGallery.PackageServiceFacts+ThePublishPackageMethod.WillThrowIfThePackageIsNull" type="NuGetGallery.PackageServiceFacts+ThePublishPackageMethod" method="WillThrowIfThePackageIsNull" time="0.000658" result="Pass" />
    </collection>
    <collection total="1" passed="1" failed="0" skipped="0" name="Test collection for NuGetGallery.Commands.AutomaticallyCuratePackageCommandFacts+TheExecuteMethod" time="0.040">
      <test name="NuGetGallery.Commands.AutomaticallyCuratePackageCommandFacts+TheExecuteMethod.WillCuratePackageUsingAllPackageCurators" type="NuGetGallery.Commands.AutomaticallyCuratePackageCommandFacts+TheExecuteMethod" method="WillCuratePackageUsingAllPackageCurators" time="0.0404959" result="Pass" />
    </collection>
    <collection total="2" passed="2" failed="0" skipped="0" name="Test collection for NuGetGallery.Services.ContentServiceFacts+TheConstructor" time="0.016">
      <test name="NuGetGallery.Services.ContentServiceFacts+TheConstructor.GivenANullFileStorageService_ItShouldThrow" type="NuGetGallery.Services.ContentServiceFacts+TheConstructor" method="GivenANullFileStorageService_ItShouldThrow" time="0.002246" result="Pass" />
      <test name="NuGetGallery.Services.ContentServiceFacts+TheConstructor.GivenANullDiagnosticsService_ItShouldThrow" type="NuGetGallery.Services.ContentServiceFacts+TheConstructor" method="GivenANullDiagnosticsService_ItShouldThrow" time="0.0133665" result="Pass" />
    </collection>
    <collection total="2" passed="2" failed="0" skipped="0" name="Test collection for NuGetGallery.Controllers.AuthenticationControllerFacts+TheLogOnAction" time="4.424">
      <test name="NuGetGallery.Controllers.AuthenticationControllerFacts+TheLogOnAction.GivenNoAuthenticatedUser_ItLoadsProvidersIntoViewModelAndDisplaysLogOnView" type="NuGetGallery.Controllers.AuthenticationControllerFacts+TheLogOnAction" method="GivenNoAuthenticatedUser_ItLoadsProvidersIntoViewModelAndDisplaysLogOnView" time="3.9804922" result="Pass" />
      <test name="NuGetGallery.Controllers.AuthenticationControllerFacts+TheLogOnAction.GivenUserAlreadyAuthenticated_ItRedirectsToReturnUrl" type="NuGetGallery.Controllers.AuthenticationControllerFacts+TheLogOnAction" method="GivenUserAlreadyAuthenticated_ItRedirectsToReturnUrl" time="0.4438539" result="Pass" />
    </collection>
    <collection total="3" passed="3" failed="0" skipped="0" name="Test collection for NuGetGallery.Infrastructure.CookieTempDataProviderFacts+TheLoadTempDataMethod" time="0.049">
      <test name="NuGetGallery.Infrastructure.CookieTempDataProviderFacts+TheLoadTempDataMethod.WithNullCookieReturnsEmptyDictionary" type="NuGetGallery.Infrastructure.CookieTempDataProviderFacts+TheLoadTempDataMethod" method="WithNullCookieReturnsEmptyDictionary" time="0.017079" result="Pass" />
      <test name="NuGetGallery.Infrastructure.CookieTempDataProviderFacts+TheLoadTempDataMethod.WithEmptyCookieReturnsEmptyDictionary" type="NuGetGallery.Infrastructure.CookieTempDataProviderFacts+TheLoadTempDataMethod" method="WithEmptyCookieReturnsEmptyDictionary" time="0.014424" result="Pass" />
      <test name="NuGetGallery.Infrastructure.CookieTempDataProviderFacts+TheLoadTempDataMethod.RetrievesValuesFromCookie" type="NuGetGallery.Infrastructure.CookieTempDataProviderFacts+TheLoadTempDataMethod" method="RetrievesValuesFromCookie" time="0.0170522" result="Pass" />
    </collection>
    <collection total="7" passed="7" failed="0" skipped="0" name="Test collection for NuGetGallery.PackageServiceFacts+TheDeletePackageMethod" time="0.045">
      <test name="NuGetGallery.PackageServiceFacts+TheDeletePackageMethod.DoNotCommitIfCommitChangesIsFalse" type="NuGetGallery.PackageServiceFacts+TheDeletePackageMethod" method="DoNotCommitIfCommitChangesIsFalse" time="0.0047262" result="Pass" />
      <test name="NuGetGallery.PackageServiceFacts+TheDeletePackageMethod.WillThrowIfThePackageDoesNotExist" type="NuGetGallery.PackageServiceFacts+TheDeletePackageMethod" method="WillThrowIfThePackageDoesNotExist" time="0.003906" result="Pass" />
      <test name="NuGetGallery.PackageServiceFacts+TheDeletePackageMethod.WillNotDeleteThePackageRegistrationIfThereAreOtherPackages" type="NuGetGallery.PackageServiceFacts+TheDeletePackageMethod" method="WillNotDeleteThePackageRegistrationIfThereAreOtherPackages" time="0.0074168" result="Pass" />
      <test name="NuGetGallery.PackageServiceFacts+TheDeletePackageMethod.WillDeleteThePackageRegistrationIfThereAreNoOtherPackages" type="NuGetGallery.PackageServiceFacts+TheDeletePackageMethod" method="WillDeleteThePackageRegistrationIfThereAreNoOtherPackages" time="0.0054206" result="Pass" />
      <test name="NuGetGallery.PackageServiceFacts+TheDeletePackageMethod.CommitIfCommitChangesIsTrue" type="NuGetGallery.PackageServiceFacts+TheDeletePackageMethod" method="CommitIfCommitChangesIsTrue" time="0.0027434" result="Pass" />
      <test name="NuGetGallery.PackageServiceFacts+TheDeletePackageMethod.WillUpdateIsLatest" type="NuGetGallery.PackageServiceFacts+TheDeletePackageMethod" method="WillUpdateIsLatest" time="0.0169488" result="Pass" />
      <test name="NuGetGallery.PackageServiceFacts+TheDeletePackageMethod.WillDeleteThePackage" type="NuGetGallery.PackageServiceFacts+TheDeletePackageMethod" method="WillDeleteThePackage" time="0.0038661" result="Pass" />
    </collection>
    <collection total="8" passed="8" failed="0" skipped="0" name="Test collection for NuGetGallery.FileSystemFileStorgeServiceFacts+TheGetFileMethod" time="2.530">
      <test name="NuGetGallery.FileSystemFileStorgeServiceFacts+TheGetFileMethod.WillThrowIfFolderNameIsNull(folderName: null)" type="NuGetGallery.FileSystemFileStorgeServiceFacts+TheGetFileMethod" method="WillThrowIfFolderNameIsNull" time="2.4114012" result="Pass" />
      <test name="NuGetGallery.FileSystemFileStorgeServiceFacts+TheGetFileMethod.WillThrowIfFolderNameIsNull(folderName: &quot;&quot;)" type="NuGetGallery.FileSystemFileStorgeServiceFacts+TheGetFileMethod" method="WillThrowIfFolderNameIsNull" time="0.0010448" result="Pass" />
      <test name="NuGetGallery.FileSystemFileStorgeServiceFacts+TheGetFileMethod.WillCheckWhetherTheFileExists" type="NuGetGallery.FileSystemFileStorgeServiceFacts+TheGetFileMethod" method="WillCheckWhetherTheFileExists" time="0.0773082" result="Pass" />
      <test name="NuGetGallery.FileSystemFileStorgeServiceFacts+TheGetFileMethod.WillReturnNullWhenRequestedFileDoesNotExist" type="NuGetGallery.FileSystemFileStorgeServiceFacts+TheGetFileMethod" method="WillReturnNullWhenRequestedFileDoesNotExist" time="0.0113481" result="Pass" />
      <test name="NuGetGallery.FileSystemFileStorgeServiceFacts+TheGetFileMethod.WillThrowIfFileNameIsNull(fileName: null)" type="NuGetGallery.FileSystemFileStorgeServiceFacts+TheGetFileMethod" method="WillThrowIfFileNameIsNull" time="0.0022283" result="Pass" />
      <test name="NuGetGallery.FileSystemFileStorgeServiceFacts+TheGetFileMethod.WillThrowIfFileNameIsNull(fileName: &quot;&quot;)" type="NuGetGallery.FileSystemFileStorgeServiceFacts+TheGetFileMethod" method="WillThrowIfFileNameIsNull" time="0.0007132" result="Pass" />
      <test name="NuGetGallery.FileSystemFileStorgeServiceFacts+TheGetFileMethod.WillReadTheRequestedFileWhenItExists" type="NuGetGallery.FileSystemFileStorgeServiceFacts+TheGetFileMethod" method="WillReadTheRequestedFileWhenItExists" time="0.00456" result="Pass" />
      <test name="NuGetGallery.FileSystemFileStorgeServiceFacts+TheGetFileMethod.WillReturnTheRequestFileStreamWhenItExists" type="NuGetGallery.FileSystemFileStorgeServiceFacts+TheGetFileMethod" method="WillReturnTheRequestFileStreamWhenItExists" time="0.0215283" result="Pass" />
    </collection>
    <collection total="4" passed="4" failed="0" skipped="0" name="Test collection for NuGetGallery.CloudBlobFileStorageServiceFacts+TheCtor" time="0.166">
      <test name="NuGetGallery.CloudBlobFileStorageServiceFacts+TheCtor.WillSetPermissionsForDemandedFolderInBlobContainers(folderName: &quot;packages&quot;, isPublic: True)" type="NuGetGallery.CloudBlobFileStorageServiceFacts+TheCtor" method="WillSetPermissionsForDemandedFolderInBlobContainers" time="0.047629" result="Pass" />
      <test name="NuGetGallery.CloudBlobFileStorageServiceFacts+TheCtor.WillSetPermissionsForDemandedFolderInBlobContainers(folderName: &quot;uploads&quot;, isPublic: False)" type="NuGetGallery.CloudBlobFileStorageServiceFacts+TheCtor" method="WillSetPermissionsForDemandedFolderInBlobContainers" time="0.0539971" result="Pass" />
      <test name="NuGetGallery.CloudBlobFileStorageServiceFacts+TheCtor.WillCreateABlobContainerForDemandedFoldersIfTheyDoNotExist(folderName: &quot;uploads&quot;)" type="NuGetGallery.CloudBlobFileStorageServiceFacts+TheCtor" method="WillCreateABlobContainerForDemandedFoldersIfTheyDoNotExist" time="0.0452361" result="Pass" />
      <test name="NuGetGallery.CloudBlobFileStorageServiceFacts+TheCtor.WillCreateABlobContainerForDemandedFoldersIfTheyDoNotExist(folderName: &quot;packages&quot;)" type="NuGetGallery.CloudBlobFileStorageServiceFacts+TheCtor" method="WillCreateABlobContainerForDemandedFoldersIfTheyDoNotExist" time="0.0187659" result="Pass" />
    </collection>
    <collection total="18" passed="18" failed="0" skipped="0" name="Test collection for NuGetGallery.Infrastructure.PackageIndexEntityFacts" time="0.004">
      <test name="NuGetGallery.Infrastructure.PackageIndexEntityFacts.IdSplitter(term: &quot;.&quot;, tokens: &quot;&quot;)" type="NuGetGallery.Infrastructure.PackageIndexEntityFacts" method="IdSplitter" time="0.0002321" result="Pass" />
      <test name="NuGetGallery.Infrastructure.PackageIndexEntityFacts.IdSplitter(term: &quot;JQuery.UI.Combined&quot;, tokens: &quot;JQuery UI Combined&quot;)" type="NuGetGallery.Infrastructure.PackageIndexEntityFacts" method="IdSplitter" time="0.0000248" result="Pass" />
      <test name="NuGetGallery.Infrastructure.PackageIndexEntityFacts.IdSplitter(term: &quot;JQuery-UI&quot;, tokens: &quot;JQuery UI&quot;)" type="NuGetGallery.Infrastructure.PackageIndexEntityFacts" method="IdSplitter" time="0.0000086" result="Pass" />
      <test name="NuGetGallery.Infrastructure.PackageIndexEntityFacts.IdSplitter(term: &quot;&quot;, tokens: &quot;&quot;)" type="NuGetGallery.Infrastructure.PackageIndexEntityFacts" method="IdSplitter" time="0.0000074" result="Pass" />
      <test name="NuGetGallery.Infrastructure.PackageIndexEntityFacts.IdSplitter(term: &quot;JQuery&quot;, tokens: &quot;JQuery&quot;)" type="NuGetGallery.Infrastructure.PackageIndexEntityFacts" method="IdSplitter" time="0.0000074" result="Pass" />
      <test name="NuGetGallery.Infrastructure.PackageIndexEntityFacts.CamelCaseTokenizer(term: &quot;NuGetPowerTools&quot;, tokens: [&quot;NuGetPowerTools&quot;, &quot;NuGet&quot;, &quot;Power&quot;, &quot;Tools&quot;])" type="NuGetGallery.Infrastructure.PackageIndexEntityFacts" method="CamelCaseTokenizer" time="0.0037472" result="Pass" />
      <test name="NuGetGallery.Infrastructure.PackageIndexEntityFacts.CamelCaseTokenizer(term: &quot;Sys-netFX&quot;, tokens: [&quot;Sys-netFX&quot;, &quot;Sys&quot;, &quot;netFX&quot;])" type="NuGetGallery.Infrastructure.PackageIndexEntityFacts" method="CamelCaseTokenizer" time="0.0000378" result="Pass" />
      <test name="NuGetGallery.Infrastructure.PackageIndexEntityFacts.CamelCaseTokenizer(term: &quot;EntityFramework.sample&quot;, tokens: [&quot;EntityFramework.sample&quot;, &quot;EntityFramework&quot;, &quot;sample&quot;, &quot;Framework&quot;, &quot;Entity&quot;])" type="NuGetGallery.Infrastructure.PackageIndexEntityFacts" method="CamelCaseTokenizer" time="0.0000362" result="Pass" />
      <test name="NuGetGallery.Infrastructure.PackageIndexEntityFacts.CamelCaseTokenizer(term: &quot;NHibernate&quot;, tokens: [&quot;NHibernate&quot;])" type="NuGetGallery.Infrastructure.PackageIndexEntityFacts" method="CamelCaseTokenizer" time="0.0000232" result="Pass" />
      <test name="NuGetGallery.Infrastructure.PackageIndexEntityFacts.CamelCaseTokenizer(term: &quot;SignalR.MicroSliver&quot;, tokens: [&quot;SignalR.MicroSliver&quot;, &quot;SignalR&quot;, &quot;MicroSliver&quot;, &quot;Micro&quot;, &quot;Sliver&quot;])" type="NuGetGallery.Infrastructure.PackageIndexEntityFacts" method="CamelCaseTokenizer" time="0.0000425" result="Pass" />
      <test name="NuGetGallery.Infrastructure.PackageIndexEntityFacts.CamelCaseTokenizer(term: &quot;SignalR.Hosting.AspNet&quot;, tokens: [&quot;SignalR.Hosting.AspNet&quot;, &quot;SignalR&quot;, &quot;Hosting&quot;, &quot;AspNet&quot;, &quot;Asp&quot;, ...])" type="NuGetGallery.Infrastructure.PackageIndexEntityFacts" method="CamelCaseTokenizer" time="0.0000398" result="Pass" />
      <test name="NuGetGallery.Infrastructure.PackageIndexEntityFacts.CamelCaseTokenizer(term: &quot;ABCMicroFramework&quot;, tokens: [&quot;ABCMicroFramework&quot;, &quot;ABC&quot;, &quot;Micro&quot;, &quot;Framework&quot;])" type="NuGetGallery.Infrastructure.PackageIndexEntityFacts" method="CamelCaseTokenizer" time="0.0000307" result="Pass" />
      <test name="NuGetGallery.Infrastructure.PackageIndexEntityFacts.CamelCaseTokenizer(term: &quot;microsoft-web-helpers&quot;, tokens: [&quot;microsoft-web-helpers&quot;, &quot;microsoft&quot;, &quot;web&quot;, &quot;helpers&quot;])" type="NuGetGallery.Infrastructure.PackageIndexEntityFacts" method="CamelCaseTokenizer" time="0.0000315" result="Pass" />
      <test name="NuGetGallery.Infrastructure.PackageIndexEntityFacts.CamelCaseTokenizer(term: &quot;jQuery-UI&quot;, tokens: [&quot;jQuery-UI&quot;, &quot;jQuery&quot;, &quot;UI&quot;])" type="NuGetGallery.Infrastructure.PackageIndexEntityFacts" method="CamelCaseTokenizer" time="0.0000267" result="Pass" />
      <test name="NuGetGallery.Infrastructure.PackageIndexEntityFacts.CamelCaseTokenizer(term: &quot;xUnit&quot;, tokens: [&quot;xUnit&quot;])" type="NuGetGallery.Infrastructure.PackageIndexEntityFacts" method="CamelCaseTokenizer" time="0.0000208" result="Pass" />
      <test name="NuGetGallery.Infrastructure.PackageIndexEntityFacts.CamelCaseTokenizer(term: &quot;NUnit&quot;, tokens: [&quot;NUnit&quot;])" type="NuGetGallery.Infrastructure.PackageIndexEntityFacts" method="CamelCaseTokenizer" time="0.0000208" result="Pass" />
      <test name="NuGetGallery.Infrastructure.PackageIndexEntityFacts.CamelCaseTokenizer(term: &quot;jQueryUI&quot;, tokens: [&quot;jQueryUI&quot;])" type="NuGetGallery.Infrastructure.PackageIndexEntityFacts" method="CamelCaseTokenizer" time="0.0000216" result="Pass" />
      <test name="NuGetGallery.Infrastructure.PackageIndexEntityFacts.CamelCaseTokenizer(term: &quot;EntityFramework&quot;, tokens: [&quot;EntityFramework&quot;, &quot;Framework&quot;, &quot;Entity&quot;])" type="NuGetGallery.Infrastructure.PackageIndexEntityFacts" method="CamelCaseTokenizer" time="0.0000275" result="Pass" />
    </collection>
    <collection total="3" passed="3" failed="0" skipped="0" name="Test collection for NuGetGallery.Authentication.AuthenticationServiceFacts+TheChallengeMethod" time="0.386">
      <test name="NuGetGallery.Authentication.AuthenticationServiceFacts+TheChallengeMethod.GivenAnUnknownProviderName_ItThrowsInvalidOperationException" type="NuGetGallery.Authentication.AuthenticationServiceFacts+TheChallengeMethod" method="GivenAnUnknownProviderName_ItThrowsInvalidOperationException" time="0.0611684" result="Pass" />
      <test name="NuGetGallery.Authentication.AuthenticationServiceFacts+TheChallengeMethod.GivenADisabledProviderName_ItThrowsInvalidOperationException" type="NuGetGallery.Authentication.AuthenticationServiceFacts+TheChallengeMethod" method="GivenADisabledProviderName_ItThrowsInvalidOperationException" time="0.1837282" result="Pass" />
      <test name="NuGetGallery.Authentication.AuthenticationServiceFacts+TheChallengeMethod.GivenAnKnownProviderName_ItPassesThroughToProvider" type="NuGetGallery.Authentication.AuthenticationServiceFacts+TheChallengeMethod" method="GivenAnKnownProviderName_ItPassesThroughToProvider" time="0.1406474" result="Pass" />
    </collection>
    <collection total="14" passed="14" failed="0" skipped="0" name="Test collection for NuGetGallery.PackagesControllerFacts+TheVerifyPackageActionForPostRequests" time="1.085">
      <test name="NuGetGallery.PackagesControllerFacts+TheVerifyPackageActionForPostRequests.WillNotMarkThePackageUnlistedWhenListedArgumentIsNullorTrue(listed: True)" type="NuGetGallery.PackagesControllerFacts+TheVerifyPackageActionForPostRequests" method="WillNotMarkThePackageUnlistedWhenListedArgumentIsNullorTrue" time="0.1629879" result="Pass" />
      <test name="NuGetGallery.PackagesControllerFacts+TheVerifyPackageActionForPostRequests.WillNotMarkThePackageUnlistedWhenListedArgumentIsNullorTrue(listed: null)" type="NuGetGallery.PackagesControllerFacts+TheVerifyPackageActionForPostRequests" method="WillNotMarkThePackageUnlistedWhenListedArgumentIsNullorTrue" time="0.0616465" result="Pass" />
      <test name="NuGetGallery.PackagesControllerFacts+TheVerifyPackageActionForPostRequests.WillDeleteTheUploadFile" type="NuGetGallery.PackagesControllerFacts+TheVerifyPackageActionForPostRequests" method="WillDeleteTheUploadFile" time="0.0566759" result="Pass" />
      <test name="NuGetGallery.PackagesControllerFacts+TheVerifyPackageActionForPostRequests.WillSaveChangesToEntitiesContext" type="NuGetGallery.PackagesControllerFacts+TheVerifyPackageActionForPostRequests" method="WillSaveChangesToEntitiesContext" time="0.0388964" result="Pass" />
      <test name="NuGetGallery.PackagesControllerFacts+TheVerifyPackageActionForPostRequests.WillUpdateIndexingService" type="NuGetGallery.PackagesControllerFacts+TheVerifyPackageActionForPostRequests" method="WillUpdateIndexingService" time="0.0548743" result="Pass" />
      <test name="NuGetGallery.PackagesControllerFacts+TheVerifyPackageActionForPostRequests.WillCreateThePackage" type="NuGetGallery.PackagesControllerFacts+TheVerifyPackageActionForPostRequests" method="WillCreateThePackage" time="0.0388084" result="Pass" />
      <test name="NuGetGallery.PackagesControllerFacts+TheVerifyPackageActionForPostRequests.WillCurateThePackage" type="NuGetGallery.PackagesControllerFacts+TheVerifyPackageActionForPostRequests" method="WillCurateThePackage" time="0.0716704" result="Pass" />
      <test name="NuGetGallery.PackagesControllerFacts+TheVerifyPackageActionForPostRequests.WillPublishThePackage" type="NuGetGallery.PackagesControllerFacts+TheVerifyPackageActionForPostRequests" method="WillPublishThePackage" time="0.1027004" result="Pass" />
      <test name="NuGetGallery.PackagesControllerFacts+TheVerifyPackageActionForPostRequests.WillSetAFlashMessage" type="NuGetGallery.PackagesControllerFacts+TheVerifyPackageActionForPostRequests" method="WillSetAFlashMessage" time="0.0519843" result="Pass" />
      <test name="NuGetGallery.PackagesControllerFacts+TheVerifyPackageActionForPostRequests.WillRedirectToPackagePage" type="NuGetGallery.PackagesControllerFacts+TheVerifyPackageActionForPostRequests" method="WillRedirectToPackagePage" time="0.1308542" result="Pass" />
      <test name="NuGetGallery.PackagesControllerFacts+TheVerifyPackageActionForPostRequests.WillNotCommitChangesToPackageService" type="NuGetGallery.PackagesControllerFacts+TheVerifyPackageActionForPostRequests" method="WillNotCommitChangesToPackageService" time="0.0491816" result="Pass" />
      <test name="NuGetGallery.PackagesControllerFacts+TheVerifyPackageActionForPostRequests.WillMarkThePackageUnlistedWhenListedArgumentIsFalse" type="NuGetGallery.PackagesControllerFacts+TheVerifyPackageActionForPostRequests" method="WillMarkThePackageUnlistedWhenListedArgumentIsFalse" time="0.0637545" result="Pass" />
      <test name="NuGetGallery.PackagesControllerFacts+TheVerifyPackageActionForPostRequests.WillRedirectToUploadPageWhenThereIsNoUploadInProgress" type="NuGetGallery.PackagesControllerFacts+TheVerifyPackageActionForPostRequests" method="WillRedirectToUploadPageWhenThereIsNoUploadInProgress" time="0.0969714" result="Pass" />
      <test name="NuGetGallery.PackagesControllerFacts+TheVerifyPackageActionForPostRequests.WillSavePackageToFileStorage" type="NuGetGallery.PackagesControllerFacts+TheVerifyPackageActionForPostRequests" method="WillSavePackageToFileStorage" time="0.1043603" result="Pass" />
    </collection>
    <collection total="33" passed="33" failed="0" skipped="0" name="Test collection for NuGetGallery.PackageServiceFacts+TheCreatePackageMethod" time="0.516">
      <test name="NuGetGallery.PackageServiceFacts+TheCreatePackageMethod.WillThrowIfTheNuGetPackageLicenseUrlIsLongerThan4000" type="NuGetGallery.PackageServiceFacts+TheCreatePackageMethod" method="WillThrowIfTheNuGetPackageLicenseUrlIsLongerThan4000" time="0.0373644" result="Pass" />
      <test name="NuGetGallery.PackageServiceFacts+TheCreatePackageMethod.DoNotUpdateIndexIfCommitChangesIsFalse" type="NuGetGallery.PackageServiceFacts+TheCreatePackageMethod" method="DoNotUpdateIndexIfCommitChangesIsFalse" time="0.1926453" result="Pass" />
      <test name="NuGetGallery.PackageServiceFacts+TheCreatePackageMethod.WillThrowIfTheNuGetPackageProjectUrlIsLongerThan4000" type="NuGetGallery.PackageServiceFacts+TheCreatePackageMethod" method="WillThrowIfTheNuGetPackageProjectUrlIsLongerThan4000" time="0.0035561" result="Pass" />
      <test name="NuGetGallery.PackageServiceFacts+TheCreatePackageMethod.WillThrowIfTheNuGetPackageCopyrightIsLongerThan4000" type="NuGetGallery.PackageServiceFacts+TheCreatePackageMethod" method="WillThrowIfTheNuGetPackageCopyrightIsLongerThan4000" time="0.0031508" result="Pass" />
      <test name="NuGetGallery.PackageServiceFacts+TheCreatePackageMethod.WillSaveTheCreatedPackageWhenANewPackageRegistrationIsCreated" type="NuGetGallery.PackageServiceFacts+TheCreatePackageMethod" method="WillSaveTheCreatedPackageWhenANewPackageRegistrationIsCreated" time="0.010413" result="Pass" />
      <test name="NuGetGallery.PackageServiceFacts+TheCreatePackageMethod.WillThrowIfTheNuGetPackageTitleIsLongerThan4000" type="NuGetGallery.PackageServiceFacts+TheCreatePackageMethod" method="WillThrowIfTheNuGetPackageTitleIsLongerThan4000" time="0.0051869" result="Pass" />
      <test name="NuGetGallery.PackageServiceFacts+TheCreatePackageMethod.WillReadTheLanguagePropertyFromThePackage" type="NuGetGallery.PackageServiceFacts+TheCreatePackageMethod" method="WillReadTheLanguagePropertyFromThePackage" time="0.00697" result="Pass" />
      <test name="NuGetGallery.PackageServiceFacts+TheCreatePackageMethod.WillMakeTheCurrentUserTheOwnerWhenCreatingANewPackageRegistration" type="NuGetGallery.PackageServiceFacts+TheCreatePackageMethod" method="WillMakeTheCurrentUserTheOwnerWhenCreatingANewPackageRegistration" time="0.0076387" result="Pass" />
      <test name="NuGetGallery.PackageServiceFacts+TheCreatePackageMethod.WillThrowIfThePackageRegistrationAlreadyExistsAndTheCurrentUserIsNotAnOwner" type="NuGetGallery.PackageServiceFacts+TheCreatePackageMethod" method="WillThrowIfThePackageRegistrationAlreadyExistsAndTheCurrentUserIsNotAnOwner" time="0.0123224" result="Pass" />
      <test name="NuGetGallery.PackageServiceFacts+TheCreatePackageMethod.WillThrowIfThPackageDependencyVersionSpecIsLongerThan256" type="NuGetGallery.PackageServiceFacts+TheCreatePackageMethod" method="WillThrowIfThPackageDependencyVersionSpecIsLongerThan256" time="0.0057072" result="Pass" />
      <test name="NuGetGallery.PackageServiceFacts+TheCreatePackageMethod.WillThrowIfTheNuGetPackageIconUrlIsLongerThan4000" type="NuGetGallery.PackageServiceFacts+TheCreatePackageMethod" method="WillThrowIfTheNuGetPackageIconUrlIsLongerThan4000" time="0.0053006" result="Pass" />
      <test name="NuGetGallery.PackageServiceFacts+TheCreatePackageMethod.WillThrowIfTheNuGetPackageTagsIsLongerThan4000" type="NuGetGallery.PackageServiceFacts+TheCreatePackageMethod" method="WillThrowIfTheNuGetPackageTagsIsLongerThan4000" time="0.0046662" result="Pass" />
      <test name="NuGetGallery.PackageServiceFacts+TheCreatePackageMethod.DoNotCommitChangesIfCommitChangesIsFalse" type="NuGetGallery.PackageServiceFacts+TheCreatePackageMethod" method="DoNotCommitChangesIfCommitChangesIsFalse" time="0.0080378" result="Pass" />
      <test name="NuGetGallery.PackageServiceFacts+TheCreatePackageMethod.WillNotCreateThePackageInAnUnpublishedState" type="NuGetGallery.PackageServiceFacts+TheCreatePackageMethod" method="WillNotCreateThePackageInAnUnpublishedState" time="0.0058686" result="Pass" />
      <test name="NuGetGallery.PackageServiceFacts+TheCreatePackageMethod.WillReadPrereleaseFlagFromNuGetPackage" type="NuGetGallery.PackageServiceFacts+TheCreatePackageMethod" method="WillReadPrereleaseFlagFromNuGetPackage" time="0.0085288" result="Pass" />
      <test name="NuGetGallery.PackageServiceFacts+TheCreatePackageMethod.WillThrowIfTheNuGetPackageSummaryIsLongerThan4000" type="NuGetGallery.PackageServiceFacts+TheCreatePackageMethod" method="WillThrowIfTheNuGetPackageSummaryIsLongerThan4000" time="0.0053732" result="Pass" />
      <test name="NuGetGallery.PackageServiceFacts+TheCreatePackageMethod.WillThrowIfTheNuGetPackageDependenciesIsLongerThanInt16MaxValue" type="NuGetGallery.PackageServiceFacts+TheCreatePackageMethod" method="WillThrowIfTheNuGetPackageDependenciesIsLongerThanInt16MaxValue" time="0.0366033" result="Pass" />
      <test name="NuGetGallery.PackageServiceFacts+TheCreatePackageMethod.CommitChangesIfCommitChangesIsTrue" type="NuGetGallery.PackageServiceFacts+TheCreatePackageMethod" method="CommitChangesIfCommitChangesIsTrue" time="0.0076758" result="Pass" />
      <test name="NuGetGallery.PackageServiceFacts+TheCreatePackageMethod.WillThrowIfThPackageDependencyIdIsLongerThan128" type="NuGetGallery.PackageServiceFacts+TheCreatePackageMethod" method="WillThrowIfThPackageDependencyIdIsLongerThan128" time="0.0052047" result="Pass" />
      <test name="NuGetGallery.PackageServiceFacts+TheCreatePackageMethod.WillThrowIfTheNuGetPackageAuthorsIsLongerThan4000" type="NuGetGallery.PackageServiceFacts+TheCreatePackageMethod" method="WillThrowIfTheNuGetPackageAuthorsIsLongerThan4000" time="0.0045498" result="Pass" />
      <test name="NuGetGallery.PackageServiceFacts+TheCreatePackageMethod.WillThrowIfTheNuGetPackageIdIsLongerThan128" type="NuGetGallery.PackageServiceFacts+TheCreatePackageMethod" method="WillThrowIfTheNuGetPackageIdIsLongerThan128" time="0.0277227" result="Pass" />
      <test name="NuGetGallery.PackageServiceFacts+TheCreatePackageMethod.WillSetTheNewPackagesCreatedAndLastUpdatedTimes" type="NuGetGallery.PackageServiceFacts+TheCreatePackageMethod" method="WillSetTheNewPackagesCreatedAndLastUpdatedTimes" time="0.0084207" result="Pass" />
      <test name="NuGetGallery.PackageServiceFacts+TheCreatePackageMethod.WillGenerateAHashForTheCreatedPackage" type="NuGetGallery.PackageServiceFacts+TheCreatePackageMethod" method="WillGenerateAHashForTheCreatedPackage" time="0.0112364" result="Pass" />
      <test name="NuGetGallery.PackageServiceFacts+TheCreatePackageMethod.WillThrowIfTheVersionIsLongerThan64Characters" type="NuGetGallery.PackageServiceFacts+TheCreatePackageMethod" method="WillThrowIfTheVersionIsLongerThan64Characters" time="0.0052892" result="Pass" />
      <test name="NuGetGallery.PackageServiceFacts+TheCreatePackageMethod.WillSaveTheCreatedPackageWhenThePackageRegistrationAlreadyExisted" type="NuGetGallery.PackageServiceFacts+TheCreatePackageMethod" method="WillSaveTheCreatedPackageWhenThePackageRegistrationAlreadyExisted" time="0.0069191" result="Pass" />
      <test name="NuGetGallery.PackageServiceFacts+TheCreatePackageMethod.WillThrowIfTheNuGetPackageLanguageIsLongerThan20" type="NuGetGallery.PackageServiceFacts+TheCreatePackageMethod" method="WillThrowIfTheNuGetPackageLanguageIsLongerThan20" time="0.0052078" result="Pass" />
      <test name="NuGetGallery.PackageServiceFacts+TheCreatePackageMethod.WillSaveSupportedFrameworks" type="NuGetGallery.PackageServiceFacts+TheCreatePackageMethod" method="WillSaveSupportedFrameworks" time="0.0092623" result="Pass" />
      <test name="NuGetGallery.PackageServiceFacts+TheCreatePackageMethod.WillReadThePropertiesFromTheNuGetPackageWhenCreatingANewPackage" type="NuGetGallery.PackageServiceFacts+TheCreatePackageMethod" method="WillReadThePropertiesFromTheNuGetPackageWhenCreatingANewPackage" time="0.0179499" result="Pass" />
      <test name="NuGetGallery.PackageServiceFacts+TheCreatePackageMethod.WillCreateANewPackageRegistrationUsingTheNugetPackIdWhenOneDoesNotAlreadyExist" type="NuGetGallery.PackageServiceFacts+TheCreatePackageMethod" method="WillCreateANewPackageRegistrationUsingTheNugetPackIdWhenOneDoesNotAlreadyExist" time="0.007529" result="Pass" />
      <test name="NuGetGallery.PackageServiceFacts+TheCreatePackageMethod.UpdateIndexIfCommitChangesIsTrue" type="NuGetGallery.PackageServiceFacts+TheCreatePackageMethod" method="UpdateIndexIfCommitChangesIsTrue" time="0.0156544" result="Pass" />
      <test name="NuGetGallery.PackageServiceFacts+TheCreatePackageMethod.WillThrowIfTheNuGetPackageDescriptionIsLongerThan4000" type="NuGetGallery.PackageServiceFacts+TheCreatePackageMethod" method="WillThrowIfTheNuGetPackageDescriptionIsLongerThan4000" time="0.008834" result="Pass" />
      <test name="NuGetGallery.PackageServiceFacts+TheCreatePackageMethod.WillNotSaveAnySuuportedFrameworksWhenThereIsANullTargetFramework" type="NuGetGallery.PackageServiceFacts+TheCreatePackageMethod" method="WillNotSaveAnySuuportedFrameworksWhenThereIsANullTargetFramework" time="0.0071531" result="Pass" />
      <test name="NuGetGallery.PackageServiceFacts+TheCreatePackageMethod.WillSaveThePackageFileAndSetThePackageFileSize" type="NuGetGallery.PackageServiceFacts+TheCreatePackageMethod" method="WillSaveThePackageFileAndSetThePackageFileSize" time="0.0080907" result="Pass" />
    </collection>
    <collection total="6" passed="6" failed="0" skipped="0" name="Test collection for NuGetGallery.RewriteBaseUrlMessageInspectorFacts+TheRewriteUrlPathMethod" time="0.001">
      <test name="NuGetGallery.RewriteBaseUrlMessageInspectorFacts+TheRewriteUrlPathMethod.CorrectlyRewritesURLsToCuratedFeeds(start: &quot;/api/v2/curated-feed/Packages/jQuery/abc/123&quot;, rewritten: &quot;/api/v2/curated-feeds/foo/Packages/jQuery/abc/123&quot;, curatedFeedName: &quot;foo&quot;)" type="NuGetGallery.RewriteBaseUrlMessageInspectorFacts+TheRewriteUrlPathMethod" method="CorrectlyRewritesURLsToCuratedFeeds" time="0.0008068" result="Pass" />
      <test name="NuGetGallery.RewriteBaseUrlMessageInspectorFacts+TheRewriteUrlPathMethod.CorrectlyRewritesURLsToCuratedFeeds(start: &quot;/api/v2/curated-feed/Packages/&quot;, rewritten: &quot;/api/v2/curated-feeds/foo/Packages/&quot;, curatedFeedName: &quot;foo&quot;)" type="NuGetGallery.RewriteBaseUrlMessageInspectorFacts+TheRewriteUrlPathMethod" method="CorrectlyRewritesURLsToCuratedFeeds" time="0.0000327" result="Pass" />
      <test name="NuGetGallery.RewriteBaseUrlMessageInspectorFacts+TheRewriteUrlPathMethod.CorrectlyRewritesURLsToCuratedFeeds(start: &quot;/api/v2/curated-feed&quot;, rewritten: &quot;/api/v2/curated-feeds/foo&quot;, curatedFeedName: &quot;foo&quot;)" type="NuGetGallery.RewriteBaseUrlMessageInspectorFacts+TheRewriteUrlPathMethod" method="CorrectlyRewritesURLsToCuratedFeeds" time="0.0000125" result="Pass" />
      <test name="NuGetGallery.RewriteBaseUrlMessageInspectorFacts+TheRewriteUrlPathMethod.CorrectlyRewritesURLsToCuratedFeeds(start: &quot;/api/v2/curated-feed/Packages/jQuery/abc/123/&quot;, rewritten: &quot;/api/v2/curated-feeds/foo/Packages/jQuery/abc/123/&quot;, curatedFeedName: &quot;foo&quot;)" type="NuGetGallery.RewriteBaseUrlMessageInspectorFacts+TheRewriteUrlPathMethod" method="CorrectlyRewritesURLsToCuratedFeeds" time="0.0000125" result="Pass" />
      <test name="NuGetGallery.RewriteBaseUrlMessageInspectorFacts+TheRewriteUrlPathMethod.CorrectlyRewritesURLsToCuratedFeeds(start: &quot;/api/v2/curated-feed/&quot;, rewritten: &quot;/api/v2/curated-feeds/foo/&quot;, curatedFeedName: &quot;foo&quot;)" type="NuGetGallery.RewriteBaseUrlMessageInspectorFacts+TheRewriteUrlPathMethod" method="CorrectlyRewritesURLsToCuratedFeeds" time="0.0000117" result="Pass" />
      <test name="NuGetGallery.RewriteBaseUrlMessageInspectorFacts+TheRewriteUrlPathMethod.CorrectlyRewritesURLsToCuratedFeeds(start: &quot;/api/v2/curated-feed/Packages&quot;, rewritten: &quot;/api/v2/curated-feeds/foo/Packages&quot;, curatedFeedName: &quot;foo&quot;)" type="NuGetGallery.RewriteBaseUrlMessageInspectorFacts+TheRewriteUrlPathMethod" method="CorrectlyRewritesURLsToCuratedFeeds" time="0.0000117" result="Pass" />
    </collection>
    <collection total="1" passed="1" failed="0" skipped="0" name="Test collection for NuGetGallery.Authentication.AuthenticatorFacts+TheGetAllAvailableMethod" time="0.001">
      <test name="NuGetGallery.Authentication.AuthenticatorFacts+TheGetAllAvailableMethod.IgnoresAbstractAndNonAuthenticatorTypes" type="NuGetGallery.Authentication.AuthenticatorFacts+TheGetAllAvailableMethod" method="IgnoresAbstractAndNonAuthenticatorTypes" time="0.0006398" result="Pass" />
    </collection>
    <collection total="4" passed="4" failed="0" skipped="0" name="Test collection for NuGetGallery.ViewModels.PreviousNextPagerViewModelFacts" time="0.003">
      <test name="NuGetGallery.ViewModels.PreviousNextPagerViewModelFacts.PagerWithPageSizeEqualToItemsCountDoesNotHavePreviousOrNext" type="NuGetGallery.ViewModels.PreviousNextPagerViewModelFacts" method="PagerWithPageSizeEqualToItemsCountDoesNotHavePreviousOrNext" time="0.0013002" result="Pass" />
      <test name="NuGetGallery.ViewModels.PreviousNextPagerViewModelFacts.LastPageShowsPreviousLinkButNotNextLink" type="NuGetGallery.ViewModels.PreviousNextPagerViewModelFacts" method="LastPageShowsPreviousLinkButNotNextLink" time="0.0005348" result="Pass" />
      <test name="NuGetGallery.ViewModels.PreviousNextPagerViewModelFacts.PagerWithPageSizeGreaterThanItemsDoesNotHavePreviousOrNext" type="NuGetGallery.ViewModels.PreviousNextPagerViewModelFacts" method="PagerWithPageSizeGreaterThanItemsDoesNotHavePreviousOrNext" time="0.0003887" result="Pass" />
      <test name="NuGetGallery.ViewModels.PreviousNextPagerViewModelFacts.PagerAtFirstPageDoesNotHavePreviousPageButDoesHaveNext" type="NuGetGallery.ViewModels.PreviousNextPagerViewModelFacts" method="PagerAtFirstPageDoesNotHavePreviousPageButDoesHaveNext" time="0.0004736" result="Pass" />
    </collection>
    <collection total="2" passed="2" failed="0" skipped="0" name="Test collection for NuGetGallery.StatisticsControllerFacts+TheTotalsAllAction" time="0.570">
      <test name="NuGetGallery.StatisticsControllerFacts+TheTotalsAllAction.UseServerCultureIfLanguageHeadersIsMissing" type="NuGetGallery.StatisticsControllerFacts+TheTotalsAllAction" method="UseServerCultureIfLanguageHeadersIsMissing" time="0.564301" result="Pass" />
      <test name="NuGetGallery.StatisticsControllerFacts+TheTotalsAllAction.UseClientCultureIfLanguageHeadersIsPresent" type="NuGetGallery.StatisticsControllerFacts+TheTotalsAllAction" method="UseClientCultureIfLanguageHeadersIsPresent" time="0.0058466" result="Pass" />
    </collection>
    <collection total="5" passed="5" failed="0" skipped="0" name="Test collection for NuGetGallery.PackageServiceFacts+TheMarkPackageUnlistedMethod" time="0.004">
      <test name="NuGetGallery.PackageServiceFacts+TheMarkPackageUnlistedMethod.OnLatestPackageVersionSetsPreviousToLatestVersion" type="NuGetGallery.PackageServiceFacts+TheMarkPackageUnlistedMethod" method="OnLatestPackageVersionSetsPreviousToLatestVersion" time="0.0015327" result="Pass" />
      <test name="NuGetGallery.PackageServiceFacts+TheMarkPackageUnlistedMethod.SetsListedToFalse" type="NuGetGallery.PackageServiceFacts+TheMarkPackageUnlistedMethod" method="SetsListedToFalse" time="0.0002833" result="Pass" />
      <test name="NuGetGallery.PackageServiceFacts+TheMarkPackageUnlistedMethod.OnOnlyListedPackageSetsNoPackageToLatestVersion" type="NuGetGallery.PackageServiceFacts+TheMarkPackageUnlistedMethod" method="OnOnlyListedPackageSetsNoPackageToLatestVersion" time="0.0005178" result="Pass" />
      <test name="NuGetGallery.PackageServiceFacts+TheMarkPackageUnlistedMethod.CommitIfCommitChangesIfTrue" type="NuGetGallery.PackageServiceFacts+TheMarkPackageUnlistedMethod" method="CommitIfCommitChangesIfTrue" time="0.0008601" result="Pass" />
      <test name="NuGetGallery.PackageServiceFacts+TheMarkPackageUnlistedMethod.DoNotCommitIfCommitChangesIfFalse" type="NuGetGallery.PackageServiceFacts+TheMarkPackageUnlistedMethod" method="DoNotCommitIfCommitChangesIfFalse" time="0.0007614" result="Pass" />
    </collection>
    <collection total="2" passed="2" failed="0" skipped="0" name="Test collection for NuGetGallery.PackagesControllerFacts+TheEditMethod" time="0.120">
      <test name="NuGetGallery.PackagesControllerFacts+TheEditMethod.UpdatesUnlistedIfSelected" type="NuGetGallery.PackagesControllerFacts+TheEditMethod" method="UpdatesUnlistedIfSelected" time="0.0504084" result="Pass" />
      <test name="NuGetGallery.PackagesControllerFacts+TheEditMethod.UpdatesUnlistedIfNotSelected" type="NuGetGallery.PackagesControllerFacts+TheEditMethod" method="UpdatesUnlistedIfNotSelected" time="0.0696674" result="Pass" />
    </collection>
    <collection total="4" passed="4" failed="0" skipped="0" name="Test collection for NuGetGallery.Controllers.JsonApiControllerFacts+TheAddPackageOwnerMethod" time="0.549">
      <test name="NuGetGallery.Controllers.JsonApiControllerFacts+TheAddPackageOwnerMethod.ReturnsFailureWhenRequestedNewOwnerDoesNotExist" type="NuGetGallery.Controllers.JsonApiControllerFacts+TheAddPackageOwnerMethod" method="ReturnsFailureWhenRequestedNewOwnerDoesNotExist" time="0.1673703" result="Pass" />
      <test name="NuGetGallery.Controllers.JsonApiControllerFacts+TheAddPackageOwnerMethod.CreatesPackageOwnerRequestSendsEmailAndReturnsPendingState" type="NuGetGallery.Controllers.JsonApiControllerFacts+TheAddPackageOwnerMethod" method="CreatesPackageOwnerRequestSendsEmailAndReturnsPendingState" time="0.1412076" result="Pass" />
      <test name="NuGetGallery.Controllers.JsonApiControllerFacts+TheAddPackageOwnerMethod.ReturnsFailureWhenPackageNotFound" type="NuGetGallery.Controllers.JsonApiControllerFacts+TheAddPackageOwnerMethod" method="ReturnsFailureWhenPackageNotFound" time="0.1343405" result="Pass" />
      <test name="NuGetGallery.Controllers.JsonApiControllerFacts+TheAddPackageOwnerMethod.DoesNotAllowNonPackageOwnerToAddPackageOwner" type="NuGetGallery.Controllers.JsonApiControllerFacts+TheAddPackageOwnerMethod" method="DoesNotAllowNonPackageOwnerToAddPackageOwner" time="0.106418" result="Pass" />
    </collection>
    <collection total="1" passed="1" failed="0" skipped="0" name="Test collection for NuGetGallery.FeedServiceFacts+TheV1Feed+TheFindPackagesByIdMethod" time="0.036">
      <test name="NuGetGallery.FeedServiceFacts+TheV1Feed+TheFindPackagesByIdMethod.V1FeedFindPackagesByIdReturnsUnlistedPackagesButNotPrereleasePackages" type="NuGetGallery.FeedServiceFacts+TheV1Feed+TheFindPackagesByIdMethod" method="V1FeedFindPackagesByIdReturnsUnlistedPackagesButNotPrereleasePackages" time="0.0355343" result="Pass" />
    </collection>
    <collection total="7" passed="7" failed="0" skipped="0" name="Test collection for NuGetGallery.ViewModels.PackageViewModelFacts" time="0.004">
      <test name="NuGetGallery.ViewModels.PackageViewModelFacts.LicenseReportFieldsKeptWhenLicenseReportDisabled" type="NuGetGallery.ViewModels.PackageViewModelFacts" method="LicenseReportFieldsKeptWhenLicenseReportDisabled" time="0.0012272" result="Pass" />
      <test name="NuGetGallery.ViewModels.PackageViewModelFacts.LicenseNamesKeptWhenLicenseReportEnabled" type="NuGetGallery.ViewModels.PackageViewModelFacts" method="LicenseNamesKeptWhenLicenseReportEnabled" time="0.0001251" result="Pass" />
      <test name="NuGetGallery.ViewModels.PackageViewModelFacts.LicenseNamesAreParsedByCommas" type="NuGetGallery.ViewModels.PackageViewModelFacts" method="LicenseNamesAreParsedByCommas" time="0.001359" result="Pass" />
      <test name="NuGetGallery.ViewModels.PackageViewModelFacts.UsesNormalizedVersionForDisplay" type="NuGetGallery.ViewModels.PackageViewModelFacts" method="UsesNormalizedVersionForDisplay" time="0.0001878" result="Pass" />
      <test name="NuGetGallery.ViewModels.PackageViewModelFacts.LicenseUrlKeptWhenLicenseReportDisabled" type="NuGetGallery.ViewModels.PackageViewModelFacts" method="LicenseUrlKeptWhenLicenseReportDisabled" time="0.0001957" result="Pass" />
      <test name="NuGetGallery.ViewModels.PackageViewModelFacts.UsesNormalizedPackageVersionIfNormalizedVersionMissing" type="NuGetGallery.ViewModels.PackageViewModelFacts" method="UsesNormalizedPackageVersionIfNormalizedVersionMissing" time="0.000725" result="Pass" />
      <test name="NuGetGallery.ViewModels.PackageViewModelFacts.LicenseReportUrlKeptWhenLicenseReportEnabled" type="NuGetGallery.ViewModels.PackageViewModelFacts" method="LicenseReportUrlKeptWhenLicenseReportEnabled" time="0.0001207" result="Pass" />
    </collection>
    <collection total="4" passed="4" failed="0" skipped="0" name="Test collection for NuGetGallery.UploadFileServiceFacts+TheGetUploadFileMethod" time="0.012">
      <test name="NuGetGallery.UploadFileServiceFacts+TheGetUploadFileMethod.WillGetTheUploadFileFromTheUploadsFolder" type="NuGetGallery.UploadFileServiceFacts+TheGetUploadFileMethod" method="WillGetTheUploadFileFromTheUploadsFolder" time="0.0057167" result="Pass" />
      <test name="NuGetGallery.UploadFileServiceFacts+TheGetUploadFileMethod.WillReturnTheUploadFileStream" type="NuGetGallery.UploadFileServiceFacts+TheGetUploadFileMethod" method="WillReturnTheUploadFileStream" time="0.0042675" result="Pass" />
      <test name="NuGetGallery.UploadFileServiceFacts+TheGetUploadFileMethod.WillThrowIfTheUserKeyIsMissing" type="NuGetGallery.UploadFileServiceFacts+TheGetUploadFileMethod" method="WillThrowIfTheUserKeyIsMissing" time="0.0006611" result="Pass" />
      <test name="NuGetGallery.UploadFileServiceFacts+TheGetUploadFileMethod.WillUseTheUserKeyInTheFileName" type="NuGetGallery.UploadFileServiceFacts+TheGetUploadFileMethod" method="WillUseTheUserKeyInTheFileName" time="0.0018098" result="Pass" />
    </collection>
    <collection total="8" passed="8" failed="0" skipped="0" name="Test collection for NuGetGallery.FileSystemFileStorgeServiceFacts+TheCreateDownloadFileActionResultMethod" time="0.032">
      <test name="NuGetGallery.FileSystemFileStorgeServiceFacts+TheCreateDownloadFileActionResultMethod.WillThrowIfFolderNameIsNull(folderName: &quot;&quot;)" type="NuGetGallery.FileSystemFileStorgeServiceFacts+TheCreateDownloadFileActionResultMethod" method="WillThrowIfFolderNameIsNull" time="0.0045024" result="Pass" />
      <test name="NuGetGallery.FileSystemFileStorgeServiceFacts+TheCreateDownloadFileActionResultMethod.WillThrowIfFolderNameIsNull(folderName: null)" type="NuGetGallery.FileSystemFileStorgeServiceFacts+TheCreateDownloadFileActionResultMethod" method="WillThrowIfFolderNameIsNull" time="0.002141" result="Pass" />
      <test name="NuGetGallery.FileSystemFileStorgeServiceFacts+TheCreateDownloadFileActionResultMethod.WillReturnAnHttpNotFoundResultWhenTheFileDoesNotExist" type="NuGetGallery.FileSystemFileStorgeServiceFacts+TheCreateDownloadFileActionResultMethod" method="WillReturnAnHttpNotFoundResultWhenTheFileDoesNotExist" time="0.0028875" result="Pass" />
      <test name="NuGetGallery.FileSystemFileStorgeServiceFacts+TheCreateDownloadFileActionResultMethod.WillThrowIfFileNameIsNull(fileName: null)" type="NuGetGallery.FileSystemFileStorgeServiceFacts+TheCreateDownloadFileActionResultMethod" method="WillThrowIfFileNameIsNull" time="0.0026858" result="Pass" />
      <test name="NuGetGallery.FileSystemFileStorgeServiceFacts+TheCreateDownloadFileActionResultMethod.WillThrowIfFileNameIsNull(fileName: &quot;&quot;)" type="NuGetGallery.FileSystemFileStorgeServiceFacts+TheCreateDownloadFileActionResultMethod" method="WillThrowIfFileNameIsNull" time="0.0036324" result="Pass" />
      <test name="NuGetGallery.FileSystemFileStorgeServiceFacts+TheCreateDownloadFileActionResultMethod.WillReturnAFilePathResultWithTheFilePath" type="NuGetGallery.FileSystemFileStorgeServiceFacts+TheCreateDownloadFileActionResultMethod" method="WillReturnAFilePathResultWithTheFilePath" time="0.0107055" result="Pass" />
      <test name="NuGetGallery.FileSystemFileStorgeServiceFacts+TheCreateDownloadFileActionResultMethod.WillSetTheResultDownloadFilePath" type="NuGetGallery.FileSystemFileStorgeServiceFacts+TheCreateDownloadFileActionResultMethod" method="WillSetTheResultDownloadFilePath" time="0.0027004" result="Pass" />
      <test name="NuGetGallery.FileSystemFileStorgeServiceFacts+TheCreateDownloadFileActionResultMethod.WillSetTheResultContentTypeForThePackagesFolder" type="NuGetGallery.FileSystemFileStorgeServiceFacts+TheCreateDownloadFileActionResultMethod" method="WillSetTheResultContentTypeForThePackagesFolder" time="0.0024892" result="Pass" />
    </collection>
    <collection total="2" passed="2" failed="0" skipped="0" name="Test collection for NuGetGallery.PackagesControllerFacts+TheUploadFileActionForGetRequests" time="0.091">
      <test name="NuGetGallery.PackagesControllerFacts+TheUploadFileActionForGetRequests.WillRedirectToVerifyPackageActionWhenThereIsAlreadyAnUploadInProgress" type="NuGetGallery.PackagesControllerFacts+TheUploadFileActionForGetRequests" method="WillRedirectToVerifyPackageActionWhenThereIsAlreadyAnUploadInProgress" time="0.0362378" result="Pass" />
      <test name="NuGetGallery.PackagesControllerFacts+TheUploadFileActionForGetRequests.WillShowTheViewWhenThereIsNoUploadInProgress" type="NuGetGallery.PackagesControllerFacts+TheUploadFileActionForGetRequests" method="WillShowTheViewWhenThereIsNoUploadInProgress" time="0.0547767" result="Pass" />
    </collection>
    <collection total="3" passed="3" failed="0" skipped="0" name="Test collection for NuGetGallery.PackageServiceFacts+TheAddDownloadStatisticsMethod" time="0.022">
      <test name="NuGetGallery.PackageServiceFacts+TheAddDownloadStatisticsMethod.WillAllowNullsForUserAgentAndUserHostAddress" type="NuGetGallery.PackageServiceFacts+TheAddDownloadStatisticsMethod" method="WillAllowNullsForUserAgentAndUserHostAddress" time="0.006715" result="Pass" />
      <test name="NuGetGallery.PackageServiceFacts+TheAddDownloadStatisticsMethod.WillInsertNewRecordIntoTheStatisticsRepository" type="NuGetGallery.PackageServiceFacts+TheAddDownloadStatisticsMethod" method="WillInsertNewRecordIntoTheStatisticsRepository" time="0.0123085" result="Pass" />
      <test name="NuGetGallery.PackageServiceFacts+TheAddDownloadStatisticsMethod.WillIgnoreTheIpAddressForNow" type="NuGetGallery.PackageServiceFacts+TheAddDownloadStatisticsMethod" method="WillIgnoreTheIpAddressForNow" time="0.0025299" result="Pass" />
    </collection>
    <collection total="4" passed="4" failed="0" skipped="0" name="Test collection for NuGetGallery.Authentication.Providers.ApiKey.ApiKeyAuthenticationHandlerFacts+TheAuthenticateCoreAsyncMethod" time="0.038">
      <test name="NuGetGallery.Authentication.Providers.ApiKey.ApiKeyAuthenticationHandlerFacts+TheAuthenticateCoreAsyncMethod.GivenNoUserMatchingApiKey_ItReturnsNull" type="NuGetGallery.Authentication.Providers.ApiKey.ApiKeyAuthenticationHandlerFacts+TheAuthenticateCoreAsyncMethod" method="GivenNoUserMatchingApiKey_ItReturnsNull" time="0.0224753" result="Pass" />
      <test name="NuGetGallery.Authentication.Providers.ApiKey.ApiKeyAuthenticationHandlerFacts+TheAuthenticateCoreAsyncMethod.GivenMatchingApiKey_ItReturnsTicketWithUserNameAndRoles" type="NuGetGallery.Authentication.Providers.ApiKey.ApiKeyAuthenticationHandlerFacts+TheAuthenticateCoreAsyncMethod" method="GivenMatchingApiKey_ItReturnsTicketWithUserNameAndRoles" time="0.010051" result="Pass" />
      <test name="NuGetGallery.Authentication.Providers.ApiKey.ApiKeyAuthenticationHandlerFacts+TheAuthenticateCoreAsyncMethod.GivenMatchingApiKey_ItSetsUserInOwinEnvironment" type="NuGetGallery.Authentication.Providers.ApiKey.ApiKeyAuthenticationHandlerFacts+TheAuthenticateCoreAsyncMethod" method="GivenMatchingApiKey_ItSetsUserInOwinEnvironment" time="0.0039731" result="Pass" />
      <test name="NuGetGallery.Authentication.Providers.ApiKey.ApiKeyAuthenticationHandlerFacts+TheAuthenticateCoreAsyncMethod.GivenNoApiKeyHeader_ItReturnsNull" type="NuGetGallery.Authentication.Providers.ApiKey.ApiKeyAuthenticationHandlerFacts+TheAuthenticateCoreAsyncMethod" method="GivenNoApiKeyHeader_ItReturnsNull" time="0.0019212" result="Pass" />
    </collection>
    <collection total="8" passed="8" failed="0" skipped="0" name="Test collection for NuGetGallery.PackagesControllerFacts+TheUploadFileActionForPostRequests" time="0.586">
      <test name="NuGetGallery.PackagesControllerFacts+TheUploadFileActionForPostRequests.WillShowViewWithErrorsIfPackageFileIsNull" type="NuGetGallery.PackagesControllerFacts+TheUploadFileActionForPostRequests" method="WillShowViewWithErrorsIfPackageFileIsNull" time="0.1110398" result="Pass" />
      <test name="NuGetGallery.PackagesControllerFacts+TheUploadFileActionForPostRequests.WillRedirectToVerifyPackageActionAfterSaving" type="NuGetGallery.PackagesControllerFacts+TheUploadFileActionForPostRequests" method="WillRedirectToVerifyPackageActionAfterSaving" time="0.1067643" result="Pass" />
      <test name="NuGetGallery.PackagesControllerFacts+TheUploadFileActionForPostRequests.WillReturn409WhenThereIsAlreadyAnUploadInProgress" type="NuGetGallery.PackagesControllerFacts+TheUploadFileActionForPostRequests" method="WillReturn409WhenThereIsAlreadyAnUploadInProgress" time="0.0469631" result="Pass" />
      <test name="NuGetGallery.PackagesControllerFacts+TheUploadFileActionForPostRequests.WillShowViewWithErrorsIfNuGetPackageIsInvalid" type="NuGetGallery.PackagesControllerFacts+TheUploadFileActionForPostRequests" method="WillShowViewWithErrorsIfNuGetPackageIsInvalid" time="0.0567686" result="Pass" />
      <test name="NuGetGallery.PackagesControllerFacts+TheUploadFileActionForPostRequests.WillShowViewWithErrorsIfFileIsNotANuGetPackage" type="NuGetGallery.PackagesControllerFacts+TheUploadFileActionForPostRequests" method="WillShowViewWithErrorsIfFileIsNotANuGetPackage" time="0.0721804" result="Pass" />
      <test name="NuGetGallery.PackagesControllerFacts+TheUploadFileActionForPostRequests.WillShowTheViewWithErrorsWhenThePackageAlreadyExists" type="NuGetGallery.PackagesControllerFacts+TheUploadFileActionForPostRequests" method="WillShowTheViewWithErrorsWhenThePackageAlreadyExists" time="0.0679665" result="Pass" />
      <test name="NuGetGallery.PackagesControllerFacts+TheUploadFileActionForPostRequests.WillShowTheViewWithErrorsWhenThePackageIdIsAlreadyBeingUsed" type="NuGetGallery.PackagesControllerFacts+TheUploadFileActionForPostRequests" method="WillShowTheViewWithErrorsWhenThePackageIdIsAlreadyBeingUsed" time="0.0602006" result="Pass" />
      <test name="NuGetGallery.PackagesControllerFacts+TheUploadFileActionForPostRequests.WillSaveTheUploadFile" type="NuGetGallery.PackagesControllerFacts+TheUploadFileActionForPostRequests" method="WillSaveTheUploadFile" time="0.0637442" result="Pass" />
    </collection>
    <collection total="1" passed="1" failed="0" skipped="0" name="Test collection for NuGetGallery.ViewModels.DependencySetsViewModelFacts+TheConstructor" time="0.011">
      <test name="NuGetGallery.ViewModels.DependencySetsViewModelFacts+TheConstructor.GivenAListOfDependenciesItShouldGroupByTargetFrameworkName" type="NuGetGallery.ViewModels.DependencySetsViewModelFacts+TheConstructor" method="GivenAListOfDependenciesItShouldGroupByTargetFrameworkName" time="0.0112266" result="Pass" />
    </collection>
    <collection total="12" passed="12" failed="0" skipped="0" name="Test collection for NuGetGallery.Diagnostics.GlimpseRuntimePolicyFacts+TheExecuteMethod" time="0.553">
      <test name="NuGetGallery.Diagnostics.GlimpseRuntimePolicyFacts+TheExecuteMethod.DisablesGlimpseIfPathIsKnownToBeStaticContent(path: &quot;public&quot;)" type="NuGetGallery.Diagnostics.GlimpseRuntimePolicyFacts+TheExecuteMethod" method="DisablesGlimpseIfPathIsKnownToBeStaticContent" time="0.1148799" result="Pass" />
      <test name="NuGetGallery.Diagnostics.GlimpseRuntimePolicyFacts+TheExecuteMethod.DisablesGlimpseIfPathIsKnownToBeStaticContent(path: &quot;content&quot;)" type="NuGetGallery.Diagnostics.GlimpseRuntimePolicyFacts+TheExecuteMethod" method="DisablesGlimpseIfPathIsKnownToBeStaticContent" time="0.0118053" result="Pass" />
      <test name="NuGetGallery.Diagnostics.GlimpseRuntimePolicyFacts+TheExecuteMethod.DisablesGlimpseIfPathIsKnownToBeStaticContent(path: &quot;scripts&quot;)" type="NuGetGallery.Diagnostics.GlimpseRuntimePolicyFacts+TheExecuteMethod" method="DisablesGlimpseIfPathIsKnownToBeStaticContent" time="0.0103131" result="Pass" />
      <test name="NuGetGallery.Diagnostics.GlimpseRuntimePolicyFacts+TheExecuteMethod.DisablesGlimpseIfPathIsKnownToBeStaticContent(path: &quot;/scripts&quot;)" type="NuGetGallery.Diagnostics.GlimpseRuntimePolicyFacts+TheExecuteMethod" method="DisablesGlimpseIfPathIsKnownToBeStaticContent" time="0.0774862" result="Pass" />
      <test name="NuGetGallery.Diagnostics.GlimpseRuntimePolicyFacts+TheExecuteMethod.DisablesGlimpseIfPathIsKnownToBeStaticContent(path: &quot;/content&quot;)" type="NuGetGallery.Diagnostics.GlimpseRuntimePolicyFacts+TheExecuteMethod" method="DisablesGlimpseIfPathIsKnownToBeStaticContent" time="0.0533955" result="Pass" />
      <test name="NuGetGallery.Diagnostics.GlimpseRuntimePolicyFacts+TheExecuteMethod.DisablesGlimpseIfPathIsKnownToBeStaticContent(path: &quot;/public&quot;)" type="NuGetGallery.Diagnostics.GlimpseRuntimePolicyFacts+TheExecuteMethod" method="DisablesGlimpseIfPathIsKnownToBeStaticContent" time="0.0218394" result="Pass" />
      <test name="NuGetGallery.Diagnostics.GlimpseRuntimePolicyFacts+TheExecuteMethod.EnablesGlimpseCompletelyOverHTTPIfRequireSSLFalse" type="NuGetGallery.Diagnostics.GlimpseRuntimePolicyFacts+TheExecuteMethod" method="EnablesGlimpseCompletelyOverHTTPIfRequireSSLFalse" time="0.0811116" result="Pass" />
      <test name="NuGetGallery.Diagnostics.GlimpseRuntimePolicyFacts+TheExecuteMethod.EnablesGlimpsePersistenceIfRequestIsLocal" type="NuGetGallery.Diagnostics.GlimpseRuntimePolicyFacts+TheExecuteMethod" method="EnablesGlimpsePersistenceIfRequestIsLocal" time="0.0377011" result="Pass" />
      <test name="NuGetGallery.Diagnostics.GlimpseRuntimePolicyFacts+TheExecuteMethod.DisablesGlimpseIfUserIsNotAdminAndNoCookie" type="NuGetGallery.Diagnostics.GlimpseRuntimePolicyFacts+TheExecuteMethod" method="DisablesGlimpseIfUserIsNotAdminAndNoCookie" time="0.0520561" result="Pass" />
      <test name="NuGetGallery.Diagnostics.GlimpseRuntimePolicyFacts+TheExecuteMethod.DisablesGlimpseIfUserNotLoggedInAndNoCookie" type="NuGetGallery.Diagnostics.GlimpseRuntimePolicyFacts+TheExecuteMethod" method="DisablesGlimpseIfUserNotLoggedInAndNoCookie" time="0.0148673" result="Pass" />
      <test name="NuGetGallery.Diagnostics.GlimpseRuntimePolicyFacts+TheExecuteMethod.DisablesGlimpseIfSSLRequiredAndConnectionIsNotSecureAndNoCookie" type="NuGetGallery.Diagnostics.GlimpseRuntimePolicyFacts+TheExecuteMethod" method="DisablesGlimpseIfSSLRequiredAndConnectionIsNotSecureAndNoCookie" time="0.0195139" result="Pass" />
      <test name="NuGetGallery.Diagnostics.GlimpseRuntimePolicyFacts+TheExecuteMethod.EnablesGlimpseCompletelyIfUserIsAdmin" type="NuGetGallery.Diagnostics.GlimpseRuntimePolicyFacts+TheExecuteMethod" method="EnablesGlimpseCompletelyIfUserIsAdmin" time="0.0579635" result="Pass" />
    </collection>
    <collection total="6" passed="6" failed="0" skipped="0" name="Test collection for NuGetGallery.Controllers.AuthenticationControllerFacts+TheRegisterAction" time="1.170">
      <test name="NuGetGallery.Controllers.AuthenticationControllerFacts+TheRegisterAction.WillCreateAndLogInTheUserWhenNotLinking" type="NuGetGallery.Controllers.AuthenticationControllerFacts+TheRegisterAction" method="WillCreateAndLogInTheUserWhenNotLinking" time="0.1814131" result="Pass" />
      <test name="NuGetGallery.Controllers.AuthenticationControllerFacts+TheRegisterAction.WillNotSendConfirmationEmailWhenConfirmEmailAddressesIsOff" type="NuGetGallery.Controllers.AuthenticationControllerFacts+TheRegisterAction" method="WillNotSendConfirmationEmailWhenConfirmEmailAddressesIsOff" time="0.1324418" result="Pass" />
      <test name="NuGetGallery.Controllers.AuthenticationControllerFacts+TheRegisterAction.GivenExpiredExternalAuth_ItRedirectsBackToLogOnWithExternalAuthExpiredMessage" type="NuGetGallery.Controllers.AuthenticationControllerFacts+TheRegisterAction" method="GivenExpiredExternalAuth_ItRedirectsBackToLogOnWithExternalAuthExpiredMessage" time="0.3969487" result="Pass" />
      <test name="NuGetGallery.Controllers.AuthenticationControllerFacts+TheRegisterAction.GivenValidExternalAuth_ItCreatesAccountAndLinksCredential" type="NuGetGallery.Controllers.AuthenticationControllerFacts+TheRegisterAction" method="GivenValidExternalAuth_ItCreatesAccountAndLinksCredential" time="0.1152754" result="Pass" />
      <test name="NuGetGallery.Controllers.AuthenticationControllerFacts+TheRegisterAction.WillShowTheViewWithErrorsIfTheModelStateIsInvalid" type="NuGetGallery.Controllers.AuthenticationControllerFacts+TheRegisterAction" method="WillShowTheViewWithErrorsIfTheModelStateIsInvalid" time="0.1967566" result="Pass" />
      <test name="NuGetGallery.Controllers.AuthenticationControllerFacts+TheRegisterAction.WillInvalidateModelStateAndShowTheViewWhenAnEntityExceptionIsThrow" type="NuGetGallery.Controllers.AuthenticationControllerFacts+TheRegisterAction" method="WillInvalidateModelStateAndShowTheViewWhenAnEntityExceptionIsThrow" time="0.1473029" result="Pass" />
    </collection>
    <collection total="1" passed="1" failed="0" skipped="0" name="Test collection for NuGetGallery.CuratedFeedsControllerFacts+TheListPackagesAction" time="1.329">
      <test name="NuGetGallery.CuratedFeedsControllerFacts+TheListPackagesAction.WillSearchForAPackage" type="NuGetGallery.CuratedFeedsControllerFacts+TheListPackagesAction" method="WillSearchForAPackage" time="1.3287895" result="Pass" />
    </collection>
    <collection total="1" passed="1" failed="0" skipped="0" name="Test collection for NuGetGallery.MessageServiceFacts+TheSendResetPasswordInstructionsMethod" time="0.003">
      <test name="NuGetGallery.MessageServiceFacts+TheSendResetPasswordInstructionsMethod.WillSendInstructions" type="NuGetGallery.MessageServiceFacts+TheSendResetPasswordInstructionsMethod" method="WillSendInstructions" time="0.002636" result="Pass" />
    </collection>
    <collection total="5" passed="5" failed="0" skipped="0" name="Test collection for NuGetGallery.CuratedPackagesControllerFacts+TheDeleteCuratedPackageAction" time="0.204">
      <test name="NuGetGallery.CuratedPackagesControllerFacts+TheDeleteCuratedPackageAction.WillReturn404IfTheCuratedPackageDoesNotExist" type="NuGetGallery.CuratedPackagesControllerFacts+TheDeleteCuratedPackageAction" method="WillReturn404IfTheCuratedPackageDoesNotExist" time="0.0393899" result="Pass" />
      <test name="NuGetGallery.CuratedPackagesControllerFacts+TheDeleteCuratedPackageAction.WillReturn403IfTheUserNotAManager" type="NuGetGallery.CuratedPackagesControllerFacts+TheDeleteCuratedPackageAction" method="WillReturn403IfTheUserNotAManager" time="0.0416648" result="Pass" />
      <test name="NuGetGallery.CuratedPackagesControllerFacts+TheDeleteCuratedPackageAction.WillReturn404IfTheCuratedFeedDoesNotExist" type="NuGetGallery.CuratedPackagesControllerFacts+TheDeleteCuratedPackageAction" method="WillReturn404IfTheCuratedFeedDoesNotExist" time="0.0295816" result="Pass" />
      <test name="NuGetGallery.CuratedPackagesControllerFacts+TheDeleteCuratedPackageAction.WillReturn204AfterDeletingTheCuratedPackage" type="NuGetGallery.CuratedPackagesControllerFacts+TheDeleteCuratedPackageAction" method="WillReturn204AfterDeletingTheCuratedPackage" time="0.0333526" result="Pass" />
      <test name="NuGetGallery.CuratedPackagesControllerFacts+TheDeleteCuratedPackageAction.WillDeleteTheCuratedPackageWhenRequestIsValid" type="NuGetGallery.CuratedPackagesControllerFacts+TheDeleteCuratedPackageAction" method="WillDeleteTheCuratedPackageWhenRequestIsValid" time="0.0604765" result="Pass" />
    </collection>
    <collection total="1" passed="1" failed="0" skipped="0" name="Test collection for NuGetGallery.MessageServiceFacts+TheSendNewAccountEmailMethod" time="0.030">
      <test name="NuGetGallery.MessageServiceFacts+TheSendNewAccountEmailMethod.WillSendEmailToNewUser" type="NuGetGallery.MessageServiceFacts+TheSendNewAccountEmailMethod" method="WillSendEmailToNewUser" time="0.0299691" result="Pass" />
    </collection>
    <collection total="3" passed="3" failed="0" skipped="0" name="Test collection for NuGetGallery.UsersControllerFacts+TheForgotPasswordAction" time="0.514">
      <test name="NuGetGallery.UsersControllerFacts+TheForgotPasswordAction.SendsEmailWithPasswordResetUrl" type="NuGetGallery.UsersControllerFacts+TheForgotPasswordAction" method="SendsEmailWithPasswordResetUrl" time="0.276828" result="Pass" />
      <test name="NuGetGallery.UsersControllerFacts+TheForgotPasswordAction.ReturnsSameViewIfTokenGenerationFails" type="NuGetGallery.UsersControllerFacts+TheForgotPasswordAction" method="ReturnsSameViewIfTokenGenerationFails" time="0.1246928" result="Pass" />
      <test name="NuGetGallery.UsersControllerFacts+TheForgotPasswordAction.RedirectsAfterGeneratingToken" type="NuGetGallery.UsersControllerFacts+TheForgotPasswordAction" method="RedirectsAfterGeneratingToken" time="0.1123835" result="Pass" />
    </collection>
    <collection total="2" passed="2" failed="0" skipped="0" name="Test collection for NuGetGallery.MessageServiceFacts+TheReportAbuseMethod" time="0.070">
      <test name="NuGetGallery.MessageServiceFacts+TheReportAbuseMethod.WillSendEmailToGalleryOwner" type="NuGetGallery.MessageServiceFacts+TheReportAbuseMethod" method="WillSendEmailToGalleryOwner" time="0.0085931" result="Pass" />
      <test name="NuGetGallery.MessageServiceFacts+TheReportAbuseMethod.WillCopySenderIfAsked" type="NuGetGallery.MessageServiceFacts+TheReportAbuseMethod" method="WillCopySenderIfAsked" time="0.06138" result="Pass" />
    </collection>
    <collection total="25" passed="25" failed="0" skipped="0" name="Test collection for NuGetGallery.SemanticVersionExtensionsFacts+TheToNormalizedStringMethod" time="0.001">
      <test name="NuGetGallery.SemanticVersionExtensionsFacts+TheToNormalizedStringMethod.NormalizesStringOutputForDisplayAndUniqueness(version: 1.0, expected: &quot;1.0.0&quot;)" type="NuGetGallery.SemanticVersionExtensionsFacts+TheToNormalizedStringMethod" method="NormalizesStringOutputForDisplayAndUniqueness" time="0.0003481" result="Pass" />
      <test name="NuGetGallery.SemanticVersionExtensionsFacts+TheToNormalizedStringMethod.NormalizesStringOutputForDisplayAndUniqueness(version: 1.0.0, expected: &quot;1.0.0&quot;)" type="NuGetGallery.SemanticVersionExtensionsFacts+TheToNormalizedStringMethod" method="NormalizesStringOutputForDisplayAndUniqueness" time="0.0000284" result="Pass" />
      <test name="NuGetGallery.SemanticVersionExtensionsFacts+TheToNormalizedStringMethod.NormalizesStringOutputForDisplayAndUniqueness(version: 1.0.0.0, expected: &quot;1.0.0&quot;)" type="NuGetGallery.SemanticVersionExtensionsFacts+TheToNormalizedStringMethod" method="NormalizesStringOutputForDisplayAndUniqueness" time="0.0000086" result="Pass" />
      <test name="NuGetGallery.SemanticVersionExtensionsFacts+TheToNormalizedStringMethod.NormalizesStringOutputForDisplayAndUniqueness(version: 1.2, expected: &quot;1.2.0&quot;)" type="NuGetGallery.SemanticVersionExtensionsFacts+TheToNormalizedStringMethod" method="NormalizesStringOutputForDisplayAndUniqueness" time="0.0000074" result="Pass" />
      <test name="NuGetGallery.SemanticVersionExtensionsFacts+TheToNormalizedStringMethod.NormalizesStringOutputForDisplayAndUniqueness(version: 1.2-alpha, expected: &quot;1.2.0-alpha&quot;)" type="NuGetGallery.SemanticVersionExtensionsFacts+TheToNormalizedStringMethod" method="NormalizesStringOutputForDisplayAndUniqueness" time="0.0000074" result="Pass" />
      <test name="NuGetGallery.SemanticVersionExtensionsFacts+TheToNormalizedStringMethod.NormalizesStringOutputForDisplayAndUniqueness(version: 1.2.0, expected: &quot;1.2.0&quot;)" type="NuGetGallery.SemanticVersionExtensionsFacts+TheToNormalizedStringMethod" method="NormalizesStringOutputForDisplayAndUniqueness" time="0.0000066" result="Pass" />
      <test name="NuGetGallery.SemanticVersionExtensionsFacts+TheToNormalizedStringMethod.NormalizesStringOutputForDisplayAndUniqueness(version: 1.2.3, expected: &quot;1.2.3&quot;)" type="NuGetGallery.SemanticVersionExtensionsFacts+TheToNormalizedStringMethod" method="NormalizesStringOutputForDisplayAndUniqueness" time="0.0000094" result="Pass" />
      <test name="NuGetGallery.SemanticVersionExtensionsFacts+TheToNormalizedStringMethod.NormalizesStringOutputForDisplayAndUniqueness(version: 1.2.3-alpha, expected: &quot;1.2.3-alpha&quot;)" type="NuGetGallery.SemanticVersionExtensionsFacts+TheToNormalizedStringMethod" method="NormalizesStringOutputForDisplayAndUniqueness" time="0.0000082" result="Pass" />
      <test name="NuGetGallery.SemanticVersionExtensionsFacts+TheToNormalizedStringMethod.NormalizesStringOutputForDisplayAndUniqueness(version: 1.2.3.0, expected: &quot;1.2.3&quot;)" type="NuGetGallery.SemanticVersionExtensionsFacts+TheToNormalizedStringMethod" method="NormalizesStringOutputForDisplayAndUniqueness" time="0.000007" result="Pass" />
      <test name="NuGetGallery.SemanticVersionExtensionsFacts+TheToNormalizedStringMethod.NormalizesStringOutputForDisplayAndUniqueness(version: 1.2.3.4, expected: &quot;1.2.3.4&quot;)" type="NuGetGallery.SemanticVersionExtensionsFacts+TheToNormalizedStringMethod" method="NormalizesStringOutputForDisplayAndUniqueness" time="0.0000074" result="Pass" />
      <test name="NuGetGallery.SemanticVersionExtensionsFacts+TheToNormalizedStringMethod.NormalizesStringOutputForDisplayAndUniqueness(version: 1.2.3.4-alpha, expected: &quot;1.2.3.4-alpha&quot;)" type="NuGetGallery.SemanticVersionExtensionsFacts+TheToNormalizedStringMethod" method="NormalizesStringOutputForDisplayAndUniqueness" time="0.000007" result="Pass" />
      <test name="NuGetGallery.SemanticVersionExtensionsFacts+TheToNormalizedStringMethod.NormalizesStringOutputForDisplayAndUniqueness(version: 1.2, expected: &quot;1.2.0&quot;)" type="NuGetGallery.SemanticVersionExtensionsFacts+TheToNormalizedStringMethod" method="NormalizesStringOutputForDisplayAndUniqueness" time="0.0000078" result="Pass" />
      <test name="NuGetGallery.SemanticVersionExtensionsFacts+TheToNormalizedStringMethod.NormalizesStringOutputForDisplayAndUniqueness(version: 1.2.3, expected: &quot;1.2.3&quot;)" type="NuGetGallery.SemanticVersionExtensionsFacts+TheToNormalizedStringMethod" method="NormalizesStringOutputForDisplayAndUniqueness" time="0.000007" result="Pass" />
      <test name="NuGetGallery.SemanticVersionExtensionsFacts+TheToNormalizedStringMethod.NormalizesStringOutputForDisplayAndUniqueness(version: 1.2.3.4, expected: &quot;1.2.3.4&quot;)" type="NuGetGallery.SemanticVersionExtensionsFacts+TheToNormalizedStringMethod" method="NormalizesStringOutputForDisplayAndUniqueness" time="0.000007" result="Pass" />
      <test name="NuGetGallery.SemanticVersionExtensionsFacts+TheToNormalizedStringMethod.NormalizesStringOutputForDisplayAndUniqueness(version: 1.2-alpha, expected: &quot;1.2.0-alpha&quot;)" type="NuGetGallery.SemanticVersionExtensionsFacts+TheToNormalizedStringMethod" method="NormalizesStringOutputForDisplayAndUniqueness" time="0.0000074" result="Pass" />
      <test name="NuGetGallery.SemanticVersionExtensionsFacts+TheToNormalizedStringMethod.NormalizesStringOutputForDisplayAndUniqueness(version: 1.2.3-alpha, expected: &quot;1.2.3-alpha&quot;)" type="NuGetGallery.SemanticVersionExtensionsFacts+TheToNormalizedStringMethod" method="NormalizesStringOutputForDisplayAndUniqueness" time="0.0000066" result="Pass" />
      <test name="NuGetGallery.SemanticVersionExtensionsFacts+TheToNormalizedStringMethod.NormalizesStringOutputForDisplayAndUniqueness(version: 1.2.3.4-alpha, expected: &quot;1.2.3.4-alpha&quot;)" type="NuGetGallery.SemanticVersionExtensionsFacts+TheToNormalizedStringMethod" method="NormalizesStringOutputForDisplayAndUniqueness" time="0.000007" result="Pass" />
      <test name="NuGetGallery.SemanticVersionExtensionsFacts+TheToNormalizedStringMethod.NormalizesStringOutputForDisplayAndUniqueness(version: 1.2.3-alpha, expected: &quot;1.2.3-alpha&quot;)" type="NuGetGallery.SemanticVersionExtensionsFacts+TheToNormalizedStringMethod" method="NormalizesStringOutputForDisplayAndUniqueness" time="0.0000066" result="Pass" />
      <test name="NuGetGallery.SemanticVersionExtensionsFacts+TheToNormalizedStringMethod.NormalizesStringOutputForDisplayAndUniqueness(version: 1.2.3.4, expected: &quot;1.2.3.4&quot;)" type="NuGetGallery.SemanticVersionExtensionsFacts+TheToNormalizedStringMethod" method="NormalizesStringOutputForDisplayAndUniqueness" time="0.0000086" result="Pass" />
      <test name="NuGetGallery.SemanticVersionExtensionsFacts+TheToNormalizedStringMethod.NormalizesStringOutputForDisplayAndUniqueness(version: 010.020.030.040, expected: &quot;10.20.30.40&quot;)" type="NuGetGallery.SemanticVersionExtensionsFacts+TheToNormalizedStringMethod" method="NormalizesStringOutputForDisplayAndUniqueness" time="0.0000074" result="Pass" />
      <test name="NuGetGallery.SemanticVersionExtensionsFacts+TheToNormalizedStringMethod.NormalizesStringOutputForDisplayAndUniqueness(version: 01.02.03.04, expected: &quot;1.2.3.4&quot;)" type="NuGetGallery.SemanticVersionExtensionsFacts+TheToNormalizedStringMethod" method="NormalizesStringOutputForDisplayAndUniqueness" time="0.0000074" result="Pass" />
      <test name="NuGetGallery.SemanticVersionExtensionsFacts+TheToNormalizedStringMethod.NormalizesStringOutputForDisplayAndUniqueness(version: 010.020.030-alpha, expected: &quot;10.20.30-alpha&quot;)" type="NuGetGallery.SemanticVersionExtensionsFacts+TheToNormalizedStringMethod" method="NormalizesStringOutputForDisplayAndUniqueness" time="0.0000074" result="Pass" />
      <test name="NuGetGallery.SemanticVersionExtensionsFacts+TheToNormalizedStringMethod.NormalizesStringOutputForDisplayAndUniqueness(version: 01.02.03-alpha, expected: &quot;1.2.3-alpha&quot;)" type="NuGetGallery.SemanticVersionExtensionsFacts+TheToNormalizedStringMethod" method="NormalizesStringOutputForDisplayAndUniqueness" time="0.0000066" result="Pass" />
      <test name="NuGetGallery.SemanticVersionExtensionsFacts+TheToNormalizedStringMethod.NormalizesStringOutputForDisplayAndUniqueness(version: 010.020-alpha, expected: &quot;10.20.0-alpha&quot;)" type="NuGetGallery.SemanticVersionExtensionsFacts+TheToNormalizedStringMethod" method="NormalizesStringOutputForDisplayAndUniqueness" time="0.0000082" result="Pass" />
      <test name="NuGetGallery.SemanticVersionExtensionsFacts+TheToNormalizedStringMethod.NormalizesStringOutputForDisplayAndUniqueness(version: 01.02.0-alpha, expected: &quot;1.2.0-alpha&quot;)" type="NuGetGallery.SemanticVersionExtensionsFacts+TheToNormalizedStringMethod" method="NormalizesStringOutputForDisplayAndUniqueness" time="0.0000062" result="Pass" />
    </collection>
    <collection total="1" passed="1" failed="0" skipped="0" name="Test collection for NuGetGallery.Entities.PackageFacts+TheDefaultConstructor" time="0.000">
      <test name="NuGetGallery.Entities.PackageFacts+TheDefaultConstructor.WillDefaultListedToTrue" type="NuGetGallery.Entities.PackageFacts+TheDefaultConstructor" method="WillDefaultListedToTrue" time="0.0001993" result="Pass" />
    </collection>
    <collection total="5" passed="5" failed="0" skipped="0" name="Test collection for NuGetGallery.UsersControllerFacts+TheResetPasswordAction" time="1.001">
      <test name="NuGetGallery.UsersControllerFacts+TheResetPasswordAction.ShowsErrorIfTokenExpired(forgot: True)" type="NuGetGallery.UsersControllerFacts+TheResetPasswordAction" method="ShowsErrorIfTokenExpired" time="0.4033866" result="Pass" />
      <test name="NuGetGallery.UsersControllerFacts+TheResetPasswordAction.ShowsErrorIfTokenExpired(forgot: False)" type="NuGetGallery.UsersControllerFacts+TheResetPasswordAction" method="ShowsErrorIfTokenExpired" time="0.1325879" result="Pass" />
      <test name="NuGetGallery.UsersControllerFacts+TheResetPasswordAction.ResetsPasswordForValidToken(forgot: False)" type="NuGetGallery.UsersControllerFacts+TheResetPasswordAction" method="ResetsPasswordForValidToken" time="0.119804" result="Pass" />
      <test name="NuGetGallery.UsersControllerFacts+TheResetPasswordAction.ResetsPasswordForValidToken(forgot: True)" type="NuGetGallery.UsersControllerFacts+TheResetPasswordAction" method="ResetsPasswordForValidToken" time="0.2008596" result="Pass" />
      <test name="NuGetGallery.UsersControllerFacts+TheResetPasswordAction.SendsPasswordAddedMessageWhenForgotFalse" type="NuGetGallery.UsersControllerFacts+TheResetPasswordAction" method="SendsPasswordAddedMessageWhenForgotFalse" time="0.1446387" result="Pass" />
    </collection>
    <collection total="6" passed="6" failed="0" skipped="0" name="Test collection for NuGetGallery.PackagesControllerFacts+TheDisplayPackageMethod" time="0.668">
      <test name="NuGetGallery.PackagesControllerFacts+TheDisplayPackageMethod.GivenANonExistantPackageIt404s" type="NuGetGallery.PackagesControllerFacts+TheDisplayPackageMethod" method="GivenANonExistantPackageIt404s" time="0.0598745" result="Pass" />
      <test name="NuGetGallery.PackagesControllerFacts+TheDisplayPackageMethod.GivenANonNormalizedVersionIt302sToTheNormalizedVersion" type="NuGetGallery.PackagesControllerFacts+TheDisplayPackageMethod" method="GivenANonNormalizedVersionIt302sToTheNormalizedVersion" time="0.0588742" result="Pass" />
      <test name="NuGetGallery.PackagesControllerFacts+TheDisplayPackageMethod.GivenAValidPackageThatTheCurrentUserDoesNotOwnItDisplaysCurrentMetadata" type="NuGetGallery.PackagesControllerFacts+TheDisplayPackageMethod" method="GivenAValidPackageThatTheCurrentUserDoesNotOwnItDisplaysCurrentMetadata" time="0.1063514" result="Pass" />
      <test name="NuGetGallery.PackagesControllerFacts+TheDisplayPackageMethod.GivenAValidPackageThatTheCurrentUserOwnsWithNoEditsItDisplaysCurrentMetadata" type="NuGetGallery.PackagesControllerFacts+TheDisplayPackageMethod" method="GivenAValidPackageThatTheCurrentUserOwnsWithNoEditsItDisplaysCurrentMetadata" time="0.1374335" result="Pass" />
      <test name="NuGetGallery.PackagesControllerFacts+TheDisplayPackageMethod.GivenAValidPackageThatTheCurrentUserOwnsWithEditsItDisplaysEditedMetadata" type="NuGetGallery.PackagesControllerFacts+TheDisplayPackageMethod" method="GivenAValidPackageThatTheCurrentUserOwnsWithEditsItDisplaysEditedMetadata" time="0.0556183" result="Pass" />
      <test name="NuGetGallery.PackagesControllerFacts+TheDisplayPackageMethod.GivenAValidPackageThatTheCurrentUserOwnsItDisablesResponseCaching" type="NuGetGallery.PackagesControllerFacts+TheDisplayPackageMethod" method="GivenAValidPackageThatTheCurrentUserOwnsItDisablesResponseCaching" time="0.2493702" result="Pass" />
    </collection>
    <collection total="2" passed="2" failed="0" skipped="0" name="Test collection for NuGetGallery.Infrastructure.CookieTempDataProviderFacts+TheSaveTempDataMethod" time="0.061">
      <test name="NuGetGallery.Infrastructure.CookieTempDataProviderFacts+TheSaveTempDataMethod.WithNoValuesDoesNotAddCookie" type="NuGetGallery.Infrastructure.CookieTempDataProviderFacts+TheSaveTempDataMethod" method="WithNoValuesDoesNotAddCookie" time="0.0167013" result="Pass" />
      <test name="NuGetGallery.Infrastructure.CookieTempDataProviderFacts+TheSaveTempDataMethod.StoresValuesInCookie" type="NuGetGallery.Infrastructure.CookieTempDataProviderFacts+TheSaveTempDataMethod" method="StoresValuesInCookie" time="0.0439081" result="Pass" />
    </collection>
    <collection total="1" passed="1" failed="0" skipped="0" name="Test collection for NuGetGallery.PackagesControllerFacts+TheSetLicenseReportVisibilityMethod" time="0.163">
      <test name="NuGetGallery.PackagesControllerFacts+TheSetLicenseReportVisibilityMethod.IndexingAndPackageServicesAreUpdated" type="NuGetGallery.PackagesControllerFacts+TheSetLicenseReportVisibilityMethod" method="IndexingAndPackageServicesAreUpdated" time="0.1626073" result="Pass" />
    </collection>
    <collection total="7" passed="7" failed="0" skipped="0" name="Test collection for NuGetGallery.UserServiceFacts+TheChangeEmailMethod" time="0.021">
      <test name="NuGetGallery.UserServiceFacts+TheChangeEmailMethod.DoesNotModifyConfirmationTokenWhenUnconfirmedEmailAddressNotChanged(confirmedEmailAddress: null)" type="NuGetGallery.UserServiceFacts+TheChangeEmailMethod" method="DoesNotModifyConfirmationTokenWhenUnconfirmedEmailAddressNotChanged" time="0.0056499" result="Pass" />
      <test name="NuGetGallery.UserServiceFacts+TheChangeEmailMethod.DoesNotModifyConfirmationTokenWhenUnconfirmedEmailAddressNotChanged(confirmedEmailAddress: &quot;something@else.com&quot;)" type="NuGetGallery.UserServiceFacts+TheChangeEmailMethod" method="DoesNotModifyConfirmationTokenWhenUnconfirmedEmailAddressNotChanged" time="0.0009525" result="Pass" />
      <test name="NuGetGallery.UserServiceFacts+TheChangeEmailMethod.DoesNotLetYouUseSomeoneElsesConfirmedEmailAddress" type="NuGetGallery.UserServiceFacts+TheChangeEmailMethod" method="DoesNotLetYouUseSomeoneElsesConfirmedEmailAddress" time="0.0033273" result="Pass" />
      <test name="NuGetGallery.UserServiceFacts+TheChangeEmailMethod.ModifiesConfirmationTokenWhenEmailAddressChanged" type="NuGetGallery.UserServiceFacts+TheChangeEmailMethod" method="ModifiesConfirmationTokenWhenEmailAddressChanged" time="0.0032372" result="Pass" />
      <test name="NuGetGallery.UserServiceFacts+TheChangeEmailMethod.WritesAuditRecord" type="NuGetGallery.UserServiceFacts+TheChangeEmailMethod" method="WritesAuditRecord" time="0.0027786" result="Pass" />
      <test name="NuGetGallery.UserServiceFacts+TheChangeEmailMethod.SetsUnconfirmedEmailWhenEmailIsChanged" type="NuGetGallery.UserServiceFacts+TheChangeEmailMethod" method="SetsUnconfirmedEmailWhenEmailIsChanged" time="0.0025535" result="Pass" />
      <test name="NuGetGallery.UserServiceFacts+TheChangeEmailMethod.DoesNotModifyAnythingWhenConfirmedEmailAddressNotChanged" type="NuGetGallery.UserServiceFacts+TheChangeEmailMethod" method="DoesNotModifyAnythingWhenConfirmedEmailAddressNotChanged" time="0.0025934" result="Pass" />
    </collection>
    <collection total="5" passed="5" failed="0" skipped="0" name="Test collection for NuGetGallery.PackageServiceFacts+TheConfirmPackageOwnerMethod" time="0.016">
      <test name="NuGetGallery.PackageServiceFacts+TheConfirmPackageOwnerMethod.WhenUserIsAlreadyOwnerReturnsAlreadyOwner" type="NuGetGallery.PackageServiceFacts+TheConfirmPackageOwnerMethod" method="WhenUserIsAlreadyOwnerReturnsAlreadyOwner" time="0.0040634" result="Pass" />
      <test name="NuGetGallery.PackageServiceFacts+TheConfirmPackageOwnerMethod.ThrowsArgumentNullExceptionsForBadArguments" type="NuGetGallery.PackageServiceFacts+TheConfirmPackageOwnerMethod" method="ThrowsArgumentNullExceptionsForBadArguments" time="0.0018508" result="Pass" />
      <test name="NuGetGallery.PackageServiceFacts+TheConfirmPackageOwnerMethod.WithValidUserAndMatchingTokenReturnsSuccess" type="NuGetGallery.PackageServiceFacts+TheConfirmPackageOwnerMethod" method="WithValidUserAndMatchingTokenReturnsSuccess" time="0.004519" result="Pass" />
      <test name="NuGetGallery.PackageServiceFacts+TheConfirmPackageOwnerMethod.WithValidUserAndNonMatchingTokenReturnsFailure" type="NuGetGallery.PackageServiceFacts+TheConfirmPackageOwnerMethod" method="WithValidUserAndNonMatchingTokenReturnsFailure" time="0.0031488" result="Pass" />
      <test name="NuGetGallery.PackageServiceFacts+TheConfirmPackageOwnerMethod.WithNoMatchingPackgageOwnerRequestReturnsFailure" type="NuGetGallery.PackageServiceFacts+TheConfirmPackageOwnerMethod" method="WithNoMatchingPackgageOwnerRequestReturnsFailure" time="0.0024245" result="Pass" />
    </collection>
    <collection total="8" passed="8" failed="0" skipped="0" name="Test collection for NuGetGallery.Controllers.AuthenticationControllerFacts+TheSignInAction" time="1.499">
      <test name="NuGetGallery.Controllers.AuthenticationControllerFacts+TheSignInAction.WillLogTheUserOnWithUsernameEvenWithoutConfirmedEmailAddress" type="NuGetGallery.Controllers.AuthenticationControllerFacts+TheSignInAction" method="WillLogTheUserOnWithUsernameEvenWithoutConfirmedEmailAddress" time="0.1293592" result="Pass" />
      <test name="NuGetGallery.Controllers.AuthenticationControllerFacts+TheSignInAction.WillInvalidateModelStateAndShowTheViewWithErrorsWhenTheUsernameAndPasswordAreNotValid" type="NuGetGallery.Controllers.AuthenticationControllerFacts+TheSignInAction" method="WillInvalidateModelStateAndShowTheViewWithErrorsWhenTheUsernameAndPasswordAreNotValid" time="0.2467608" result="Pass" />
      <test name="NuGetGallery.Controllers.AuthenticationControllerFacts+TheSignInAction.GivenUserAlreadyAuthenticated_ItRedirectsToReturnUrl" type="NuGetGallery.Controllers.AuthenticationControllerFacts+TheSignInAction" method="GivenUserAlreadyAuthenticated_ItRedirectsToReturnUrl" time="0.26062" result="Pass" />
      <test name="NuGetGallery.Controllers.AuthenticationControllerFacts+TheSignInAction.GivenValidExternalAuth_ItLinksCredentialSendsEmailAndLogsIn" type="NuGetGallery.Controllers.AuthenticationControllerFacts+TheSignInAction" method="GivenValidExternalAuth_ItLinksCredentialSendsEmailAndLogsIn" time="0.3366671" result="Pass" />
      <test name="NuGetGallery.Controllers.AuthenticationControllerFacts+TheSignInAction.GivenExpiredExternalAuth_ItRedirectsBackToLogOnWithExternalAuthExpiredMessage" type="NuGetGallery.Controllers.AuthenticationControllerFacts+TheSignInAction" method="GivenExpiredExternalAuth_ItRedirectsBackToLogOnWithExternalAuthExpiredMessage" time="0.1188771" result="Pass" />
      <test name="NuGetGallery.Controllers.AuthenticationControllerFacts+TheSignInAction.WillShowTheViewWithErrorsIfTheModelStateIsInvalid" type="NuGetGallery.Controllers.AuthenticationControllerFacts+TheSignInAction" method="WillShowTheViewWithErrorsIfTheModelStateIsInvalid" time="0.1524532" result="Pass" />
      <test name="NuGetGallery.Controllers.AuthenticationControllerFacts+TheSignInAction.CanLogTheUserOnWithUserName" type="NuGetGallery.Controllers.AuthenticationControllerFacts+TheSignInAction" method="CanLogTheUserOnWithUserName" time="0.1106971" result="Pass" />
      <test name="NuGetGallery.Controllers.AuthenticationControllerFacts+TheSignInAction.CanLogTheUserOnWithEmailAddress" type="NuGetGallery.Controllers.AuthenticationControllerFacts+TheSignInAction" method="CanLogTheUserOnWithEmailAddress" time="0.1431138" result="Pass" />
    </collection>
    <collection total="6" passed="6" failed="0" skipped="0" name="Test collection for NuGetGallery.FileSystemFileStorgeServiceFacts+TheDeleteFileMethod" time="0.015">
      <test name="NuGetGallery.FileSystemFileStorgeServiceFacts+TheDeleteFileMethod.WillDeleteTheFileIfItExists" type="NuGetGallery.FileSystemFileStorgeServiceFacts+TheDeleteFileMethod" method="WillDeleteTheFileIfItExists" time="0.0046678" result="Pass" />
      <test name="NuGetGallery.FileSystemFileStorgeServiceFacts+TheDeleteFileMethod.WillNotDeleteTheFileIfItDoesNotExist" type="NuGetGallery.FileSystemFileStorgeServiceFacts+TheDeleteFileMethod" method="WillNotDeleteTheFileIfItDoesNotExist" time="0.003221" result="Pass" />
      <test name="NuGetGallery.FileSystemFileStorgeServiceFacts+TheDeleteFileMethod.WillThrowIfFileNameIsNull(fileName: &quot;&quot;)" type="NuGetGallery.FileSystemFileStorgeServiceFacts+TheDeleteFileMethod" method="WillThrowIfFileNameIsNull" time="0.0028247" result="Pass" />
      <test name="NuGetGallery.FileSystemFileStorgeServiceFacts+TheDeleteFileMethod.WillThrowIfFileNameIsNull(fileName: null)" type="NuGetGallery.FileSystemFileStorgeServiceFacts+TheDeleteFileMethod" method="WillThrowIfFileNameIsNull" time="0.0007566" result="Pass" />
      <test name="NuGetGallery.FileSystemFileStorgeServiceFacts+TheDeleteFileMethod.WillThrowIfFolderNameIsNull(folderName: null)" type="NuGetGallery.FileSystemFileStorgeServiceFacts+TheDeleteFileMethod" method="WillThrowIfFolderNameIsNull" time="0.0024493" result="Pass" />
      <test name="NuGetGallery.FileSystemFileStorgeServiceFacts+TheDeleteFileMethod.WillThrowIfFolderNameIsNull(folderName: &quot;&quot;)" type="NuGetGallery.FileSystemFileStorgeServiceFacts+TheDeleteFileMethod" method="WillThrowIfFolderNameIsNull" time="0.0007495" result="Pass" />
    </collection>
    <collection total="1" passed="1" failed="0" skipped="0" name="Test collection for NuGetGallery.Diagnostics.DiagnosticsServiceFacts+TheGetSourceMethod" time="0.002">
      <test name="NuGetGallery.Diagnostics.DiagnosticsServiceFacts+TheGetSourceMethod.RequiresNonNullOrEmptyName" type="NuGetGallery.Diagnostics.DiagnosticsServiceFacts+TheGetSourceMethod" method="RequiresNonNullOrEmptyName" time="0.0024675" result="Pass" />
    </collection>
    <collection total="7" passed="7" failed="0" skipped="0" name="Test collection for NuGetGallery.CuratedPackagesControllerFacts+ThePostCuratedPackagesAction" time="0.307">
      <test name="NuGetGallery.CuratedPackagesControllerFacts+ThePostCuratedPackagesAction.WillCreateTheCuratedPackage" type="NuGetGallery.CuratedPackagesControllerFacts+ThePostCuratedPackagesAction" method="WillCreateTheCuratedPackage" time="0.0666713" result="Pass" />
      <test name="NuGetGallery.CuratedPackagesControllerFacts+ThePostCuratedPackagesAction.WillPushTheCuratedFeedNameIntoTheViewBagAndShowTheCreateCuratedPackageFormWithErrorsWhenModelStateIsInvalid" type="NuGetGallery.CuratedPackagesControllerFacts+ThePostCuratedPackagesAction" method="WillPushTheCuratedFeedNameIntoTheViewBagAndShowTheCreateCuratedPackageFormWithErrorsWhenModelStateIsInvalid" time="0.0375125" result="Pass" />
      <test name="NuGetGallery.CuratedPackagesControllerFacts+ThePostCuratedPackagesAction.WillRedirectToTheCuratedFeedRouteAfterCreatingTheCuratedPackage" type="NuGetGallery.CuratedPackagesControllerFacts+ThePostCuratedPackagesAction" method="WillRedirectToTheCuratedFeedRouteAfterCreatingTheCuratedPackage" time="0.0417931" result="Pass" />
      <test name="NuGetGallery.CuratedPackagesControllerFacts+ThePostCuratedPackagesAction.WillReturn403IfTheCurrentUsersIsNotAManagerOfTheCuratedFeed" type="NuGetGallery.CuratedPackagesControllerFacts+ThePostCuratedPackagesAction" method="WillReturn403IfTheCurrentUsersIsNotAManagerOfTheCuratedFeed" time="0.032693" result="Pass" />
      <test name="NuGetGallery.CuratedPackagesControllerFacts+ThePostCuratedPackagesAction.WillPushTheCuratedFeedNameIntoTheViewBagAndShowTheCreateCuratedPackageFormWithErrorsWhenThePackageIdDoesNotExist" type="NuGetGallery.CuratedPackagesControllerFacts+ThePostCuratedPackagesAction" method="WillPushTheCuratedFeedNameIntoTheViewBagAndShowTheCreateCuratedPackageFormWithErrorsWhenThePackageIdDoesNotExist" time="0.0545359" result="Pass" />
      <test name="NuGetGallery.CuratedPackagesControllerFacts+ThePostCuratedPackagesAction.WillShowAnErrorWhenThePackageHasAlreadyBeenCurated" type="NuGetGallery.CuratedPackagesControllerFacts+ThePostCuratedPackagesAction" method="WillShowAnErrorWhenThePackageHasAlreadyBeenCurated" time="0.0424038" result="Pass" />
      <test name="NuGetGallery.CuratedPackagesControllerFacts+ThePostCuratedPackagesAction.WillReturn404IfTheCuratedFeedDoesNotExist" type="NuGetGallery.CuratedPackagesControllerFacts+ThePostCuratedPackagesAction" method="WillReturn404IfTheCuratedFeedDoesNotExist" time="0.0318443" result="Pass" />
    </collection>
    <collection total="3" passed="3" failed="0" skipped="0" name="Test collection for NuGetGallery.Authentication.AuthenticatorFacts+TheStartupMethod" time="0.241">
      <test name="NuGetGallery.Authentication.AuthenticatorFacts+TheStartupMethod.LoadsConfigFromConfigurationService" type="NuGetGallery.Authentication.AuthenticatorFacts+TheStartupMethod" method="LoadsConfigFromConfigurationService" time="0.118545" result="Pass" />
      <test name="NuGetGallery.Authentication.AuthenticatorFacts+TheStartupMethod.AttachesToOwinAppIfEnabled" type="NuGetGallery.Authentication.AuthenticatorFacts+TheStartupMethod" method="AttachesToOwinAppIfEnabled" time="0.0717528" result="Pass" />
      <test name="NuGetGallery.Authentication.AuthenticatorFacts+TheStartupMethod.DoesNotAttachToOwinAppIfDisabled" type="NuGetGallery.Authentication.AuthenticatorFacts+TheStartupMethod" method="DoesNotAttachToOwinAppIfDisabled" time="0.0510183" result="Pass" />
    </collection>
    <collection total="5" passed="5" failed="0" skipped="0" name="Test collection for NuGetGallery.ApiControllerFacts+TheCreatePackageAction" time="0.293">
      <test name="NuGetGallery.ApiControllerFacts+TheCreatePackageAction.WillCreateAPackageWithTheUserMatchingTheApiKey" type="NuGetGallery.ApiControllerFacts+TheCreatePackageAction" method="WillCreateAPackageWithTheUserMatchingTheApiKey" time="0.0879261" result="Pass" />
      <test name="NuGetGallery.ApiControllerFacts+TheCreatePackageAction.WillCreateAPackageFromTheNuGetPackage" type="NuGetGallery.ApiControllerFacts+TheCreatePackageAction" method="WillCreateAPackageFromTheNuGetPackage" time="0.0484623" result="Pass" />
      <test name="NuGetGallery.ApiControllerFacts+TheCreatePackageAction.WillReturnConflictIfAPackageWithTheIdAndSameNormalizedVersionAlreadyExists" type="NuGetGallery.ApiControllerFacts+TheCreatePackageAction" method="WillReturnConflictIfAPackageWithTheIdAndSameNormalizedVersionAlreadyExists" time="0.0446613" result="Pass" />
      <test name="NuGetGallery.ApiControllerFacts+TheCreatePackageAction.CreatePackageWillSavePackageFileToFileStorage" type="NuGetGallery.ApiControllerFacts+TheCreatePackageAction" method="CreatePackageWillSavePackageFileToFileStorage" time="0.0571421" result="Pass" />
      <test name="NuGetGallery.ApiControllerFacts+TheCreatePackageAction.WillCurateThePackage" type="NuGetGallery.ApiControllerFacts+TheCreatePackageAction" method="WillCurateThePackage" time="0.0547752" result="Pass" />
    </collection>
    <collection total="6" passed="6" failed="0" skipped="0" name="Test collection for NuGetGallery.Controllers.AuthenticationControllerFacts+TheLinkExternalAccountAction" time="0.691">
      <test name="NuGetGallery.Controllers.AuthenticationControllerFacts+TheLinkExternalAccountAction.GivenNoLinkButEmailMatchingLocalUser_ItDisplaysLogOnViewPresetForSignIn" type="NuGetGallery.Controllers.AuthenticationControllerFacts+TheLinkExternalAccountAction" method="GivenNoLinkButEmailMatchingLocalUser_ItDisplaysLogOnViewPresetForSignIn" time="0.138787" result="Pass" />
      <test name="NuGetGallery.Controllers.AuthenticationControllerFacts+TheLinkExternalAccountAction.GivenNoLinkAndNoClaimData_ItDisplaysLogOnViewWithNoPrefilledData" type="NuGetGallery.Controllers.AuthenticationControllerFacts+TheLinkExternalAccountAction" method="GivenNoLinkAndNoClaimData_ItDisplaysLogOnViewWithNoPrefilledData" time="0.1417085" result="Pass" />
      <test name="NuGetGallery.Controllers.AuthenticationControllerFacts+TheLinkExternalAccountAction.GivenNoLinkAndEmailClaim_ItDisplaysLogOnViewWithEmailPrefilled" type="NuGetGallery.Controllers.AuthenticationControllerFacts+TheLinkExternalAccountAction" method="GivenNoLinkAndEmailClaim_ItDisplaysLogOnViewWithEmailPrefilled" time="0.1308319" result="Pass" />
      <test name="NuGetGallery.Controllers.AuthenticationControllerFacts+TheLinkExternalAccountAction.GivenNoLinkAndNameClaim_ItDisplaysLogOnViewWithExternalAccountName" type="NuGetGallery.Controllers.AuthenticationControllerFacts+TheLinkExternalAccountAction" method="GivenNoLinkAndNameClaim_ItDisplaysLogOnViewWithExternalAccountName" time="0.1112332" result="Pass" />
      <test name="NuGetGallery.Controllers.AuthenticationControllerFacts+TheLinkExternalAccountAction.GivenAssociatedLocalUser_ItCreatesASessionAndSafeRedirectsToReturnUrl" type="NuGetGallery.Controllers.AuthenticationControllerFacts+TheLinkExternalAccountAction" method="GivenAssociatedLocalUser_ItCreatesASessionAndSafeRedirectsToReturnUrl" time="0.0989656" result="Pass" />
      <test name="NuGetGallery.Controllers.AuthenticationControllerFacts+TheLinkExternalAccountAction.GivenExpiredExternalAuth_ItRedirectsBackToLogOnWithExternalAuthExpiredMessage" type="NuGetGallery.Controllers.AuthenticationControllerFacts+TheLinkExternalAccountAction" method="GivenExpiredExternalAuth_ItRedirectsBackToLogOnWithExternalAuthExpiredMessage" time="0.0698984" result="Pass" />
    </collection>
    <collection total="5" passed="5" failed="0" skipped="0" name="Test collection for NuGetGallery.Authentication.AuthenticationServiceFacts+TheResetPasswordWithTokenMethod" time="0.812">
      <test name="NuGetGallery.Authentication.AuthenticationServiceFacts+TheResetPasswordWithTokenMethod.ResetsPasswordMigratesPasswordHash" type="NuGetGallery.Authentication.AuthenticationServiceFacts+TheResetPasswordWithTokenMethod" method="ResetsPasswordMigratesPasswordHash" time="0.2009551" result="Pass" />
      <test name="NuGetGallery.Authentication.AuthenticationServiceFacts+TheResetPasswordWithTokenMethod.ThrowsExceptionIfUserNotConfirmed" type="NuGetGallery.Authentication.AuthenticationServiceFacts+TheResetPasswordWithTokenMethod" method="ThrowsExceptionIfUserNotConfirmed" time="0.0756805" result="Pass" />
      <test name="NuGetGallery.Authentication.AuthenticationServiceFacts+TheResetPasswordWithTokenMethod.WritesAuditRecordWhenReplacingPasswordCredential" type="NuGetGallery.Authentication.AuthenticationServiceFacts+TheResetPasswordWithTokenMethod" method="WritesAuditRecordWhenReplacingPasswordCredential" time="0.197899" result="Pass" />
      <test name="NuGetGallery.Authentication.AuthenticationServiceFacts+TheResetPasswordWithTokenMethod.ReturnsNullIfUserNotFound" type="NuGetGallery.Authentication.AuthenticationServiceFacts+TheResetPasswordWithTokenMethod" method="ReturnsNullIfUserNotFound" time="0.1360924" result="Pass" />
      <test name="NuGetGallery.Authentication.AuthenticationServiceFacts+TheResetPasswordWithTokenMethod.ResetsPasswordCredential" type="NuGetGallery.Authentication.AuthenticationServiceFacts+TheResetPasswordWithTokenMethod" method="ResetsPasswordCredential" time="0.2013352" result="Pass" />
    </collection>
    <collection total="4" passed="4" failed="0" skipped="0" name="Test collection for NuGetGallery.PackagesControllerFacts+TheReportAbuseMethod" time="4.538">
      <test name="NuGetGallery.PackagesControllerFacts+TheReportAbuseMethod.HtmlEncodesMessageContent" type="NuGetGallery.PackagesControllerFacts+TheReportAbuseMethod" method="HtmlEncodesMessageContent" time="4.3833204" result="Pass" />
      <test name="NuGetGallery.PackagesControllerFacts+TheReportAbuseMethod.FormRedirectsPackageOwnerToReportMyPackage" type="NuGetGallery.PackagesControllerFacts+TheReportAbuseMethod" method="FormRedirectsPackageOwnerToReportMyPackage" time="0.0599704" result="Pass" />
      <test name="NuGetGallery.PackagesControllerFacts+TheReportAbuseMethod.SendsMessageToGalleryOwnerWithEmailOnlyWhenUnauthenticated" type="NuGetGallery.PackagesControllerFacts+TheReportAbuseMethod" method="SendsMessageToGalleryOwnerWithEmailOnlyWhenUnauthenticated" time="0.0430042" result="Pass" />
      <test name="NuGetGallery.PackagesControllerFacts+TheReportAbuseMethod.SendsMessageToGalleryOwnerWithUserInfoWhenAuthenticated" type="NuGetGallery.PackagesControllerFacts+TheReportAbuseMethod" method="SendsMessageToGalleryOwnerWithUserInfoWhenAuthenticated" time="0.052128" result="Pass" />
    </collection>
    <collection total="2" passed="2" failed="0" skipped="0" name="Test collection for NuGetGallery.PackageServiceFacts+TheCreatePackageOwnerRequestMethod" time="0.010">
      <test name="NuGetGallery.PackageServiceFacts+TheCreatePackageOwnerRequestMethod.CreatesPackageOwnerRequest" type="NuGetGallery.PackageServiceFacts+TheCreatePackageOwnerRequestMethod" method="CreatesPackageOwnerRequest" time="0.0071725" result="Pass" />
      <test name="NuGetGallery.PackageServiceFacts+TheCreatePackageOwnerRequestMethod.ReturnsExistingMatchingPackageOwnerRequest" type="NuGetGallery.PackageServiceFacts+TheCreatePackageOwnerRequestMethod" method="ReturnsExistingMatchingPackageOwnerRequest" time="0.0027186" result="Pass" />
    </collection>
    <collection total="5" passed="5" failed="0" skipped="0" name="Test collection for NuGetGallery.Routing.VersionRouteConstraintFacts+TheMatchMethod" time="0.225">
      <test name="NuGetGallery.Routing.VersionRouteConstraintFacts+TheMatchMethod.ReturnsTrueIfVersionIsOptionalParameter" type="NuGetGallery.Routing.VersionRouteConstraintFacts+TheMatchMethod" method="ReturnsTrueIfVersionIsOptionalParameter" time="0.2237609" result="Pass" />
      <test name="NuGetGallery.Routing.VersionRouteConstraintFacts+TheMatchMethod.ReturnsTrueIfVersionIsNull" type="NuGetGallery.Routing.VersionRouteConstraintFacts+TheMatchMethod" method="ReturnsTrueIfVersionIsNull" time="0.0002557" result="Pass" />
      <test name="NuGetGallery.Routing.VersionRouteConstraintFacts+TheMatchMethod.ReturnsTrueIfVersionIsSemantic" type="NuGetGallery.Routing.VersionRouteConstraintFacts+TheMatchMethod" method="ReturnsTrueIfVersionIsSemantic" time="0.000862" result="Pass" />
      <test name="NuGetGallery.Routing.VersionRouteConstraintFacts+TheMatchMethod.ReturnsTrueIfVersionIsEmptyString" type="NuGetGallery.Routing.VersionRouteConstraintFacts+TheMatchMethod" method="ReturnsTrueIfVersionIsEmptyString" time="0.0002372" result="Pass" />
      <test name="NuGetGallery.Routing.VersionRouteConstraintFacts+TheMatchMethod.ReturnsTrueIfVersionParameterIsNotInValues" type="NuGetGallery.Routing.VersionRouteConstraintFacts+TheMatchMethod" method="ReturnsTrueIfVersionParameterIsNotInValues" time="0.0002826" result="Pass" />
    </collection>
    <collection total="9" passed="9" failed="0" skipped="0" name="Test collection for NuGetGallery.Authentication.AuthenticationServiceFacts+TheRegisterMethod" time="1.488">
      <test name="NuGetGallery.Authentication.AuthenticationServiceFacts+TheRegisterMethod.WritesAnAuditRecord" type="NuGetGallery.Authentication.AuthenticationServiceFacts+TheRegisterMethod" method="WritesAnAuditRecord" time="0.1988168" result="Pass" />
      <test name="NuGetGallery.Authentication.AuthenticationServiceFacts+TheRegisterMethod.WillThrowIfTheEmailAddressIsAlreadyInUse" type="NuGetGallery.Authentication.AuthenticationServiceFacts+TheRegisterMethod" method="WillThrowIfTheEmailAddressIsAlreadyInUse" time="0.0749515" result="Pass" />
      <test name="NuGetGallery.Authentication.AuthenticationServiceFacts+TheRegisterMethod.WillThrowIfTheUsernameIsAlreadyInUse" type="NuGetGallery.Authentication.AuthenticationServiceFacts+TheRegisterMethod" method="WillThrowIfTheUsernameIsAlreadyInUse" time="0.098972" result="Pass" />
      <test name="NuGetGallery.Authentication.AuthenticationServiceFacts+TheRegisterMethod.WillSaveTheNewUser" type="NuGetGallery.Authentication.AuthenticationServiceFacts+TheRegisterMethod" method="WillSaveTheNewUser" time="0.1173952" result="Pass" />
      <test name="NuGetGallery.Authentication.AuthenticationServiceFacts+TheRegisterMethod.GivenPlainTextPassword_ItSaltsHashesAndPassesThru" type="NuGetGallery.Authentication.AuthenticationServiceFacts+TheRegisterMethod" method="GivenPlainTextPassword_ItSaltsHashesAndPassesThru" time="0.1923401" result="Pass" />
      <test name="NuGetGallery.Authentication.AuthenticationServiceFacts+TheRegisterMethod.SetsAnApiKey" type="NuGetGallery.Authentication.AuthenticationServiceFacts+TheRegisterMethod" method="SetsAnApiKey" time="0.2232912" result="Pass" />
      <test name="NuGetGallery.Authentication.AuthenticationServiceFacts+TheRegisterMethod.SetsCreatedDate" type="NuGetGallery.Authentication.AuthenticationServiceFacts+TheRegisterMethod" method="SetsCreatedDate" time="0.3411613" result="Pass" />
      <test name="NuGetGallery.Authentication.AuthenticationServiceFacts+TheRegisterMethod.SetsAConfirmationToken" type="NuGetGallery.Authentication.AuthenticationServiceFacts+TheRegisterMethod" method="SetsAConfirmationToken" time="0.1193626" result="Pass" />
      <test name="NuGetGallery.Authentication.AuthenticationServiceFacts+TheRegisterMethod.WillSaveTheNewUserAsConfirmedWhenConfigured" type="NuGetGallery.Authentication.AuthenticationServiceFacts+TheRegisterMethod" method="WillSaveTheNewUserAsConfirmedWhenConfigured" time="0.1213766" result="Pass" />
    </collection>
    <collection total="9" passed="9" failed="0" skipped="0" name="Test collection for NuGetGallery.SearchClient.RetryingHttpClientWrapperFacts" time="71.477">
      <test name="NuGetGallery.SearchClient.RetryingHttpClientWrapperFacts.ReturnsSuccessResponseForValidUri" type="NuGetGallery.SearchClient.RetryingHttpClientWrapperFacts" method="ReturnsSuccessResponseForValidUri" time="4.2245381" result="Pass" />
      <test name="NuGetGallery.SearchClient.RetryingHttpClientWrapperFacts.Returns404When404IsExpected" type="NuGetGallery.SearchClient.RetryingHttpClientWrapperFacts" method="Returns404When404IsExpected" time="2.4257776" result="Pass" />
      <test name="NuGetGallery.SearchClient.RetryingHttpClientWrapperFacts.LoadBalancesBetweenValidUrisForGetAsync" type="NuGetGallery.SearchClient.RetryingHttpClientWrapperFacts" method="LoadBalancesBetweenValidUrisForGetAsync" time="21.8749631" result="Pass" />
      <test name="NuGetGallery.SearchClient.RetryingHttpClientWrapperFacts.ReturnsStringForValidUri" type="NuGetGallery.SearchClient.RetryingHttpClientWrapperFacts" method="ReturnsStringForValidUri" time="1.2633455" result="Pass" />
      <test name="NuGetGallery.SearchClient.RetryingHttpClientWrapperFacts.FailsWhenNoValidUriGiven1" type="NuGetGallery.SearchClient.RetryingHttpClientWrapperFacts" method="FailsWhenNoValidUriGiven1" time="3.4421364" result="Pass" />
      <test name="NuGetGallery.SearchClient.RetryingHttpClientWrapperFacts.LoadBalancesBetweenValidUrisForGetStringAsync" type="NuGetGallery.SearchClient.RetryingHttpClientWrapperFacts" method="LoadBalancesBetweenValidUrisForGetStringAsync" time="20.2972433" result="Pass" />
      <test name="NuGetGallery.SearchClient.RetryingHttpClientWrapperFacts.FailsWhenNoValidUriGiven2" type="NuGetGallery.SearchClient.RetryingHttpClientWrapperFacts" method="FailsWhenNoValidUriGiven2" time="3.4562257" result="Pass" />
      <test name="NuGetGallery.SearchClient.RetryingHttpClientWrapperFacts.ReturnsStringForCollectionContainingValidUri" type="NuGetGallery.SearchClient.RetryingHttpClientWrapperFacts" method="ReturnsStringForCollectionContainingValidUri" time="7.2454811" result="Pass" />
      <test name="NuGetGallery.SearchClient.RetryingHttpClientWrapperFacts.ReturnsSuccessResponseForCollectionContainingValidUri" type="NuGetGallery.SearchClient.RetryingHttpClientWrapperFacts" method="ReturnsSuccessResponseForCollectionContainingValidUri" time="7.2475176" result="Pass" />
    </collection>
    <collection total="1" passed="1" failed="0" skipped="0" name="Test collection for NuGetGallery.Authentication.AuthenticatorFacts+TheAuthenticatorOfTCreateConfigObjectOverride" time="0.000">
      <test name="NuGetGallery.Authentication.AuthenticatorFacts+TheAuthenticatorOfTCreateConfigObjectOverride.ReturnsInstanceOfGenericParameter" type="NuGetGallery.Authentication.AuthenticatorFacts+TheAuthenticatorOfTCreateConfigObjectOverride" method="ReturnsInstanceOfGenericParameter" time="0.0003137" result="Pass" />
    </collection>
    <collection total="7" passed="7" failed="0" skipped="0" name="Test collection for NuGetGallery.ApiControllerFacts+TheGetPackageAction" time="1.049">
      <test name="NuGetGallery.ApiControllerFacts+TheGetPackageAction.GetPackageReturns404IfPackageIsNotFound" type="NuGetGallery.ApiControllerFacts+TheGetPackageAction" method="GetPackageReturns404IfPackageIsNotFound" time="0.3879429" result="Pass" />
      <test name="NuGetGallery.ApiControllerFacts+TheGetPackageAction.GetPackageReturns400ForEvilPackageVersion" type="NuGetGallery.ApiControllerFacts+TheGetPackageAction" method="GetPackageReturns400ForEvilPackageVersion" time="0.0637983" result="Pass" />
      <test name="NuGetGallery.ApiControllerFacts+TheGetPackageAction.GetPackageReturns503IfNoVersionIsProvidedAndDatabaseUnavailable" type="NuGetGallery.ApiControllerFacts+TheGetPackageAction" method="GetPackageReturns503IfNoVersionIsProvidedAndDatabaseUnavailable" time="0.4246636" result="Pass" />
      <test name="NuGetGallery.ApiControllerFacts+TheGetPackageAction.GetPackageReturnsLatestPackageIfNoVersionIsProvided" type="NuGetGallery.ApiControllerFacts+TheGetPackageAction" method="GetPackageReturnsLatestPackageIfNoVersionIsProvided" time="0.050742" result="Pass" />
      <test name="NuGetGallery.ApiControllerFacts+TheGetPackageAction.GetPackageReturnsSpecificPackageEvenIfDatabaseIsOffline" type="NuGetGallery.ApiControllerFacts+TheGetPackageAction" method="GetPackageReturnsSpecificPackageEvenIfDatabaseIsOffline" time="0.0410154" result="Pass" />
      <test name="NuGetGallery.ApiControllerFacts+TheGetPackageAction.GetPackageReturnsPackageIfItExists" type="NuGetGallery.ApiControllerFacts+TheGetPackageAction" method="GetPackageReturnsPackageIfItExists" time="0.0494745" result="Pass" />
      <test name="NuGetGallery.ApiControllerFacts+TheGetPackageAction.GetPackageReturns400ForEvilPackageName" type="NuGetGallery.ApiControllerFacts+TheGetPackageAction" method="GetPackageReturns400ForEvilPackageName" time="0.0310548" result="Pass" />
    </collection>
    <collection total="2" passed="2" failed="0" skipped="0" name="Test collection for NuGetGallery.PackagesControllerFacts+TheReportMyPackageMethod" time="0.170">
      <test name="NuGetGallery.PackagesControllerFacts+TheReportMyPackageMethod.HtmlEncodesMessageContent" type="NuGetGallery.PackagesControllerFacts+TheReportMyPackageMethod" method="HtmlEncodesMessageContent" time="0.0680039" result="Pass" />
      <test name="NuGetGallery.PackagesControllerFacts+TheReportMyPackageMethod.FormRedirectsNonOwnersToReportAbuse" type="NuGetGallery.PackagesControllerFacts+TheReportMyPackageMethod" method="FormRedirectsNonOwnersToReportAbuse" time="0.1015378" result="Pass" />
    </collection>
    <collection total="6" passed="6" failed="0" skipped="0" name="Test collection for NuGetGallery.Authentication.ForceSslWhenAuthenticatedMiddlewareFacts" time="0.163">
      <test name="NuGetGallery.Authentication.ForceSslWhenAuthenticatedMiddlewareFacts.GivenANonStandardSslPort_ItSpecifiesPortInUrl" type="NuGetGallery.Authentication.ForceSslWhenAuthenticatedMiddlewareFacts" method="GivenANonStandardSslPort_ItSpecifiesPortInUrl" time="0.0710123" result="Pass" />
      <test name="NuGetGallery.Authentication.ForceSslWhenAuthenticatedMiddlewareFacts.GivenAForceSslCookieAndSslRequest_ItPassesThrough" type="NuGetGallery.Authentication.ForceSslWhenAuthenticatedMiddlewareFacts" method="GivenAForceSslCookieAndSslRequest_ItPassesThrough" time="0.0040354" result="Pass" />
      <test name="NuGetGallery.Authentication.ForceSslWhenAuthenticatedMiddlewareFacts.GivenNextMiddlewareGrantsAuth_ItDropsForceSslCookie" type="NuGetGallery.Authentication.ForceSslWhenAuthenticatedMiddlewareFacts" method="GivenNextMiddlewareGrantsAuth_ItDropsForceSslCookie" time="0.0367627" result="Pass" />
      <test name="NuGetGallery.Authentication.ForceSslWhenAuthenticatedMiddlewareFacts.GivenNoForceSslCookieAndNonSslRequest_ItPassesThrough" type="NuGetGallery.Authentication.ForceSslWhenAuthenticatedMiddlewareFacts" method="GivenNoForceSslCookieAndNonSslRequest_ItPassesThrough" time="0.0346663" result="Pass" />
      <test name="NuGetGallery.Authentication.ForceSslWhenAuthenticatedMiddlewareFacts.GivenNextMiddlewareRevokesAuth_ItRemovesForceSslCookie" type="NuGetGallery.Authentication.ForceSslWhenAuthenticatedMiddlewareFacts" method="GivenNextMiddlewareRevokesAuth_ItRemovesForceSslCookie" time="0.0131375" result="Pass" />
      <test name="NuGetGallery.Authentication.ForceSslWhenAuthenticatedMiddlewareFacts.GivenAForceSslCookieAndNonSslRequest_ItRedirectsToSSL" type="NuGetGallery.Authentication.ForceSslWhenAuthenticatedMiddlewareFacts" method="GivenAForceSslCookieAndNonSslRequest_ItRedirectsToSSL" time="0.0030726" result="Pass" />
    </collection>
    <collection total="8" passed="8" failed="0" skipped="0" name="Test collection for NuGetGallery.PackageFileServiceFacts+TheCreateDownloadPackageActionResultMethod" time="0.023">
      <test name="NuGetGallery.PackageFileServiceFacts+TheCreateDownloadPackageActionResultMethod.WillThrowIfPackageIsMissingPackageRegistrationId" type="NuGetGallery.PackageFileServiceFacts+TheCreateDownloadPackageActionResultMethod" method="WillThrowIfPackageIsMissingPackageRegistrationId" time="0.001254" result="Pass" />
      <test name="NuGetGallery.PackageFileServiceFacts+TheCreateDownloadPackageActionResultMethod.WillThrowIfPackageIsNull" type="NuGetGallery.PackageFileServiceFacts+TheCreateDownloadPackageActionResultMethod" method="WillThrowIfPackageIsNull" time="0.0007108" result="Pass" />
      <test name="NuGetGallery.PackageFileServiceFacts+TheCreateDownloadPackageActionResultMethod.WillGetAResultFromTheFileStorageServiceUsingThePackagesFolder" type="NuGetGallery.PackageFileServiceFacts+TheCreateDownloadPackageActionResultMethod" method="WillGetAResultFromTheFileStorageServiceUsingThePackagesFolder" time="0.007011" result="Pass" />
      <test name="NuGetGallery.PackageFileServiceFacts+TheCreateDownloadPackageActionResultMethod.WillGetAResultFromTheFileStorageServiceUsingAFileNameWithIdAndNormalizedVersion" type="NuGetGallery.PackageFileServiceFacts+TheCreateDownloadPackageActionResultMethod" method="WillGetAResultFromTheFileStorageServiceUsingAFileNameWithIdAndNormalizedVersion" time="0.0038724" result="Pass" />
      <test name="NuGetGallery.PackageFileServiceFacts+TheCreateDownloadPackageActionResultMethod.WillThrowIfPackageIsMissingPackageRegistration" type="NuGetGallery.PackageFileServiceFacts+TheCreateDownloadPackageActionResultMethod" method="WillThrowIfPackageIsMissingPackageRegistration" time="0.0006895" result="Pass" />
      <test name="NuGetGallery.PackageFileServiceFacts+TheCreateDownloadPackageActionResultMethod.WillThrowIfPackageIsMissingVersion" type="NuGetGallery.PackageFileServiceFacts+TheCreateDownloadPackageActionResultMethod" method="WillThrowIfPackageIsMissingVersion" time="0.0006635" result="Pass" />
      <test name="NuGetGallery.PackageFileServiceFacts+TheCreateDownloadPackageActionResultMethod.WillReturnTheResultFromTheFileStorageService" type="NuGetGallery.PackageFileServiceFacts+TheCreateDownloadPackageActionResultMethod" method="WillReturnTheResultFromTheFileStorageService" time="0.0040236" result="Pass" />
      <test name="NuGetGallery.PackageFileServiceFacts+TheCreateDownloadPackageActionResultMethod.WillUseNormalizedRegularVersionIfNormalizedVersionMissing" type="NuGetGallery.PackageFileServiceFacts+TheCreateDownloadPackageActionResultMethod" method="WillUseNormalizedRegularVersionIfNormalizedVersionMissing" time="0.0047709" result="Pass" />
    </collection>
    <collection total="2" passed="2" failed="0" skipped="0" name="Test collection for NuGetGallery.UserServiceFacts+TheUpdateProfileMethod" time="0.005">
      <test name="NuGetGallery.UserServiceFacts+TheUpdateProfileMethod.SavesEmailAllowedSetting" type="NuGetGallery.UserServiceFacts+TheUpdateProfileMethod" method="SavesEmailAllowedSetting" time="0.00384" result="Pass" />
      <test name="NuGetGallery.UserServiceFacts+TheUpdateProfileMethod.ThrowsArgumentExceptionForNullUser" type="NuGetGallery.UserServiceFacts+TheUpdateProfileMethod" method="ThrowsArgumentExceptionForNullUser" time="0.0012082" result="Pass" />
    </collection>
    <collection total="1" passed="1" failed="0" skipped="0" name="Test collection for NuGetGallery.UsersControllerFacts+TheChangeEmailSubscriptionAction" time="0.225">
      <test name="NuGetGallery.UsersControllerFacts+TheChangeEmailSubscriptionAction.UpdatesEmailAllowedSetting" type="NuGetGallery.UsersControllerFacts+TheChangeEmailSubscriptionAction" method="UpdatesEmailAllowedSetting" time="0.2245463" result="Pass" />
    </collection>
    <collection total="5" passed="5" failed="0" skipped="0" name="Test collection for NuGetGallery.Authentication.AuthenticationServiceFacts+TheReplaceCredentialMethod" time="0.665">
      <test name="NuGetGallery.Authentication.AuthenticationServiceFacts+TheReplaceCredentialMethod.WritesAuditRecordRemovingTheOldCredential" type="NuGetGallery.Authentication.AuthenticationServiceFacts+TheReplaceCredentialMethod" method="WritesAuditRecordRemovingTheOldCredential" time="0.2689299" result="Pass" />
      <test name="NuGetGallery.Authentication.AuthenticationServiceFacts+TheReplaceCredentialMethod.ReplacesExistingCredentialIfOneWithSameTypeExistsForUser" type="NuGetGallery.Authentication.AuthenticationServiceFacts+TheReplaceCredentialMethod" method="ReplacesExistingCredentialIfOneWithSameTypeExistsForUser" time="0.0935682" result="Pass" />
      <test name="NuGetGallery.Authentication.AuthenticationServiceFacts+TheReplaceCredentialMethod.AddsNewCredentialIfNoneWithSameTypeForUser" type="NuGetGallery.Authentication.AuthenticationServiceFacts+TheReplaceCredentialMethod" method="AddsNewCredentialIfNoneWithSameTypeForUser" time="0.1618189" result="Pass" />
      <test name="NuGetGallery.Authentication.AuthenticationServiceFacts+TheReplaceCredentialMethod.WritesAuditRecordAddingTheNewCredential" type="NuGetGallery.Authentication.AuthenticationServiceFacts+TheReplaceCredentialMethod" method="WritesAuditRecordAddingTheNewCredential" time="0.0848561" result="Pass" />
      <test name="NuGetGallery.Authentication.AuthenticationServiceFacts+TheReplaceCredentialMethod.ThrowsExceptionIfNoUserWithProvidedUserName" type="NuGetGallery.Authentication.AuthenticationServiceFacts+TheReplaceCredentialMethod" method="ThrowsExceptionIfNoUserWithProvidedUserName" time="0.0561133" result="Pass" />
    </collection>
    <collection total="2" passed="2" failed="0" skipped="0" name="Test collection for NuGetGallery.UrlExtensionsFacts+TheEnsureTrailingSlashHelperMethod" time="0.000">
      <test name="NuGetGallery.UrlExtensionsFacts+TheEnsureTrailingSlashHelperMethod.PropagatesNull" type="NuGetGallery.UrlExtensionsFacts+TheEnsureTrailingSlashHelperMethod" method="PropagatesNull" time="0.0002272" result="Pass" />
      <test name="NuGetGallery.UrlExtensionsFacts+TheEnsureTrailingSlashHelperMethod.Works" type="NuGetGallery.UrlExtensionsFacts+TheEnsureTrailingSlashHelperMethod" method="Works" time="0.0001692" result="Pass" />
    </collection>
    <collection total="6" passed="6" failed="0" skipped="0" name="Test collection for NuGetGallery.ExtensionMethodsFacts+TheToFriendlyNameMethod" time="0.000">
      <test name="NuGetGallery.ExtensionMethodsFacts+TheToFriendlyNameMethod.CorrectlyConvertsShortNameToFriendlyName(expected: &quot;Portable Class Library (.NETFramework 4.0, Silverl&quot;..., shortName: &quot;portable-net40+sl4+win8+wp71&quot;)" type="NuGetGallery.ExtensionMethodsFacts+TheToFriendlyNameMethod" method="CorrectlyConvertsShortNameToFriendlyName" time="0.000322" result="Pass" />
      <test name="NuGetGallery.ExtensionMethodsFacts+TheToFriendlyNameMethod.CorrectlyConvertsShortNameToFriendlyName(expected: &quot;.NETFramework 4.0&quot;, shortName: &quot;net40&quot;)" type="NuGetGallery.ExtensionMethodsFacts+TheToFriendlyNameMethod" method="CorrectlyConvertsShortNameToFriendlyName" time="0.0000374" result="Pass" />
      <test name="NuGetGallery.ExtensionMethodsFacts+TheToFriendlyNameMethod.CorrectlyConvertsShortNameToFriendlyName(expected: &quot;Windows 8.1&quot;, shortName: &quot;win81&quot;)" type="NuGetGallery.ExtensionMethodsFacts+TheToFriendlyNameMethod" method="CorrectlyConvertsShortNameToFriendlyName" time="0.0000149" result="Pass" />
      <test name="NuGetGallery.ExtensionMethodsFacts+TheToFriendlyNameMethod.CorrectlyConvertsShortNameToFriendlyName(expected: &quot;Portable Class Library (.NETFramework 4.5, Windows&quot;..., shortName: &quot;portable-net45+win8&quot;)" type="NuGetGallery.ExtensionMethodsFacts+TheToFriendlyNameMethod" method="CorrectlyConvertsShortNameToFriendlyName" time="0.0000283" result="Pass" />
      <test name="NuGetGallery.ExtensionMethodsFacts+TheToFriendlyNameMethod.CorrectlyConvertsShortNameToFriendlyName(expected: &quot;Silverlight 4.0&quot;, shortName: &quot;sl40&quot;)" type="NuGetGallery.ExtensionMethodsFacts+TheToFriendlyNameMethod" method="CorrectlyConvertsShortNameToFriendlyName" time="0.0000141" result="Pass" />
      <test name="NuGetGallery.ExtensionMethodsFacts+TheToFriendlyNameMethod.CorrectlyConvertsShortNameToFriendlyName(expected: &quot;WindowsPhone 8.0&quot;, shortName: &quot;wp8&quot;)" type="NuGetGallery.ExtensionMethodsFacts+TheToFriendlyNameMethod" method="CorrectlyConvertsShortNameToFriendlyName" time="0.0000129" result="Pass" />
    </collection>
    <collection total="7" passed="7" failed="0" skipped="0" name="Test collection for NuGetGallery.PackageServiceFacts+TheFindPackageByIdAndVersionMethod" time="0.019">
      <test name="NuGetGallery.PackageServiceFacts+TheFindPackageByIdAndVersionMethod.ReturnsTheLatestStableVersionIfAvailable" type="NuGetGallery.PackageServiceFacts+TheFindPackageByIdAndVersionMethod" method="ReturnsTheLatestStableVersionIfAvailable" time="0.0085111" result="Pass" />
      <test name="NuGetGallery.PackageServiceFacts+TheFindPackageByIdAndVersionMethod.WillThrowIfIdIsNullOrEmpty(id: null)" type="NuGetGallery.PackageServiceFacts+TheFindPackageByIdAndVersionMethod" method="WillThrowIfIdIsNullOrEmpty" time="0.0008593" result="Pass" />
      <test name="NuGetGallery.PackageServiceFacts+TheFindPackageByIdAndVersionMethod.WillThrowIfIdIsNullOrEmpty(id: &quot;&quot;)" type="NuGetGallery.PackageServiceFacts+TheFindPackageByIdAndVersionMethod" method="WillThrowIfIdIsNullOrEmpty" time="0.0002439" result="Pass" />
      <test name="NuGetGallery.PackageServiceFacts+TheFindPackageByIdAndVersionMethod.ReturnsTheRequestedPackageVersion" type="NuGetGallery.PackageServiceFacts+TheFindPackageByIdAndVersionMethod" method="ReturnsTheRequestedPackageVersion" time="0.0025602" result="Pass" />
      <test name="NuGetGallery.PackageServiceFacts+TheFindPackageByIdAndVersionMethod.ReturnsTheMostRecentVersionIfNoLatestVersionIsAvailable" type="NuGetGallery.PackageServiceFacts+TheFindPackageByIdAndVersionMethod" method="ReturnsTheMostRecentVersionIfNoLatestVersionIsAvailable" time="0.0023108" result="Pass" />
      <test name="NuGetGallery.PackageServiceFacts+TheFindPackageByIdAndVersionMethod.ReturnsNullIfNoLatestStableVersionIsAvailableAndPrereleaseIsDisallowed" type="NuGetGallery.PackageServiceFacts+TheFindPackageByIdAndVersionMethod" method="ReturnsNullIfNoLatestStableVersionIsAvailableAndPrereleaseIsDisallowed" time="0.0022125" result="Pass" />
      <test name="NuGetGallery.PackageServiceFacts+TheFindPackageByIdAndVersionMethod.ReturnsTheLatestVersionIfNoLatestStableVersionIsAvailable" type="NuGetGallery.PackageServiceFacts+TheFindPackageByIdAndVersionMethod" method="ReturnsTheLatestVersionIfNoLatestStableVersionIsAvailable" time="0.0020538" result="Pass" />
    </collection>
    <collection total="2" passed="1" failed="1" skipped="0" name="Test collection for NuGetGallery.AppConfigIsCorrectlyApplied" time="0.067">
      <test name="NuGetGallery.AppConfigIsCorrectlyApplied.VerifyBindingRedirectToMvc4IsWorking" type="NuGetGallery.AppConfigIsCorrectlyApplied" method="VerifyBindingRedirectToMvc4IsWorking" time="0.0661245" result="Fail">
        <failure exception-type="Xunit.Sdk.EqualException">
          <message><![CDATA[Assert.Equal() Failure
Expected: 4.0.0.1
Actual:   4.0.0.0]]></message>
          <stack-trace><![CDATA[   at NuGetGallery.AppConfigIsCorrectlyApplied.VerifyBindingRedirectToMvc4IsWorking() in c:\Users\fugatash\Documents\GitHub\NuGetGallery\tests\NuGetGallery.Facts\AppConfigIsCorrectlyApplied.cs:line 25]]></stack-trace>
        </failure>
      </test>
      <test name="NuGetGallery.AppConfigIsCorrectlyApplied.VerifyAppDomainHasConfigurationSettings" type="NuGetGallery.AppConfigIsCorrectlyApplied" method="VerifyAppDomainHasConfigurationSettings" time="0.0005984" result="Pass" />
    </collection>
    <collection total="26" passed="26" failed="0" skipped="0" name="Test collection for NuGetGallery.FeedServiceFacts+TheV2Feed+TheGetUpdatesMethod" time="0.373">
      <test name="NuGetGallery.FeedServiceFacts+TheV2Feed+TheGetUpdatesMethod.V2FeedGetUpdatesReturnsUpdateIfAnyOfTheProvidedVersionsIsOlder" type="NuGetGallery.FeedServiceFacts+TheV2Feed+TheGetUpdatesMethod" method="V2FeedGetUpdatesReturnsUpdateIfAnyOfTheProvidedVersionsIsOlder" time="0.1256659" result="Pass" />
      <test name="NuGetGallery.FeedServiceFacts+TheV2Feed+TheGetUpdatesMethod.V2FeedGetUpdatesReturnsVersionsConformingToConstraintsWithMissingConstraintsForSomePackges" type="NuGetGallery.FeedServiceFacts+TheV2Feed+TheGetUpdatesMethod" method="V2FeedGetUpdatesReturnsVersionsConformingToConstraintsWithMissingConstraintsForSomePackges" time="0.0238766" result="Pass" />
      <test name="NuGetGallery.FeedServiceFacts+TheV2Feed+TheGetUpdatesMethod.V2FeedGetUpdatesReturnsEmptyResultsIfInputIsMalformed(id: &quot;A|B&quot;, version: &quot;1.0|&quot;)" type="NuGetGallery.FeedServiceFacts+TheV2Feed+TheGetUpdatesMethod" method="V2FeedGetUpdatesReturnsEmptyResultsIfInputIsMalformed" time="0.0103964" result="Pass" />
      <test name="NuGetGallery.FeedServiceFacts+TheV2Feed+TheGetUpdatesMethod.V2FeedGetUpdatesReturnsEmptyResultsIfInputIsMalformed(id: &quot;A&quot;, version: &quot;&quot;)" type="NuGetGallery.FeedServiceFacts+TheV2Feed+TheGetUpdatesMethod" method="V2FeedGetUpdatesReturnsEmptyResultsIfInputIsMalformed" time="0.003182" result="Pass" />
      <test name="NuGetGallery.FeedServiceFacts+TheV2Feed+TheGetUpdatesMethod.V2FeedGetUpdatesReturnsEmptyResultsIfInputIsMalformed(id: &quot;A&quot;, version: &quot;   |&quot;)" type="NuGetGallery.FeedServiceFacts+TheV2Feed+TheGetUpdatesMethod" method="V2FeedGetUpdatesReturnsEmptyResultsIfInputIsMalformed" time="0.0043907" result="Pass" />
      <test name="NuGetGallery.FeedServiceFacts+TheV2Feed+TheGetUpdatesMethod.V2FeedGetUpdatesReturnsEmptyResultsIfInputIsMalformed(id: &quot;&quot;, version: &quot;1.0.0|0.9&quot;)" type="NuGetGallery.FeedServiceFacts+TheV2Feed+TheGetUpdatesMethod" method="V2FeedGetUpdatesReturnsEmptyResultsIfInputIsMalformed" time="0.0034528" result="Pass" />
      <test name="NuGetGallery.FeedServiceFacts+TheV2Feed+TheGetUpdatesMethod.V2FeedGetUpdatesReturnsEmptyResultsIfInputIsMalformed(id: null, version: &quot;1.0.0|0.9&quot;)" type="NuGetGallery.FeedServiceFacts+TheV2Feed+TheGetUpdatesMethod" method="V2FeedGetUpdatesReturnsEmptyResultsIfInputIsMalformed" time="0.0374528" result="Pass" />
      <test name="NuGetGallery.FeedServiceFacts+TheV2Feed+TheGetUpdatesMethod.V2FeedGetUpdatesReturnsEmptyResultsIfInputIsMalformed(id: &quot;   &quot;, version: &quot;1.0.0|0.9&quot;)" type="NuGetGallery.FeedServiceFacts+TheV2Feed+TheGetUpdatesMethod" method="V2FeedGetUpdatesReturnsEmptyResultsIfInputIsMalformed" time="0.0035001" result="Pass" />
      <test name="NuGetGallery.FeedServiceFacts+TheV2Feed+TheGetUpdatesMethod.V2FeedGetUpdatesReturnsEmptyResultsIfInputIsMalformed(id: &quot;A&quot;, version: &quot;|  &quot;)" type="NuGetGallery.FeedServiceFacts+TheV2Feed+TheGetUpdatesMethod" method="V2FeedGetUpdatesReturnsEmptyResultsIfInputIsMalformed" time="0.0029151" result="Pass" />
      <test name="NuGetGallery.FeedServiceFacts+TheV2Feed+TheGetUpdatesMethod.V2FeedGetUpdatesReturnsEmptyResultsIfInputIsMalformed(id: &quot;|   &quot;, version: &quot;1.0.0|0.9&quot;)" type="NuGetGallery.FeedServiceFacts+TheV2Feed+TheGetUpdatesMethod" method="V2FeedGetUpdatesReturnsEmptyResultsIfInputIsMalformed" time="0.003602" result="Pass" />
      <test name="NuGetGallery.FeedServiceFacts+TheV2Feed+TheGetUpdatesMethod.V2FeedGetUpdatesReturnsEmptyResultsIfInputIsMalformed(id: &quot;A&quot;, version: null)" type="NuGetGallery.FeedServiceFacts+TheV2Feed+TheGetUpdatesMethod" method="V2FeedGetUpdatesReturnsEmptyResultsIfInputIsMalformed" time="0.0026353" result="Pass" />
      <test name="NuGetGallery.FeedServiceFacts+TheV2Feed+TheGetUpdatesMethod.V2FeedGetUpdatesReturnsEmptyIfVersionConstraintsContainWrongNumberOfElements(constraintString: &quot;2.3&quot;)" type="NuGetGallery.FeedServiceFacts+TheV2Feed+TheGetUpdatesMethod" method="V2FeedGetUpdatesReturnsEmptyIfVersionConstraintsContainWrongNumberOfElements" time="0.0027707" result="Pass" />
      <test name="NuGetGallery.FeedServiceFacts+TheV2Feed+TheGetUpdatesMethod.V2FeedGetUpdatesReturnsEmptyIfVersionConstraintsContainWrongNumberOfElements(constraintString: &quot;||&quot;)" type="NuGetGallery.FeedServiceFacts+TheV2Feed+TheGetUpdatesMethod" method="V2FeedGetUpdatesReturnsEmptyIfVersionConstraintsContainWrongNumberOfElements" time="0.000699" result="Pass" />
      <test name="NuGetGallery.FeedServiceFacts+TheV2Feed+TheGetUpdatesMethod.V2FeedGetUpdatesReturnsEmptyIfVersionConstraintsContainWrongNumberOfElements(constraintString: &quot;|1.0|&quot;)" type="NuGetGallery.FeedServiceFacts+TheV2Feed+TheGetUpdatesMethod" method="V2FeedGetUpdatesReturnsEmptyIfVersionConstraintsContainWrongNumberOfElements" time="0.0007105" result="Pass" />
      <test name="NuGetGallery.FeedServiceFacts+TheV2Feed+TheGetUpdatesMethod.V2FeedGetUpdatesReturnsEmptyIfVersionConstraintsContainWrongNumberOfElements(constraintString: &quot;1.0||2.0&quot;)" type="NuGetGallery.FeedServiceFacts+TheV2Feed+TheGetUpdatesMethod" method="V2FeedGetUpdatesReturnsEmptyIfVersionConstraintsContainWrongNumberOfElements" time="0.0007902" result="Pass" />
      <test name="NuGetGallery.FeedServiceFacts+TheV2Feed+TheGetUpdatesMethod.V2FeedGetUpdatesReturnsEmptyIfVersionConstraintsContainWrongNumberOfElements(constraintString: &quot;2.3|3.5|(1.0,2.3)&quot;)" type="NuGetGallery.FeedServiceFacts+TheV2Feed+TheGetUpdatesMethod" method="V2FeedGetUpdatesReturnsEmptyIfVersionConstraintsContainWrongNumberOfElements" time="0.0007697" result="Pass" />
      <test name="NuGetGallery.FeedServiceFacts+TheV2Feed+TheGetUpdatesMethod.V2FeedGetUpdatesReturnsVersionsNewerThanListedVersion" type="NuGetGallery.FeedServiceFacts+TheV2Feed+TheGetUpdatesMethod" method="V2FeedGetUpdatesReturnsVersionsNewerThanListedVersion" time="0.0099776" result="Pass" />
      <test name="NuGetGallery.FeedServiceFacts+TheV2Feed+TheGetUpdatesMethod.V2FeedGetUpdatesFiltersByTargetFramework" type="NuGetGallery.FeedServiceFacts+TheV2Feed+TheGetUpdatesMethod" method="V2FeedGetUpdatesFiltersByTargetFramework" time="0.0143948" result="Pass" />
      <test name="NuGetGallery.FeedServiceFacts+TheV2Feed+TheGetUpdatesMethod.V2FeedGetUpdatesIgnoresItemsWithMalformedVersions" type="NuGetGallery.FeedServiceFacts+TheV2Feed+TheGetUpdatesMethod" method="V2FeedGetUpdatesIgnoresItemsWithMalformedVersions" time="0.0133329" result="Pass" />
      <test name="NuGetGallery.FeedServiceFacts+TheV2Feed+TheGetUpdatesMethod.V2FeedGetUpdatesIgnoreInvalidVersionConstraints" type="NuGetGallery.FeedServiceFacts+TheV2Feed+TheGetUpdatesMethod" method="V2FeedGetUpdatesIgnoreInvalidVersionConstraints" time="0.0236517" result="Pass" />
      <test name="NuGetGallery.FeedServiceFacts+TheV2Feed+TheGetUpdatesMethod.V2FeedGetUpdatesReturnsEmptyPackagesIfNoPackageSatisfiesConstraints" type="NuGetGallery.FeedServiceFacts+TheV2Feed+TheGetUpdatesMethod" method="V2FeedGetUpdatesReturnsEmptyPackagesIfNoPackageSatisfiesConstraints" time="0.0110924" result="Pass" />
      <test name="NuGetGallery.FeedServiceFacts+TheV2Feed+TheGetUpdatesMethod.V2FeedGetUpdatesFiltersIncludesHighestPrereleasePackage" type="NuGetGallery.FeedServiceFacts+TheV2Feed+TheGetUpdatesMethod" method="V2FeedGetUpdatesFiltersIncludesHighestPrereleasePackage" time="0.0125979" result="Pass" />
      <test name="NuGetGallery.FeedServiceFacts+TheV2Feed+TheGetUpdatesMethod.V2FeedGetUpdatesReturnsVersionsConformingToConstraints" type="NuGetGallery.FeedServiceFacts+TheV2Feed+TheGetUpdatesMethod" method="V2FeedGetUpdatesReturnsVersionsConformingToConstraints" time="0.0100873" result="Pass" />
      <test name="NuGetGallery.FeedServiceFacts+TheV2Feed+TheGetUpdatesMethod.V2FeedGetUpdatesReturnsResultsIfDuplicatesInPackageList" type="NuGetGallery.FeedServiceFacts+TheV2Feed+TheGetUpdatesMethod" method="V2FeedGetUpdatesReturnsResultsIfDuplicatesInPackageList" time="0.0135524" result="Pass" />
      <test name="NuGetGallery.FeedServiceFacts+TheV2Feed+TheGetUpdatesMethod.V2FeedGetUpdatesReturnsPrereleasePackages" type="NuGetGallery.FeedServiceFacts+TheV2Feed+TheGetUpdatesMethod" method="V2FeedGetUpdatesReturnsPrereleasePackages" time="0.0275865" result="Pass" />
      <test name="NuGetGallery.FeedServiceFacts+TheV2Feed+TheGetUpdatesMethod.V2FeedGetUpdatesReturnsCaseInsensitiveMatches" type="NuGetGallery.FeedServiceFacts+TheV2Feed+TheGetUpdatesMethod" method="V2FeedGetUpdatesReturnsCaseInsensitiveMatches" time="0.0097838" result="Pass" />
    </collection>
    <collection total="16" passed="16" failed="0" skipped="0" name="Test collection for NuGetGallery.PackageCurators.Windows8PackageCuratorFacts+TheCurateMethod" time="0.086">
      <test name="NuGetGallery.PackageCurators.Windows8PackageCuratorFacts+TheCurateMethod.WillNotIncludeThePackageWhenItDependsOnAPackageThatIsNotIncluded" type="NuGetGallery.PackageCurators.Windows8PackageCuratorFacts+TheCurateMethod" method="WillNotIncludeThePackageWhenItDependsOnAPackageThatIsNotIncluded" time="0.0082087" result="Pass" />
      <test name="NuGetGallery.PackageCurators.Windows8PackageCuratorFacts+TheCurateMethod.WillIncludeThePackageWhenItHasAcceptedTag(tag: &quot;winjs&quot;)" type="NuGetGallery.PackageCurators.Windows8PackageCuratorFacts+TheCurateMethod" method="WillIncludeThePackageWhenItHasAcceptedTag" time="0.0031346" result="Pass" />
      <test name="NuGetGallery.PackageCurators.Windows8PackageCuratorFacts+TheCurateMethod.WillIncludeThePackageWhenItHasAcceptedTag(tag: &quot;wInRt&quot;)" type="NuGetGallery.PackageCurators.Windows8PackageCuratorFacts+TheCurateMethod" method="WillIncludeThePackageWhenItHasAcceptedTag" time="0.0020273" result="Pass" />
      <test name="NuGetGallery.PackageCurators.Windows8PackageCuratorFacts+TheCurateMethod.WillIncludeThePackageWhenItHasAcceptedTag(tag: &quot;wInDows8&quot;)" type="NuGetGallery.PackageCurators.Windows8PackageCuratorFacts+TheCurateMethod" method="WillIncludeThePackageWhenItHasAcceptedTag" time="0.001901" result="Pass" />
      <test name="NuGetGallery.PackageCurators.Windows8PackageCuratorFacts+TheCurateMethod.WillIncludeThePackageWhenItHasAcceptedTag(tag: &quot;winrt&quot;)" type="NuGetGallery.PackageCurators.Windows8PackageCuratorFacts+TheCurateMethod" method="WillIncludeThePackageWhenItHasAcceptedTag" time="0.0378065" result="Pass" />
      <test name="NuGetGallery.PackageCurators.Windows8PackageCuratorFacts+TheCurateMethod.WillIncludeThePackageWhenItHasAcceptedTag(tag: &quot;win8&quot;)" type="NuGetGallery.PackageCurators.Windows8PackageCuratorFacts+TheCurateMethod" method="WillIncludeThePackageWhenItHasAcceptedTag" time="0.0019362" result="Pass" />
      <test name="NuGetGallery.PackageCurators.Windows8PackageCuratorFacts+TheCurateMethod.WillIncludeThePackageWhenItHasAcceptedTag(tag: &quot;wInJs&quot;)" type="NuGetGallery.PackageCurators.Windows8PackageCuratorFacts+TheCurateMethod" method="WillIncludeThePackageWhenItHasAcceptedTag" time="0.0021635" result="Pass" />
      <test name="NuGetGallery.PackageCurators.Windows8PackageCuratorFacts+TheCurateMethod.WillIncludeThePackageWhenItHasAcceptedTag(tag: &quot;wIn8&quot;)" type="NuGetGallery.PackageCurators.Windows8PackageCuratorFacts+TheCurateMethod" method="WillIncludeThePackageWhenItHasAcceptedTag" time="0.0018833" result="Pass" />
      <test name="NuGetGallery.PackageCurators.Windows8PackageCuratorFacts+TheCurateMethod.WillIncludeThePackageWhenItHasAcceptedTag(tag: &quot;windows8&quot;)" type="NuGetGallery.PackageCurators.Windows8PackageCuratorFacts+TheCurateMethod" method="WillIncludeThePackageWhenItHasAcceptedTag" time="0.0018856" result="Pass" />
      <test name="NuGetGallery.PackageCurators.Windows8PackageCuratorFacts+TheCurateMethod.WillNotIncludeThePackageWhenNotTagged" type="NuGetGallery.PackageCurators.Windows8PackageCuratorFacts+TheCurateMethod" method="WillNotIncludeThePackageWhenNotTagged" time="0.0028974" result="Pass" />
      <test name="NuGetGallery.PackageCurators.Windows8PackageCuratorFacts+TheCurateMethod.WillNotIncludeThePackageWhenTagsIsNull" type="NuGetGallery.PackageCurators.Windows8PackageCuratorFacts+TheCurateMethod" method="WillNotIncludeThePackageWhenTagsIsNull" time="0.0029617" result="Pass" />
      <test name="NuGetGallery.PackageCurators.Windows8PackageCuratorFacts+TheCurateMethod.WillNotIncludeThePackageWhenItDependsOnAPackageThatIsExcludedInTheFeed" type="NuGetGallery.PackageCurators.Windows8PackageCuratorFacts+TheCurateMethod" method="WillNotIncludeThePackageWhenItDependsOnAPackageThatIsExcludedInTheFeed" time="0.0034836" result="Pass" />
      <test name="NuGetGallery.PackageCurators.Windows8PackageCuratorFacts+TheCurateMethod.WillIncludeThePackageUsingThePackageRegistrationKey" type="NuGetGallery.PackageCurators.Windows8PackageCuratorFacts+TheCurateMethod" method="WillIncludeThePackageUsingThePackageRegistrationKey" time="0.004191" result="Pass" />
      <test name="NuGetGallery.PackageCurators.Windows8PackageCuratorFacts+TheCurateMethod.WillIncludeThePackageUsingTheCuratedFeedKey" type="NuGetGallery.PackageCurators.Windows8PackageCuratorFacts+TheCurateMethod" method="WillIncludeThePackageUsingTheCuratedFeedKey" time="0.0039451" result="Pass" />
      <test name="NuGetGallery.PackageCurators.Windows8PackageCuratorFacts+TheCurateMethod.WillNotIncludeThePackageWhenTheWindows8CuratedFeedDoesNotExist" type="NuGetGallery.PackageCurators.Windows8PackageCuratorFacts+TheCurateMethod" method="WillNotIncludeThePackageWhenTheWindows8CuratedFeedDoesNotExist" time="0.004401" result="Pass" />
      <test name="NuGetGallery.PackageCurators.Windows8PackageCuratorFacts+TheCurateMethod.WillSetTheAutomaticBitWhenIncludingThePackage" type="NuGetGallery.PackageCurators.Windows8PackageCuratorFacts+TheCurateMethod" method="WillSetTheAutomaticBitWhenIncludingThePackage" time="0.0032661" result="Pass" />
    </collection>
    <collection total="3" passed="3" failed="0" skipped="0" name="Test collection for NuGetGallery.PackageServiceFacts+TheRemovePackageOwnerMethod" time="0.035">
      <test name="NuGetGallery.PackageServiceFacts+TheRemovePackageOwnerMethod.WontRemoveLastOwner" type="NuGetGallery.PackageServiceFacts+TheRemovePackageOwnerMethod" method="WontRemoveLastOwner" time="0.0021754" result="Pass" />
      <test name="NuGetGallery.PackageServiceFacts+TheRemovePackageOwnerMethod.RemovesPendingPackageOwner" type="NuGetGallery.PackageServiceFacts+TheRemovePackageOwnerMethod" method="RemovesPendingPackageOwner" time="0.0291635" result="Pass" />
      <test name="NuGetGallery.PackageServiceFacts+TheRemovePackageOwnerMethod.RemovesPackageOwner" type="NuGetGallery.PackageServiceFacts+TheRemovePackageOwnerMethod" method="RemovesPackageOwner" time="0.0038653" result="Pass" />
    </collection>
    <collection total="4" passed="4" failed="0" skipped="0" name="Test collection for NuGetGallery.PackageServiceFacts+TheMarkPackageListedMethod" time="0.126">
      <test name="NuGetGallery.PackageServiceFacts+TheMarkPackageListedMethod.CommitIfCommitChangesIsTrue" type="NuGetGallery.PackageServiceFacts+TheMarkPackageListedMethod" method="CommitIfCommitChangesIsTrue" time="0.1186987" result="Pass" />
      <test name="NuGetGallery.PackageServiceFacts+TheMarkPackageListedMethod.OnPackageVersionHigherThanLatestSetsItToLatestVersion" type="NuGetGallery.PackageServiceFacts+TheMarkPackageListedMethod" method="OnPackageVersionHigherThanLatestSetsItToLatestVersion" time="0.0051963" result="Pass" />
      <test name="NuGetGallery.PackageServiceFacts+TheMarkPackageListedMethod.DoNotCommitIfCommitChangesIsFalse" type="NuGetGallery.PackageServiceFacts+TheMarkPackageListedMethod" method="DoNotCommitIfCommitChangesIsFalse" time="0.0013981" result="Pass" />
      <test name="NuGetGallery.PackageServiceFacts+TheMarkPackageListedMethod.SetsListedToTrue" type="NuGetGallery.PackageServiceFacts+TheMarkPackageListedMethod" method="SetsListedToTrue" time="0.0004768" result="Pass" />
    </collection>
    <collection total="6" passed="6" failed="0" skipped="0" name="Test collection for NuGetGallery.App_Start.ConfigurationServiceFacts+TheGetSiteRootMethod" time="0.013">
      <test name="NuGetGallery.App_Start.ConfigurationServiceFacts+TheGetSiteRootMethod.WillCacheTheSiteRootLookup" type="NuGetGallery.App_Start.ConfigurationServiceFacts+TheGetSiteRootMethod" method="WillCacheTheSiteRootLookup" time="0.0080836" result="Pass" />
      <test name="NuGetGallery.App_Start.ConfigurationServiceFacts+TheGetSiteRootMethod.WillUseHttpUponRequestWhenConfiguredSiteRootIsHttps" type="NuGetGallery.App_Start.ConfigurationServiceFacts+TheGetSiteRootMethod" method="WillUseHttpUponRequestWhenConfiguredSiteRootIsHttps" time="0.0007361" result="Pass" />
      <test name="NuGetGallery.App_Start.ConfigurationServiceFacts+TheGetSiteRootMethod.WillThrowIfConfiguredSiteRootIsNotHttpOrHttps" type="NuGetGallery.App_Start.ConfigurationServiceFacts+TheGetSiteRootMethod" method="WillThrowIfConfiguredSiteRootIsNotHttpOrHttps" time="0.0011202" result="Pass" />
      <test name="NuGetGallery.App_Start.ConfigurationServiceFacts+TheGetSiteRootMethod.WillGetTheConfiguredHttpsSiteRoot" type="NuGetGallery.App_Start.ConfigurationServiceFacts+TheGetSiteRootMethod" method="WillGetTheConfiguredHttpsSiteRoot" time="0.0006746" result="Pass" />
      <test name="NuGetGallery.App_Start.ConfigurationServiceFacts+TheGetSiteRootMethod.WillUseTheActualRootWhenTheRequestIsLocal" type="NuGetGallery.App_Start.ConfigurationServiceFacts+TheGetSiteRootMethod" method="WillUseTheActualRootWhenTheRequestIsLocal" time="0.0021067" result="Pass" />
      <test name="NuGetGallery.App_Start.ConfigurationServiceFacts+TheGetSiteRootMethod.WillGetTheConfiguredHttpSiteRoot" type="NuGetGallery.App_Start.ConfigurationServiceFacts+TheGetSiteRootMethod" method="WillGetTheConfiguredHttpSiteRoot" time="0.0006852" result="Pass" />
    </collection>
    <collection total="3" passed="3" failed="0" skipped="0" name="Test collection for NuGetGallery.ApiControllerFacts+TheDeletePackageAction" time="0.291">
      <test name="NuGetGallery.ApiControllerFacts+TheDeletePackageAction.WillNotDeleteThePackageIfApiKeyDoesNotBelongToAnOwner" type="NuGetGallery.ApiControllerFacts+TheDeletePackageAction" method="WillNotDeleteThePackageIfApiKeyDoesNotBelongToAnOwner" time="0.129092" result="Pass" />
      <test name="NuGetGallery.ApiControllerFacts+TheDeletePackageAction.WillThrowIfAPackageWithTheIdAndSemanticVersionDoesNotExist" type="NuGetGallery.ApiControllerFacts+TheDeletePackageAction" method="WillThrowIfAPackageWithTheIdAndSemanticVersionDoesNotExist" time="0.0928861" result="Pass" />
      <test name="NuGetGallery.ApiControllerFacts+TheDeletePackageAction.WillUnlistThePackageIfApiKeyBelongsToAnOwner" type="NuGetGallery.ApiControllerFacts+TheDeletePackageAction" method="WillUnlistThePackageIfApiKeyBelongsToAnOwner" time="0.069067" result="Pass" />
    </collection>
    <collection total="11" passed="11" failed="0" skipped="0" name="Test collection for NuGetGallery.Authentication.AuthenticationServiceFacts+TheAuthenticateMethod" time="1.496">
      <test name="NuGetGallery.Authentication.AuthenticationServiceFacts+TheAuthenticateMethod.GivenASHA1AndAPBKDF2PasswordItAuthenticatesUserAndRemovesTheSHA1Password" type="NuGetGallery.Authentication.AuthenticationServiceFacts+TheAuthenticateMethod" method="GivenASHA1AndAPBKDF2PasswordItAuthenticatesUserAndRemovesTheSHA1Password" time="0.1278553" result="Pass" />
      <test name="NuGetGallery.Authentication.AuthenticationServiceFacts+TheAuthenticateMethod.GivenNoUserWithName_ItReturnsNull" type="NuGetGallery.Authentication.AuthenticationServiceFacts+TheAuthenticateMethod" method="GivenNoUserWithName_ItReturnsNull" time="0.0621036" result="Pass" />
      <test name="NuGetGallery.Authentication.AuthenticationServiceFacts+TheAuthenticateMethod.GivenUserNameWithMatchingPasswordCredential_ItReturnsAuthenticatedUser" type="NuGetGallery.Authentication.AuthenticationServiceFacts+TheAuthenticateMethod" method="GivenUserNameWithMatchingPasswordCredential_ItReturnsAuthenticatedUser" time="0.1344687" result="Pass" />
      <test name="NuGetGallery.Authentication.AuthenticationServiceFacts+TheAuthenticateMethod.GivenMultipleMatchingCredentials_ItThrows" type="NuGetGallery.Authentication.AuthenticationServiceFacts+TheAuthenticateMethod" method="GivenMultipleMatchingCredentials_ItThrows" time="0.068975" result="Pass" />
      <test name="NuGetGallery.Authentication.AuthenticationServiceFacts+TheAuthenticateMethod.GivenMatchingApiKeyCredential_ItReturnsTheUserAndMatchingCredential" type="NuGetGallery.Authentication.AuthenticationServiceFacts+TheAuthenticateMethod" method="GivenMatchingApiKeyCredential_ItReturnsTheUserAndMatchingCredential" time="0.0804818" result="Pass" />
      <test name="NuGetGallery.Authentication.AuthenticationServiceFacts+TheAuthenticateMethod.GivenInvalidApiKeyCredential_ItReturnsNull" type="NuGetGallery.Authentication.AuthenticationServiceFacts+TheAuthenticateMethod" method="GivenInvalidApiKeyCredential_ItReturnsNull" time="0.0673242" result="Pass" />
      <test name="NuGetGallery.Authentication.AuthenticationServiceFacts+TheAuthenticateMethod.GivenUserNameWithMatchingSha1PasswordCredential_ItMigratesHashToPbkdf2" type="NuGetGallery.Authentication.AuthenticationServiceFacts+TheAuthenticateMethod" method="GivenUserNameWithMatchingSha1PasswordCredential_ItMigratesHashToPbkdf2" time="0.1856293" result="Pass" />
      <test name="NuGetGallery.Authentication.AuthenticationServiceFacts+TheAuthenticateMethod.GivenUserNameDoesNotMatchPassword_ItReturnsNull" type="NuGetGallery.Authentication.AuthenticationServiceFacts+TheAuthenticateMethod" method="GivenUserNameDoesNotMatchPassword_ItReturnsNull" time="0.0904205" result="Pass" />
      <test name="NuGetGallery.Authentication.AuthenticationServiceFacts+TheAuthenticateMethod.GivenUserNameWithMatchingSha1PasswordCredential_ItWritesAuditRecordsOfMigration" type="NuGetGallery.Authentication.AuthenticationServiceFacts+TheAuthenticateMethod" method="GivenUserNameWithMatchingSha1PasswordCredential_ItWritesAuditRecordsOfMigration" time="0.4231012" result="Pass" />
      <test name="NuGetGallery.Authentication.AuthenticationServiceFacts+TheAuthenticateMethod.GivenOnlyASHA1PasswordItAuthenticatesUserAndReplacesItWithAPBKDF2Password" type="NuGetGallery.Authentication.AuthenticationServiceFacts+TheAuthenticateMethod" method="GivenOnlyASHA1PasswordItAuthenticatesUserAndReplacesItWithAPBKDF2Password" time="0.1451957" result="Pass" />
      <test name="NuGetGallery.Authentication.AuthenticationServiceFacts+TheAuthenticateMethod.GivenPasswordCredential_ItThrowsArgumentException" type="NuGetGallery.Authentication.AuthenticationServiceFacts+TheAuthenticateMethod" method="GivenPasswordCredential_ItThrowsArgumentException" time="0.1108656" result="Pass" />
    </collection>
    <collection total="3" passed="3" failed="0" skipped="0" name="Test collection for NuGetGallery.UsersControllerFacts+TheAccountAction" time="0.645">
      <test name="NuGetGallery.UsersControllerFacts+TheAccountAction.LoadsDescriptionsOfCredentialsInToViewModel" type="NuGetGallery.UsersControllerFacts+TheAccountAction" method="LoadsDescriptionsOfCredentialsInToViewModel" time="0.2455281" result="Pass" />
      <test name="NuGetGallery.UsersControllerFacts+TheAccountAction.WillGetCuratedFeedsManagedByTheCurrentUser" type="NuGetGallery.UsersControllerFacts+TheAccountAction" method="WillGetCuratedFeedsManagedByTheCurrentUser" time="0.1564093" result="Pass" />
      <test name="NuGetGallery.UsersControllerFacts+TheAccountAction.WillReturnTheAccountViewModelWithTheCuratedFeeds" type="NuGetGallery.UsersControllerFacts+TheAccountAction" method="WillReturnTheAccountViewModelWithTheCuratedFeeds" time="0.2430056" result="Pass" />
    </collection>
    <collection total="3" passed="3" failed="0" skipped="0" name="Test collection for NuGetGallery.UsersControllerFacts+TheRemovePasswordAction" time="0.633">
      <test name="NuGetGallery.UsersControllerFacts+TheRemovePasswordAction.GivenNoPassword_ItRedirectsBackWithNoChangesMade" type="NuGetGallery.UsersControllerFacts+TheRemovePasswordAction" method="GivenNoPassword_ItRedirectsBackWithNoChangesMade" time="0.3242381" result="Pass" />
      <test name="NuGetGallery.UsersControllerFacts+TheRemovePasswordAction.GivenNoOtherLoginCredentials_ItRedirectsBackWithAnErrorMessage" type="NuGetGallery.UsersControllerFacts+TheRemovePasswordAction" method="GivenNoOtherLoginCredentials_ItRedirectsBackWithAnErrorMessage" time="0.1570472" result="Pass" />
      <test name="NuGetGallery.UsersControllerFacts+TheRemovePasswordAction.GivenValidRequest_ItRemovesCredAndSendsNotificationToUser" type="NuGetGallery.UsersControllerFacts+TheRemovePasswordAction" method="GivenValidRequest_ItRemovesCredAndSendsNotificationToUser" time="0.1521362" result="Pass" />
    </collection>
    <collection total="4" passed="4" failed="0" skipped="0" name="Test collection for NuGetGallery.ODataRemoveVersionSorterFacts" time="0.196">
      <test name="NuGetGallery.ODataRemoveVersionSorterFacts.RemoveVersionSortRemovesThenByDescendingOnVersion" type="NuGetGallery.ODataRemoveVersionSorterFacts" method="RemoveVersionSortRemovesThenByDescendingOnVersion" time="0.1641666" result="Pass" />
      <test name="NuGetGallery.ODataRemoveVersionSorterFacts.RemoveVersionSortRemovesThenByOnVersion" type="NuGetGallery.ODataRemoveVersionSorterFacts" method="RemoveVersionSortRemovesThenByOnVersion" time="0.005012" result="Pass" />
      <test name="NuGetGallery.ODataRemoveVersionSorterFacts.RemoveVersionSortRemovesThenByWhenVersionIsRepresentedInAWrapperObject" type="NuGetGallery.ODataRemoveVersionSorterFacts" method="RemoveVersionSortRemovesThenByWhenVersionIsRepresentedInAWrapperObject" time="0.0219949" result="Pass" />
      <test name="NuGetGallery.ODataRemoveVersionSorterFacts.RemoveVersionSortRemovesThenByWhenItIsNestedInsideAnotherThenBy" type="NuGetGallery.ODataRemoveVersionSorterFacts" method="RemoveVersionSortRemovesThenByWhenItIsNestedInsideAnotherThenBy" time="0.0043382" result="Pass" />
    </collection>
    <collection total="6" passed="6" failed="0" skipped="0" name="Test collection for NuGetGallery.CuratedFeedsControllerFacts+TheGetCuratedFeedAction" time="0.302">
      <test name="NuGetGallery.CuratedFeedsControllerFacts+TheGetCuratedFeedAction.WillPassTheCuratedFeedManagersToTheView" type="NuGetGallery.CuratedFeedsControllerFacts+TheGetCuratedFeedAction" method="WillPassTheCuratedFeedManagersToTheView" time="0.0639274" result="Pass" />
      <test name="NuGetGallery.CuratedFeedsControllerFacts+TheGetCuratedFeedAction.WillPassTheIncludedPackagesToTheView" type="NuGetGallery.CuratedFeedsControllerFacts+TheGetCuratedFeedAction" method="WillPassTheIncludedPackagesToTheView" time="0.0489479" result="Pass" />
      <test name="NuGetGallery.CuratedFeedsControllerFacts+TheGetCuratedFeedAction.WillPassTheExcludedPackagesToTheView" type="NuGetGallery.CuratedFeedsControllerFacts+TheGetCuratedFeedAction" method="WillPassTheExcludedPackagesToTheView" time="0.0610296" result="Pass" />
      <test name="NuGetGallery.CuratedFeedsControllerFacts+TheGetCuratedFeedAction.WillReturn404IfTheCuratedFeedDoesNotExist" type="NuGetGallery.CuratedFeedsControllerFacts+TheGetCuratedFeedAction" method="WillReturn404IfTheCuratedFeedDoesNotExist" time="0.0441541" result="Pass" />
      <test name="NuGetGallery.CuratedFeedsControllerFacts+TheGetCuratedFeedAction.WillReturn403IfTheCurrentUsersIsNotAManagerOfTheCuratedFeed" type="NuGetGallery.CuratedFeedsControllerFacts+TheGetCuratedFeedAction" method="WillReturn403IfTheCurrentUsersIsNotAManagerOfTheCuratedFeed" time="0.0430776" result="Pass" />
      <test name="NuGetGallery.CuratedFeedsControllerFacts+TheGetCuratedFeedAction.WillPassTheCuratedFeedNameToTheView" type="NuGetGallery.CuratedFeedsControllerFacts+TheGetCuratedFeedAction" method="WillPassTheCuratedFeedNameToTheView" time="0.0406069" result="Pass" />
    </collection>
    <collection total="2" passed="2" failed="0" skipped="0" name="Test collection for NuGetGallery.Authentication.AuthenticationServiceFacts+TheAddCredentialMethod" time="0.212">
      <test name="NuGetGallery.Authentication.AuthenticationServiceFacts+TheAddCredentialMethod.WritesAuditRecordForTheNewCredential" type="NuGetGallery.Authentication.AuthenticationServiceFacts+TheAddCredentialMethod" method="WritesAuditRecordForTheNewCredential" time="0.108578" result="Pass" />
      <test name="NuGetGallery.Authentication.AuthenticationServiceFacts+TheAddCredentialMethod.AddsTheCredentialToTheDataStore" type="NuGetGallery.Authentication.AuthenticationServiceFacts+TheAddCredentialMethod" method="AddsTheCredentialToTheDataStore" time="0.1034897" result="Pass" />
    </collection>
    <collection total="2" passed="2" failed="0" skipped="0" name="Test collection for NuGetGallery.MessageServiceFacts+TheSendCredentialAddedNoticeMethod" time="0.187">
      <test name="NuGetGallery.MessageServiceFacts+TheSendCredentialAddedNoticeMethod.UsesTypeCaptionToDescribeCredentialIfNoProviderNounPresent" type="NuGetGallery.MessageServiceFacts+TheSendCredentialAddedNoticeMethod" method="UsesTypeCaptionToDescribeCredentialIfNoProviderNounPresent" time="0.1846319" result="Pass" />
      <test name="NuGetGallery.MessageServiceFacts+TheSendCredentialAddedNoticeMethod.UsesProviderNounToDescribeCredentialIfPresent" type="NuGetGallery.MessageServiceFacts+TheSendCredentialAddedNoticeMethod" method="UsesProviderNounToDescribeCredentialIfPresent" time="0.002807" result="Pass" />
    </collection>
    <collection total="3" passed="3" failed="0" skipped="0" name="Test collection for NuGetGallery.CloudBlobFileStorageServiceFacts+TheDeletePackageFileMethod" time="0.113">
      <test name="NuGetGallery.CloudBlobFileStorageServiceFacts+TheDeletePackageFileMethod.WillGetTheBlobFromTheCorrectFolderContainer(folderName: &quot;packages&quot;)" type="NuGetGallery.CloudBlobFileStorageServiceFacts+TheDeletePackageFileMethod" method="WillGetTheBlobFromTheCorrectFolderContainer" time="0.046757" result="Pass" />
      <test name="NuGetGallery.CloudBlobFileStorageServiceFacts+TheDeletePackageFileMethod.WillGetTheBlobFromTheCorrectFolderContainer(folderName: &quot;uploads&quot;)" type="NuGetGallery.CloudBlobFileStorageServiceFacts+TheDeletePackageFileMethod" method="WillGetTheBlobFromTheCorrectFolderContainer" time="0.0321264" result="Pass" />
      <test name="NuGetGallery.CloudBlobFileStorageServiceFacts+TheDeletePackageFileMethod.WillDeleteTheBlobIfItExists" type="NuGetGallery.CloudBlobFileStorageServiceFacts+TheDeletePackageFileMethod" method="WillDeleteTheBlobIfItExists" time="0.0341374" result="Pass" />
    </collection>
    <collection total="1" passed="1" failed="0" skipped="0" name="Test collection for NuGetGallery.Authentication.AuthenticationServiceFacts+TheCreateSessionMethod" time="0.415">
      <test name="NuGetGallery.Authentication.AuthenticationServiceFacts+TheCreateSessionMethod.GivenAUser_ItCreatesAnOwinAuthenticationTicketForTheUser" type="NuGetGallery.Authentication.AuthenticationServiceFacts+TheCreateSessionMethod" method="GivenAUser_ItCreatesAnOwinAuthenticationTicketForTheUser" time="0.4149927" result="Pass" />
    </collection>
    <collection total="2" passed="2" failed="0" skipped="0" name="Test collection for NuGetGallery.Authentication.AuthenticatorFacts+TheNameProperty" time="0.047">
      <test name="NuGetGallery.Authentication.AuthenticatorFacts+TheNameProperty.GivenAMatchingTypeName_ItUsesTheShortenedName" type="NuGetGallery.Authentication.AuthenticatorFacts+TheNameProperty" method="GivenAMatchingTypeName_ItUsesTheShortenedName" time="0.0453715" result="Pass" />
      <test name="NuGetGallery.Authentication.AuthenticatorFacts+TheNameProperty.GivenANonMatchingTypeName_ItUsesTheFullTypeName" type="NuGetGallery.Authentication.AuthenticatorFacts+TheNameProperty" method="GivenANonMatchingTypeName_ItUsesTheFullTypeName" time="0.0015876" result="Pass" />
    </collection>
    <collection total="14" passed="14" failed="0" skipped="0" name="Test collection for NuGetGallery.PackageCurators.WebMatrixPackageCuratorFacts+TheCurateMethod" time="0.180">
      <test name="NuGetGallery.PackageCurators.WebMatrixPackageCuratorFacts+TheCurateMethod.WillIncludeThePackageUsingThePackageRegistrationKey" type="NuGetGallery.PackageCurators.WebMatrixPackageCuratorFacts+TheCurateMethod" method="WillIncludeThePackageUsingThePackageRegistrationKey" time="0.0199745" result="Pass" />
      <test name="NuGetGallery.PackageCurators.WebMatrixPackageCuratorFacts+TheCurateMethod.WillNotIncludeThePackageWhenPackageDoesNotSupportNet40" type="NuGetGallery.PackageCurators.WebMatrixPackageCuratorFacts+TheCurateMethod" method="WillNotIncludeThePackageWhenPackageDoesNotSupportNet40" time="0.039179" result="Pass" />
      <test name="NuGetGallery.PackageCurators.WebMatrixPackageCuratorFacts+TheCurateMethod.WillNotIncludeThePackageWhenItDependsOnAPackageThatIsNotIncluded" type="NuGetGallery.PackageCurators.WebMatrixPackageCuratorFacts+TheCurateMethod" method="WillNotIncludeThePackageWhenItDependsOnAPackageThatIsNotIncluded" time="0.0074915" result="Pass" />
      <test name="NuGetGallery.PackageCurators.WebMatrixPackageCuratorFacts+TheCurateMethod.WillIncludeThePackageWhenThereIsNotPowerShellOrT4File" type="NuGetGallery.PackageCurators.WebMatrixPackageCuratorFacts+TheCurateMethod" method="WillIncludeThePackageWhenThereIsNotPowerShellOrT4File" time="0.0067067" result="Pass" />
      <test name="NuGetGallery.PackageCurators.WebMatrixPackageCuratorFacts+TheCurateMethod.WillNotIncludeThePackageWhenNotTaggedAndThereIsAPowerShellFile" type="NuGetGallery.PackageCurators.WebMatrixPackageCuratorFacts+TheCurateMethod" method="WillNotIncludeThePackageWhenNotTaggedAndThereIsAPowerShellFile" time="0.0122789" result="Pass" />
      <test name="NuGetGallery.PackageCurators.WebMatrixPackageCuratorFacts+TheCurateMethod.WillNotIncludeThePackageWhenTheWebMatrixCuratedFeedDoesNotExist" type="NuGetGallery.PackageCurators.WebMatrixPackageCuratorFacts+TheCurateMethod" method="WillNotIncludeThePackageWhenTheWebMatrixCuratedFeedDoesNotExist" time="0.0042166" result="Pass" />
      <test name="NuGetGallery.PackageCurators.WebMatrixPackageCuratorFacts+TheCurateMethod.WillNotIncludeThePackageWhenMinClientVersionIsTooHigh" type="NuGetGallery.PackageCurators.WebMatrixPackageCuratorFacts+TheCurateMethod" method="WillNotIncludeThePackageWhenMinClientVersionIsTooHigh" time="0.0078716" result="Pass" />
      <test name="NuGetGallery.PackageCurators.WebMatrixPackageCuratorFacts+TheCurateMethod.WillSetTheAutomaticBitWhenIncludingThePackage" type="NuGetGallery.PackageCurators.WebMatrixPackageCuratorFacts+TheCurateMethod" method="WillSetTheAutomaticBitWhenIncludingThePackage" time="0.0170538" result="Pass" />
      <test name="NuGetGallery.PackageCurators.WebMatrixPackageCuratorFacts+TheCurateMethod.WillNotIncludeThePackageWhenNotTaggedAndThereIsT4Template" type="NuGetGallery.PackageCurators.WebMatrixPackageCuratorFacts+TheCurateMethod" method="WillNotIncludeThePackageWhenNotTaggedAndThereIsT4Template" time="0.0073861" result="Pass" />
      <test name="NuGetGallery.PackageCurators.WebMatrixPackageCuratorFacts+TheCurateMethod.WillIncludeThePackageWhenItIsTaggedWithAspNetWebPages" type="NuGetGallery.PackageCurators.WebMatrixPackageCuratorFacts+TheCurateMethod" method="WillIncludeThePackageWhenItIsTaggedWithAspNetWebPages" time="0.0107813" result="Pass" />
      <test name="NuGetGallery.PackageCurators.WebMatrixPackageCuratorFacts+TheCurateMethod.WillIncludeThePackageUsingTheCuratedFeedKey" type="NuGetGallery.PackageCurators.WebMatrixPackageCuratorFacts+TheCurateMethod" method="WillIncludeThePackageUsingTheCuratedFeedKey" time="0.0099215" result="Pass" />
      <test name="NuGetGallery.PackageCurators.WebMatrixPackageCuratorFacts+TheCurateMethod.WillNotIncludeThePackageWhenItIsNotTheLatestStable" type="NuGetGallery.PackageCurators.WebMatrixPackageCuratorFacts+TheCurateMethod" method="WillNotIncludeThePackageWhenItIsNotTheLatestStable" time="0.0059887" result="Pass" />
      <test name="NuGetGallery.PackageCurators.WebMatrixPackageCuratorFacts+TheCurateMethod.WillNotIncludeThePackageWhenItDependsOnAPackageThatIsExcludedInTheFeed" type="NuGetGallery.PackageCurators.WebMatrixPackageCuratorFacts+TheCurateMethod" method="WillNotIncludeThePackageWhenItDependsOnAPackageThatIsExcludedInTheFeed" time="0.0064813" result="Pass" />
      <test name="NuGetGallery.PackageCurators.WebMatrixPackageCuratorFacts+TheCurateMethod.WillNotExamineTheNuGetPackageFilesWhenTaggedWithAspNetWebPages" type="NuGetGallery.PackageCurators.WebMatrixPackageCuratorFacts+TheCurateMethod" method="WillNotExamineTheNuGetPackageFilesWhenTaggedWithAspNetWebPages" time="0.0249156" result="Pass" />
    </collection>
    <collection total="6" passed="6" failed="0" skipped="0" name="Test collection for NuGetGallery.Services.ContentServiceFacts+TheGetContentItemMethod" time="0.407">
      <test name="NuGetGallery.Services.ContentServiceFacts+TheGetContentItemMethod.GivenAContentItemNameAndAnEmptyCache_ItShouldPutTheContentInTheCache" type="NuGetGallery.Services.ContentServiceFacts+TheGetContentItemMethod" method="GivenAContentItemNameAndAnEmptyCache_ItShouldPutTheContentInTheCache" time="0.3834444" result="Pass" />
      <test name="NuGetGallery.Services.ContentServiceFacts+TheGetContentItemMethod.GivenAContentItemNameAndACachedValueThatHasNotExpired_ItShouldFetchThatItemFromCache" type="NuGetGallery.Services.ContentServiceFacts+TheGetContentItemMethod" method="GivenAContentItemNameAndACachedValueThatHasNotExpired_ItShouldFetchThatItemFromCache" time="0.0032542" result="Pass" />
      <test name="NuGetGallery.Services.ContentServiceFacts+TheGetContentItemMethod.GivenAContentItemNameAndAnEmptyCache_ItShouldFetchThatItemFromFileStorage" type="NuGetGallery.Services.ContentServiceFacts+TheGetContentItemMethod" method="GivenAContentItemNameAndAnEmptyCache_ItShouldFetchThatItemFromFileStorage" time="0.0051912" result="Pass" />
      <test name="NuGetGallery.Services.ContentServiceFacts+TheGetContentItemMethod.GivenAContentItemNameAndACachedValueThatHasExpiredButNotChanged_ItShouldUseTheCachedValue" type="NuGetGallery.Services.ContentServiceFacts+TheGetContentItemMethod" method="GivenAContentItemNameAndACachedValueThatHasExpiredButNotChanged_ItShouldUseTheCachedValue" time="0.0072068" result="Pass" />
      <test name="NuGetGallery.Services.ContentServiceFacts+TheGetContentItemMethod.GivenAContentItemAndACachedValueThatHasExpiredAndChanged_ItShouldUseTheFileContent" type="NuGetGallery.Services.ContentServiceFacts+TheGetContentItemMethod" method="GivenAContentItemAndACachedValueThatHasExpiredAndChanged_ItShouldUseTheFileContent" time="0.0070612" result="Pass" />
      <test name="NuGetGallery.Services.ContentServiceFacts+TheGetContentItemMethod.GivenANullOrEmptyName_ItShouldThrow" type="NuGetGallery.Services.ContentServiceFacts+TheGetContentItemMethod" method="GivenANullOrEmptyName_ItShouldThrow" time="0.000564" result="Pass" />
    </collection>
    <collection total="2" passed="2" failed="0" skipped="0" name="Test collection for NuGetGallery.Controllers.AuthenticationControllerFacts+TheLogOffAction" time="0.268">
      <test name="NuGetGallery.Controllers.AuthenticationControllerFacts+TheLogOffAction.WillLogTheUserOff" type="NuGetGallery.Controllers.AuthenticationControllerFacts+TheLogOffAction" method="WillLogTheUserOff" time="0.1111196" result="Pass" />
      <test name="NuGetGallery.Controllers.AuthenticationControllerFacts+TheLogOffAction.WillRedirectToTheReturnUrl" type="NuGetGallery.Controllers.AuthenticationControllerFacts+TheLogOffAction" method="WillRedirectToTheReturnUrl" time="0.1568463" result="Pass" />
    </collection>
    <collection total="12" passed="12" failed="0" skipped="0" name="Test collection for NuGetGallery.Infrastructure.NuGetQueryParserFacts" time="0.010">
      <test name="NuGetGallery.Infrastructure.NuGetQueryParserFacts.ExtraColon" type="NuGetGallery.Infrastructure.NuGetQueryParserFacts" method="ExtraColon" time="0.0084017" result="Pass" />
      <test name="NuGetGallery.Infrastructure.NuGetQueryParserFacts.SingleResult(input: &quot;Id:hello&quot;, expectedResults: [&quot;Id&quot;, &quot;hello&quot;])" type="NuGetGallery.Infrastructure.NuGetQueryParserFacts" method="SingleResult" time="0.000341" result="Pass" />
      <test name="NuGetGallery.Infrastructure.NuGetQueryParserFacts.SingleResult(input: &quot;&quot;Id:hello&quot;&quot;, expectedResults: [null, &quot;Id:hello&quot;])" type="NuGetGallery.Infrastructure.NuGetQueryParserFacts" method="SingleResult" time="0.0000185" result="Pass" />
      <test name="NuGetGallery.Infrastructure.NuGetQueryParserFacts.SingleResult(input: &quot;Id:&quot;hello&quot;&quot;, expectedResults: [&quot;Id&quot;, &quot;hello&quot;])" type="NuGetGallery.Infrastructure.NuGetQueryParserFacts" method="SingleResult" time="0.0000161" result="Pass" />
      <test name="NuGetGallery.Infrastructure.NuGetQueryParserFacts.SingleResult(input: &quot;hello&quot;, expectedResults: [null, &quot;hello&quot;])" type="NuGetGallery.Infrastructure.NuGetQueryParserFacts" method="SingleResult" time="0.0000153" result="Pass" />
      <test name="NuGetGallery.Infrastructure.NuGetQueryParserFacts.SingleResult(input: &quot;&quot;hello&quot;&quot;, expectedResults: [null, &quot;hello&quot;])" type="NuGetGallery.Infrastructure.NuGetQueryParserFacts" method="SingleResult" time="0.0000315" result="Pass" />
      <test name="NuGetGallery.Infrastructure.NuGetQueryParserFacts.LeadingColon" type="NuGetGallery.Infrastructure.NuGetQueryParserFacts" method="LeadingColon" time="0.0002667" result="Pass" />
      <test name="NuGetGallery.Infrastructure.NuGetQueryParserFacts.EmptyString" type="NuGetGallery.Infrastructure.NuGetQueryParserFacts" method="EmptyString" time="0.0001531" result="Pass" />
      <test name="NuGetGallery.Infrastructure.NuGetQueryParserFacts.MultipleResult" type="NuGetGallery.Infrastructure.NuGetQueryParserFacts" method="MultipleResult" time="0.0003935" result="Pass" />
      <test name="NuGetGallery.Infrastructure.NuGetQueryParserFacts.EmptyPhrase" type="NuGetGallery.Infrastructure.NuGetQueryParserFacts" method="EmptyPhrase" time="0.0002494" result="Pass" />
      <test name="NuGetGallery.Infrastructure.NuGetQueryParserFacts.SingleQuote" type="NuGetGallery.Infrastructure.NuGetQueryParserFacts" method="SingleQuote" time="0.0002502" result="Pass" />
      <test name="NuGetGallery.Infrastructure.NuGetQueryParserFacts.TermlessField" type="NuGetGallery.Infrastructure.NuGetQueryParserFacts" method="TermlessField" time="0.0001353" result="Pass" />
    </collection>
    <collection total="1" passed="1" failed="0" skipped="0" name="Test collection for NuGetGallery.UserServiceFacts+TheFindByEmailAddressMethod" time="0.004">
      <test name="NuGetGallery.UserServiceFacts+TheFindByEmailAddressMethod.ReturnsNullIfMultipleMatchesExist" type="NuGetGallery.UserServiceFacts+TheFindByEmailAddressMethod" method="ReturnsNullIfMultipleMatchesExist" time="0.0041772" result="Pass" />
    </collection>
    <collection total="6" passed="6" failed="0" skipped="0" name="Test collection for NuGetGallery.Authentication.AuthenticationServiceFacts+TheGeneratePasswordResetTokenMethod" time="0.467">
      <test name="NuGetGallery.Authentication.AuthenticationServiceFacts+TheGeneratePasswordResetTokenMethod.WithExistingExpiredTokenReturnsNewToken" type="NuGetGallery.Authentication.AuthenticationServiceFacts+TheGeneratePasswordResetTokenMethod" method="WithExistingExpiredTokenReturnsNewToken" time="0.1252124" result="Pass" />
      <test name="NuGetGallery.Authentication.AuthenticationServiceFacts+TheGeneratePasswordResetTokenMethod.WithExistingNotYetExpiredTokenReturnsExistingToken" type="NuGetGallery.Authentication.AuthenticationServiceFacts+TheGeneratePasswordResetTokenMethod" method="WithExistingNotYetExpiredTokenReturnsExistingToken" time="0.0693287" result="Pass" />
      <test name="NuGetGallery.Authentication.AuthenticationServiceFacts+TheGeneratePasswordResetTokenMethod.ReturnsNullIfEmailIsNotFound" type="NuGetGallery.Authentication.AuthenticationServiceFacts+TheGeneratePasswordResetTokenMethod" method="ReturnsNullIfEmailIsNotFound" time="0.061262" result="Pass" />
      <test name="NuGetGallery.Authentication.AuthenticationServiceFacts+TheGeneratePasswordResetTokenMethod.ThrowsExceptionIfUserIsNotConfirmed" type="NuGetGallery.Authentication.AuthenticationServiceFacts+TheGeneratePasswordResetTokenMethod" method="ThrowsExceptionIfUserIsNotConfirmed" time="0.0680122" result="Pass" />
      <test name="NuGetGallery.Authentication.AuthenticationServiceFacts+TheGeneratePasswordResetTokenMethod.SetsPasswordResetTokenUsingEmail" type="NuGetGallery.Authentication.AuthenticationServiceFacts+TheGeneratePasswordResetTokenMethod" method="SetsPasswordResetTokenUsingEmail" time="0.068058" result="Pass" />
      <test name="NuGetGallery.Authentication.AuthenticationServiceFacts+TheGeneratePasswordResetTokenMethod.WritesAuditRecordWhenGeneratingNewToken" type="NuGetGallery.Authentication.AuthenticationServiceFacts+TheGeneratePasswordResetTokenMethod" method="WritesAuditRecordWhenGeneratingNewToken" time="0.0753652" result="Pass" />
    </collection>
    <collection total="6" passed="6" failed="0" skipped="0" name="Test collection for NuGetGallery.CloudBlobFileStorageServiceFacts+TheSaveFileMethod" time="0.416">
      <test name="NuGetGallery.CloudBlobFileStorageServiceFacts+TheSaveFileMethod.WillGetTheBlobFromTheCorrectFolderContainer(folderName: &quot;uploads&quot;)" type="NuGetGallery.CloudBlobFileStorageServiceFacts+TheSaveFileMethod" method="WillGetTheBlobFromTheCorrectFolderContainer" time="0.2959501" result="Pass" />
      <test name="NuGetGallery.CloudBlobFileStorageServiceFacts+TheSaveFileMethod.WillGetTheBlobFromTheCorrectFolderContainer(folderName: &quot;packages&quot;)" type="NuGetGallery.CloudBlobFileStorageServiceFacts+TheSaveFileMethod" method="WillGetTheBlobFromTheCorrectFolderContainer" time="0.0337564" result="Pass" />
      <test name="NuGetGallery.CloudBlobFileStorageServiceFacts+TheSaveFileMethod.WillDeleteTheBlobIfItExists" type="NuGetGallery.CloudBlobFileStorageServiceFacts+TheSaveFileMethod" method="WillDeleteTheBlobIfItExists" time="0.0215677" result="Pass" />
      <test name="NuGetGallery.CloudBlobFileStorageServiceFacts+TheSaveFileMethod.WillSetTheBlobContentType(folderName: &quot;uploads&quot;)" type="NuGetGallery.CloudBlobFileStorageServiceFacts+TheSaveFileMethod" method="WillSetTheBlobContentType" time="0.0231128" result="Pass" />
      <test name="NuGetGallery.CloudBlobFileStorageServiceFacts+TheSaveFileMethod.WillSetTheBlobContentType(folderName: &quot;packages&quot;)" type="NuGetGallery.CloudBlobFileStorageServiceFacts+TheSaveFileMethod" method="WillSetTheBlobContentType" time="0.0178157" result="Pass" />
      <test name="NuGetGallery.CloudBlobFileStorageServiceFacts+TheSaveFileMethod.WillUploadThePackageFileToTheBlob" type="NuGetGallery.CloudBlobFileStorageServiceFacts+TheSaveFileMethod" method="WillUploadThePackageFileToTheBlob" time="0.0238471" result="Pass" />
    </collection>
    <collection total="4" passed="4" failed="0" skipped="0" name="Test collection for NuGetGallery.CloudBlobFileStorageServiceFacts+TheCreateDownloadPackageResultMethod" time="0.128">
      <test name="NuGetGallery.CloudBlobFileStorageServiceFacts+TheCreateDownloadPackageResultMethod.WillGetTheBlobFromTheCorrectFolderContainer(folderName: &quot;uploads&quot;)" type="NuGetGallery.CloudBlobFileStorageServiceFacts+TheCreateDownloadPackageResultMethod" method="WillGetTheBlobFromTheCorrectFolderContainer" time="0.041317" result="Pass" />
      <test name="NuGetGallery.CloudBlobFileStorageServiceFacts+TheCreateDownloadPackageResultMethod.WillGetTheBlobFromTheCorrectFolderContainer(folderName: &quot;packages&quot;)" type="NuGetGallery.CloudBlobFileStorageServiceFacts+TheCreateDownloadPackageResultMethod" method="WillGetTheBlobFromTheCorrectFolderContainer" time="0.0311234" result="Pass" />
      <test name="NuGetGallery.CloudBlobFileStorageServiceFacts+TheCreateDownloadPackageResultMethod.WillReturnARedirectResultToTheBlobUri(requestUrl: &quot;http://nuget.org/api/v2/something&quot;, scheme: &quot;http://&quot;)" type="NuGetGallery.CloudBlobFileStorageServiceFacts+TheCreateDownloadPackageResultMethod" method="WillReturnARedirectResultToTheBlobUri" time="0.0316098" result="Pass" />
      <test name="NuGetGallery.CloudBlobFileStorageServiceFacts+TheCreateDownloadPackageResultMethod.WillReturnARedirectResultToTheBlobUri(requestUrl: &quot;https://nuget.org/api/v2/something&quot;, scheme: &quot;https://&quot;)" type="NuGetGallery.CloudBlobFileStorageServiceFacts+TheCreateDownloadPackageResultMethod" method="WillReturnARedirectResultToTheBlobUri" time="0.0239279" result="Pass" />
    </collection>
    <collection total="5" passed="5" failed="0" skipped="0" name="Test collection for NuGetGallery.PackageServiceFacts+TheFindPackagesByOwnerMethod" time="3.705">
      <test name="NuGetGallery.PackageServiceFacts+TheFindPackagesByOwnerMethod.ReturnsNoUnlistedPackagesWhenIncludeUnlistedIsFalse" type="NuGetGallery.PackageServiceFacts+TheFindPackagesByOwnerMethod" method="ReturnsNoUnlistedPackagesWhenIncludeUnlistedIsFalse" time="3.299311" result="Pass" />
      <test name="NuGetGallery.PackageServiceFacts+TheFindPackagesByOwnerMethod.ReturnsAListedPackage" type="NuGetGallery.PackageServiceFacts+TheFindPackagesByOwnerMethod" method="ReturnsAListedPackage" time="0.0532545" result="Pass" />
      <test name="NuGetGallery.PackageServiceFacts+TheFindPackagesByOwnerMethod.ReturnsAnUnlistedPackageWhenIncludeUnlistedIsTrue" type="NuGetGallery.PackageServiceFacts+TheFindPackagesByOwnerMethod" method="ReturnsAnUnlistedPackageWhenIncludeUnlistedIsTrue" time="0.0515496" result="Pass" />
      <test name="NuGetGallery.PackageServiceFacts+TheFindPackagesByOwnerMethod.ReturnsOnlyLatestStablePackageIfBothExist" type="NuGetGallery.PackageServiceFacts+TheFindPackagesByOwnerMethod" method="ReturnsOnlyLatestStablePackageIfBothExist" time="0.100104" result="Pass" />
      <test name="NuGetGallery.PackageServiceFacts+TheFindPackagesByOwnerMethod.ReturnsAPackageForEachPackageRegistration" type="NuGetGallery.PackageServiceFacts+TheFindPackagesByOwnerMethod" method="ReturnsAPackageForEachPackageRegistration" time="0.2006547" result="Pass" />
    </collection>
    <collection total="3" passed="3" failed="0" skipped="0" name="Test collection for NuGetGallery.PackagesControllerFacts+TheContactOwnersMethod" time="0.134">
      <test name="NuGetGallery.PackagesControllerFacts+TheContactOwnersMethod.CallsSendContactOwnersMessageWithUserInfo" type="NuGetGallery.PackagesControllerFacts+TheContactOwnersMethod" method="CallsSendContactOwnersMessageWithUserInfo" time="0.0358963" result="Pass" />
      <test name="NuGetGallery.PackagesControllerFacts+TheContactOwnersMethod.OnlyShowsOwnersWhoAllowReceivingEmails" type="NuGetGallery.PackagesControllerFacts+TheContactOwnersMethod" method="OnlyShowsOwnersWhoAllowReceivingEmails" time="0.0512078" result="Pass" />
      <test name="NuGetGallery.PackagesControllerFacts+TheContactOwnersMethod.HtmlEncodesMessageContent" type="NuGetGallery.PackagesControllerFacts+TheContactOwnersMethod" method="HtmlEncodesMessageContent" time="0.0470669" result="Pass" />
    </collection>
    <collection total="4" passed="4" failed="0" skipped="0" name="Test collection for NuGetGallery.UsersControllerFacts+TheChangeEmailAction" time="0.616">
      <test name="NuGetGallery.UsersControllerFacts+TheChangeEmailAction.SendsEmailChangeConfirmationNoticeWhenChangingAConfirmedEmailAddress" type="NuGetGallery.UsersControllerFacts+TheChangeEmailAction" method="SendsEmailChangeConfirmationNoticeWhenChangingAConfirmedEmailAddress" time="0.1577768" result="Pass" />
      <test name="NuGetGallery.UsersControllerFacts+TheChangeEmailAction.DoesNotSendEmailChangeConfirmationNoticeWhenUserWasNotConfirmed" type="NuGetGallery.UsersControllerFacts+TheChangeEmailAction" method="DoesNotSendEmailChangeConfirmationNoticeWhenUserWasNotConfirmed" time="0.1676237" result="Pass" />
      <test name="NuGetGallery.UsersControllerFacts+TheChangeEmailAction.DoesNotLetYouUseSomeoneElsesConfirmedEmailAddress" type="NuGetGallery.UsersControllerFacts+TheChangeEmailAction" method="DoesNotLetYouUseSomeoneElsesConfirmedEmailAddress" time="0.1487141" result="Pass" />
      <test name="NuGetGallery.UsersControllerFacts+TheChangeEmailAction.DoesNotSendEmailChangeConfirmationNoticeWhenAddressDoesntChange" type="NuGetGallery.UsersControllerFacts+TheChangeEmailAction" method="DoesNotSendEmailChangeConfirmationNoticeWhenAddressDoesntChange" time="0.1419292" result="Pass" />
    </collection>
    <collection total="2" passed="2" failed="0" skipped="0" name="Test collection for NuGetGallery.Authentication.AuthenticationServiceFacts+TheRemoveCredentialMethod" time="0.228">
      <test name="NuGetGallery.Authentication.AuthenticationServiceFacts+TheRemoveCredentialMethod.RemovesTheCredentialFromTheDataStore" type="NuGetGallery.Authentication.AuthenticationServiceFacts+TheRemoveCredentialMethod" method="RemovesTheCredentialFromTheDataStore" time="0.1164457" result="Pass" />
      <test name="NuGetGallery.Authentication.AuthenticationServiceFacts+TheRemoveCredentialMethod.WritesAuditRecordForTheRemovedCredential" type="NuGetGallery.Authentication.AuthenticationServiceFacts+TheRemoveCredentialMethod" method="WritesAuditRecordForTheRemovedCredential" time="0.111357" result="Pass" />
    </collection>
    <collection total="19" passed="19" failed="0" skipped="0" name="Test collection for NuGetGallery.DataServices.NormalizeVersionInterceptorFacts" time="0.005">
      <test name="NuGetGallery.DataServices.NormalizeVersionInterceptorFacts.ItReturnsNonEqualityCheckExpressions(expr: (1 + 1))" type="NuGetGallery.DataServices.NormalizeVersionInterceptorFacts" method="ItReturnsNonEqualityCheckExpressions" time="0.0013527" result="Pass" />
      <test name="NuGetGallery.DataServices.NormalizeVersionInterceptorFacts.ItReturnsNonEqualityCheckExpressions(expr: (1 - 1))" type="NuGetGallery.DataServices.NormalizeVersionInterceptorFacts" method="ItReturnsNonEqualityCheckExpressions" time="0.0000248" result="Pass" />
      <test name="NuGetGallery.DataServices.NormalizeVersionInterceptorFacts.ItReturnsNonEqualityCheckExpressions(expr: (1 * 1))" type="NuGetGallery.DataServices.NormalizeVersionInterceptorFacts" method="ItReturnsNonEqualityCheckExpressions" time="0.0000058" result="Pass" />
      <test name="NuGetGallery.DataServices.NormalizeVersionInterceptorFacts.ItReturnsNonEqualityCheckExpressions(expr: (1 / 1))" type="NuGetGallery.DataServices.NormalizeVersionInterceptorFacts" method="ItReturnsNonEqualityCheckExpressions" time="0.0000046" result="Pass" />
      <test name="NuGetGallery.DataServices.NormalizeVersionInterceptorFacts.ItReturnsNonEqualityCheckExpressions(expr: (True And False))" type="NuGetGallery.DataServices.NormalizeVersionInterceptorFacts" method="ItReturnsNonEqualityCheckExpressions" time="0.0000046" result="Pass" />
      <test name="NuGetGallery.DataServices.NormalizeVersionInterceptorFacts.ItReturnsNonEqualityCheckExpressions(expr: (True AndAlso False))" type="NuGetGallery.DataServices.NormalizeVersionInterceptorFacts" method="ItReturnsNonEqualityCheckExpressions" time="0.0000046" result="Pass" />
      <test name="NuGetGallery.DataServices.NormalizeVersionInterceptorFacts.ItReturnsNonEqualityCheckExpressions(expr: (True Or False))" type="NuGetGallery.DataServices.NormalizeVersionInterceptorFacts" method="ItReturnsNonEqualityCheckExpressions" time="0.0000046" result="Pass" />
      <test name="NuGetGallery.DataServices.NormalizeVersionInterceptorFacts.ItReturnsNonEqualityCheckExpressions(expr: (True OrElse False))" type="NuGetGallery.DataServices.NormalizeVersionInterceptorFacts" method="ItReturnsNonEqualityCheckExpressions" time="0.0000046" result="Pass" />
      <test name="NuGetGallery.DataServices.NormalizeVersionInterceptorFacts.ItReturnsNonBinaryExpressions(expr: &quot;Foo&quot;)" type="NuGetGallery.DataServices.NormalizeVersionInterceptorFacts" method="ItReturnsNonBinaryExpressions" time="0.0001712" result="Pass" />
      <test name="NuGetGallery.DataServices.NormalizeVersionInterceptorFacts.ItReturnsNonBinaryExpressions(expr: &quot;foo&quot;.ToString())" type="NuGetGallery.DataServices.NormalizeVersionInterceptorFacts" method="ItReturnsNonBinaryExpressions" time="0.0000118" result="Pass" />
      <test name="NuGetGallery.DataServices.NormalizeVersionInterceptorFacts.ItReturnsNonBinaryExpressions(expr: &quot;foo&quot;.Length)" type="NuGetGallery.DataServices.NormalizeVersionInterceptorFacts" method="ItReturnsNonBinaryExpressions" time="0.000007" result="Pass" />
      <test name="NuGetGallery.DataServices.NormalizeVersionInterceptorFacts.ItRewritesEqualityCheckOfVersionColumnAgainstConstantString" type="NuGetGallery.DataServices.NormalizeVersionInterceptorFacts" method="ItRewritesEqualityCheckOfVersionColumnAgainstConstantString" time="0.0026798" result="Pass" />
      <test name="NuGetGallery.DataServices.NormalizeVersionInterceptorFacts.ItReturnsNonMatchingExpressions(expr: p =&gt; (p.Version == &quot;1.2.3&quot;))" type="NuGetGallery.DataServices.NormalizeVersionInterceptorFacts" method="ItReturnsNonMatchingExpressions" time="0.0001973" result="Pass" />
      <test name="NuGetGallery.DataServices.NormalizeVersionInterceptorFacts.ItReturnsNonMatchingExpressions(expr: p =&gt; (&quot;1.2.3&quot; == p.Version))" type="NuGetGallery.DataServices.NormalizeVersionInterceptorFacts" method="ItReturnsNonMatchingExpressions" time="0.0000098" result="Pass" />
      <test name="NuGetGallery.DataServices.NormalizeVersionInterceptorFacts.ItReturnsNonMatchingExpressions(expr: p =&gt; (p.Id == &quot;1.2.3&quot;))" type="NuGetGallery.DataServices.NormalizeVersionInterceptorFacts" method="ItReturnsNonMatchingExpressions" time="0.000007" result="Pass" />
      <test name="NuGetGallery.DataServices.NormalizeVersionInterceptorFacts.ItReturnsNonMatchingExpressions(expr: p =&gt; (&quot;1.2.3&quot; == p.Id))" type="NuGetGallery.DataServices.NormalizeVersionInterceptorFacts" method="ItReturnsNonMatchingExpressions" time="0.0000066" result="Pass" />
      <test name="NuGetGallery.DataServices.NormalizeVersionInterceptorFacts.ItReturnsNonMatchingExpressions(expr: p =&gt; (p.NormalizedVersion == &quot;1.2.3&quot;.ToUpper()))" type="NuGetGallery.DataServices.NormalizeVersionInterceptorFacts" method="ItReturnsNonMatchingExpressions" time="0.0000062" result="Pass" />
      <test name="NuGetGallery.DataServices.NormalizeVersionInterceptorFacts.ItReturnsNonMatchingExpressions(expr: p =&gt; (&quot;1.2.3&quot;.ToUpper() == p.NormalizedVersion))" type="NuGetGallery.DataServices.NormalizeVersionInterceptorFacts" method="ItReturnsNonMatchingExpressions" time="0.0000054" result="Pass" />
      <test name="NuGetGallery.DataServices.NormalizeVersionInterceptorFacts.ItRewritesEqualityCheckOfConstantStringAgainstVersionColumn" type="NuGetGallery.DataServices.NormalizeVersionInterceptorFacts" method="ItRewritesEqualityCheckOfConstantStringAgainstVersionColumn" time="0.0008569" result="Pass" />
    </collection>
    <collection total="3" passed="3" failed="0" skipped="0" name="Test collection for NuGetGallery.ApiControllerFacts+ThePublishPackageAction" time="0.268">
      <test name="NuGetGallery.ApiControllerFacts+ThePublishPackageAction.WillNotListThePackageIfApiKeyDoesNotBelongToAnOwner" type="NuGetGallery.ApiControllerFacts+ThePublishPackageAction" method="WillNotListThePackageIfApiKeyDoesNotBelongToAnOwner" time="0.0879928" result="Pass" />
      <test name="NuGetGallery.ApiControllerFacts+ThePublishPackageAction.WillThrowIfAPackageWithTheIdAndSemanticVersionDoesNotExist" type="NuGetGallery.ApiControllerFacts+ThePublishPackageAction" method="WillThrowIfAPackageWithTheIdAndSemanticVersionDoesNotExist" time="0.0834666" result="Pass" />
      <test name="NuGetGallery.ApiControllerFacts+ThePublishPackageAction.WillListThePackageIfUserIsAnOwner" type="NuGetGallery.ApiControllerFacts+ThePublishPackageAction" method="WillListThePackageIfUserIsAnOwner" time="0.0970049" result="Pass" />
    </collection>
    <collection total="3" passed="3" failed="0" skipped="0" name="Test collection for NuGetGallery.UsersControllerFacts+TheRemoveCredentialAction" time="0.551">
      <test name="NuGetGallery.UsersControllerFacts+TheRemoveCredentialAction.GivenValidRequest_ItRemovesCredAndSendsNotificationToUser" type="NuGetGallery.UsersControllerFacts+TheRemoveCredentialAction" method="GivenValidRequest_ItRemovesCredAndSendsNotificationToUser" time="0.2331337" result="Pass" />
      <test name="NuGetGallery.UsersControllerFacts+TheRemoveCredentialAction.GivenNoOtherLoginCredentials_ItRedirectsBackWithAnErrorMessage" type="NuGetGallery.UsersControllerFacts+TheRemoveCredentialAction" method="GivenNoOtherLoginCredentials_ItRedirectsBackWithAnErrorMessage" time="0.1503081" result="Pass" />
      <test name="NuGetGallery.UsersControllerFacts+TheRemoveCredentialAction.GivenNoCredential_ItRedirectsBackWithNoChangesMade" type="NuGetGallery.UsersControllerFacts+TheRemoveCredentialAction" method="GivenNoCredential_ItRedirectsBackWithNoChangesMade" time="0.1673079" result="Pass" />
    </collection>
    <collection total="4" passed="4" failed="0" skipped="0" name="Test collection for NuGetGallery.UsersControllerFacts+TheChangePasswordAction" time="0.742">
      <test name="NuGetGallery.UsersControllerFacts+TheChangePasswordAction.GivenSuccessInAuthService_ItRedirectsBackToManageCredentialsWithMessage" type="NuGetGallery.UsersControllerFacts+TheChangePasswordAction" method="GivenSuccessInAuthService_ItRedirectsBackToManageCredentialsWithMessage" time="0.1567412" result="Pass" />
      <test name="NuGetGallery.UsersControllerFacts+TheChangePasswordAction.GivenFailureInAuthService_ItAddsModelError" type="NuGetGallery.UsersControllerFacts+TheChangePasswordAction" method="GivenFailureInAuthService_ItAddsModelError" time="0.1998691" result="Pass" />
      <test name="NuGetGallery.UsersControllerFacts+TheChangePasswordAction.GivenNoOldPassword_ItSendsAPasswordSetEmail" type="NuGetGallery.UsersControllerFacts+TheChangePasswordAction" method="GivenNoOldPassword_ItSendsAPasswordSetEmail" time="0.2132387" result="Pass" />
      <test name="NuGetGallery.UsersControllerFacts+TheChangePasswordAction.GivenInvalidView_ItReturnsView" type="NuGetGallery.UsersControllerFacts+TheChangePasswordAction" method="GivenInvalidView_ItReturnsView" time="0.1721921" result="Pass" />
    </collection>
    <collection total="1" passed="1" failed="0" skipped="0" name="Test collection for NuGetGallery.Authentication.AuthenticatorFacts+TheConstructor" time="0.000">
      <test name="NuGetGallery.Authentication.AuthenticatorFacts+TheConstructor.DefaultsConfigurationToDisabled" type="NuGetGallery.Authentication.AuthenticatorFacts+TheConstructor" method="DefaultsConfigurationToDisabled" time="0.0003631" result="Pass" />
    </collection>
    <collection total="14" passed="14" failed="0" skipped="0" name="Test collection for NuGetGallery.CloudBlobFileStorageServiceFacts+TheGetFileMethod" time="0.498">
      <test name="NuGetGallery.CloudBlobFileStorageServiceFacts+TheGetFileMethod.WillSetTheStreamPositionToZero(folderName: &quot;uploads&quot;)" type="NuGetGallery.CloudBlobFileStorageServiceFacts+TheGetFileMethod" method="WillSetTheStreamPositionToZero" time="0.045152" result="Pass" />
      <test name="NuGetGallery.CloudBlobFileStorageServiceFacts+TheGetFileMethod.WillSetTheStreamPositionToZero(folderName: &quot;packages&quot;)" type="NuGetGallery.CloudBlobFileStorageServiceFacts+TheGetFileMethod" method="WillSetTheStreamPositionToZero" time="0.0593033" result="Pass" />
      <test name="NuGetGallery.CloudBlobFileStorageServiceFacts+TheGetFileMethod.WillThrowIfFileNameIsNull(fileName: &quot;&quot;)" type="NuGetGallery.CloudBlobFileStorageServiceFacts+TheGetFileMethod" method="WillThrowIfFileNameIsNull" time="0.0744802" result="Pass" />
      <test name="NuGetGallery.CloudBlobFileStorageServiceFacts+TheGetFileMethod.WillThrowIfFileNameIsNull(fileName: &quot; &quot;)" type="NuGetGallery.CloudBlobFileStorageServiceFacts+TheGetFileMethod" method="WillThrowIfFileNameIsNull" time="0.0223202" result="Pass" />
      <test name="NuGetGallery.CloudBlobFileStorageServiceFacts+TheGetFileMethod.WillThrowIfFileNameIsNull(fileName: null)" type="NuGetGallery.CloudBlobFileStorageServiceFacts+TheGetFileMethod" method="WillThrowIfFileNameIsNull" time="0.029458" result="Pass" />
      <test name="NuGetGallery.CloudBlobFileStorageServiceFacts+TheGetFileMethod.WillThrowIfFolderNameIsNull(folderName: &quot; &quot;)" type="NuGetGallery.CloudBlobFileStorageServiceFacts+TheGetFileMethod" method="WillThrowIfFolderNameIsNull" time="0.0171099" result="Pass" />
      <test name="NuGetGallery.CloudBlobFileStorageServiceFacts+TheGetFileMethod.WillThrowIfFolderNameIsNull(folderName: &quot;&quot;)" type="NuGetGallery.CloudBlobFileStorageServiceFacts+TheGetFileMethod" method="WillThrowIfFolderNameIsNull" time="0.0598398" result="Pass" />
      <test name="NuGetGallery.CloudBlobFileStorageServiceFacts+TheGetFileMethod.WillThrowIfFolderNameIsNull(folderName: null)" type="NuGetGallery.CloudBlobFileStorageServiceFacts+TheGetFileMethod" method="WillThrowIfFolderNameIsNull" time="0.0365805" result="Pass" />
      <test name="NuGetGallery.CloudBlobFileStorageServiceFacts+TheGetFileMethod.WillReturnNullIfFileDoesNotExist(folderName: &quot;uploads&quot;)" type="NuGetGallery.CloudBlobFileStorageServiceFacts+TheGetFileMethod" method="WillReturnNullIfFileDoesNotExist" time="0.024316" result="Pass" />
      <test name="NuGetGallery.CloudBlobFileStorageServiceFacts+TheGetFileMethod.WillReturnNullIfFileDoesNotExist(folderName: &quot;packages&quot;)" type="NuGetGallery.CloudBlobFileStorageServiceFacts+TheGetFileMethod" method="WillReturnNullIfFileDoesNotExist" time="0.0260387" result="Pass" />
      <test name="NuGetGallery.CloudBlobFileStorageServiceFacts+TheGetFileMethod.WillReturnTheStreamWhenTheFileExists(folderName: &quot;uploads&quot;)" type="NuGetGallery.CloudBlobFileStorageServiceFacts+TheGetFileMethod" method="WillReturnTheStreamWhenTheFileExists" time="0.033143" result="Pass" />
      <test name="NuGetGallery.CloudBlobFileStorageServiceFacts+TheGetFileMethod.WillReturnTheStreamWhenTheFileExists(folderName: &quot;packages&quot;)" type="NuGetGallery.CloudBlobFileStorageServiceFacts+TheGetFileMethod" method="WillReturnTheStreamWhenTheFileExists" time="0.0203496" result="Pass" />
      <test name="NuGetGallery.CloudBlobFileStorageServiceFacts+TheGetFileMethod.WillDownloadTheFile(folderName: &quot;packages&quot;)" type="NuGetGallery.CloudBlobFileStorageServiceFacts+TheGetFileMethod" method="WillDownloadTheFile" time="0.0279299" result="Pass" />
      <test name="NuGetGallery.CloudBlobFileStorageServiceFacts+TheGetFileMethod.WillDownloadTheFile(folderName: &quot;uploads&quot;)" type="NuGetGallery.CloudBlobFileStorageServiceFacts+TheGetFileMethod" method="WillDownloadTheFile" time="0.0222211" result="Pass" />
    </collection>
    <collection total="1" passed="1" failed="0" skipped="0" name="Test collection for NuGetGallery.Controllers.AuthenticationControllerFacts+TheAuthenticateAction" time="0.217">
      <test name="NuGetGallery.Controllers.AuthenticationControllerFacts+TheAuthenticateAction.WillChallengeTheUserUsingTheGivenProviderAndReturnUrl" type="NuGetGallery.Controllers.AuthenticationControllerFacts+TheAuthenticateAction" method="WillChallengeTheUserUsingTheGivenProviderAndReturnUrl" time="0.217313" result="Pass" />
    </collection>
    <collection total="6" passed="6" failed="0" skipped="0" name="Test collection for NuGetGallery.StatisticsControllerFacts" time="0.309">
      <test name="NuGetGallery.StatisticsControllerFacts.StatisticsHomePage_ValidateFullReportStructureAndAvailability" type="NuGetGallery.StatisticsControllerFacts" method="StatisticsHomePage_ValidateFullReportStructureAndAvailability" time="0.0705043" result="Pass" />
      <test name="NuGetGallery.StatisticsControllerFacts.StatisticsHomePage_PackageVersions_ValidateReportStructureAndAvailability" type="NuGetGallery.StatisticsControllerFacts" method="StatisticsHomePage_PackageVersions_ValidateReportStructureAndAvailability" time="0.0058449" result="Pass" />
      <test name="NuGetGallery.StatisticsControllerFacts.StatisticsHomePage_Per_Package_ValidateReportStructureAndAvailability" type="NuGetGallery.StatisticsControllerFacts" method="StatisticsHomePage_Per_Package_ValidateReportStructureAndAvailability" time="0.1643466" result="Pass" />
      <test name="NuGetGallery.StatisticsControllerFacts.Statistics_By_Client_Operation_ValidateReportStructureAndAvailability" type="NuGetGallery.StatisticsControllerFacts" method="Statistics_By_Client_Operation_ValidateReportStructureAndAvailability" time="0.0564651" result="Pass" />
      <test name="NuGetGallery.StatisticsControllerFacts.StatisticsHomePage_Packages_ValidateReportStructureAndAvailability" type="NuGetGallery.StatisticsControllerFacts" method="StatisticsHomePage_Packages_ValidateReportStructureAndAvailability" time="0.0051964" result="Pass" />
      <test name="NuGetGallery.StatisticsControllerFacts.StatisticsHomePage_ValidateReportStructureAndAvailability" type="NuGetGallery.StatisticsControllerFacts" method="StatisticsHomePage_ValidateReportStructureAndAvailability" time="0.0067971" result="Pass" />
    </collection>
    <collection total="6" passed="6" failed="0" skipped="0" name="Test collection for NuGetGallery.PackagesControllerFacts+TheConfirmOwnerMethod" time="0.417">
      <test name="NuGetGallery.PackagesControllerFacts+TheConfirmOwnerMethod.AcceptsResultOfPackageServiceIfOtherwiseValid(confirmationResult: Success)" type="NuGetGallery.PackagesControllerFacts+TheConfirmOwnerMethod" method="AcceptsResultOfPackageServiceIfOtherwiseValid" time="0.0795097" result="Pass" />
      <test name="NuGetGallery.PackagesControllerFacts+TheConfirmOwnerMethod.AcceptsResultOfPackageServiceIfOtherwiseValid(confirmationResult: AlreadyOwner)" type="NuGetGallery.PackagesControllerFacts+TheConfirmOwnerMethod" method="AcceptsResultOfPackageServiceIfOtherwiseValid" time="0.0695621" result="Pass" />
      <test name="NuGetGallery.PackagesControllerFacts+TheConfirmOwnerMethod.AcceptsResultOfPackageServiceIfOtherwiseValid(confirmationResult: Failure)" type="NuGetGallery.PackagesControllerFacts+TheConfirmOwnerMethod" method="AcceptsResultOfPackageServiceIfOtherwiseValid" time="0.0541385" result="Pass" />
      <test name="NuGetGallery.PackagesControllerFacts+TheConfirmOwnerMethod.WithEmptyTokenReturnsHttpNotFound" type="NuGetGallery.PackagesControllerFacts+TheConfirmOwnerMethod" method="WithEmptyTokenReturnsHttpNotFound" time="0.0571749" result="Pass" />
      <test name="NuGetGallery.PackagesControllerFacts+TheConfirmOwnerMethod.WithNonExistentPackageIdReturnsHttpNotFound" type="NuGetGallery.PackagesControllerFacts+TheConfirmOwnerMethod" method="WithNonExistentPackageIdReturnsHttpNotFound" time="0.0773157" result="Pass" />
      <test name="NuGetGallery.PackagesControllerFacts+TheConfirmOwnerMethod.WithIdentityNotMatchingUserInRequestReturnsViewWithMessage" type="NuGetGallery.PackagesControllerFacts+TheConfirmOwnerMethod" method="WithIdentityNotMatchingUserInRequestReturnsViewWithMessage" time="0.0790707" result="Pass" />
    </collection>
    <collection total="3" passed="3" failed="0" skipped="0" name="Test collection for NuGetGallery.ApiControllerFacts+TheGetStatsDownloadsAction" time="0.592">
      <test name="NuGetGallery.ApiControllerFacts+TheGetStatsDownloadsAction.VerifyStatsDownloadsReturnsNotFoundWhenStatsNotAvailable" type="NuGetGallery.ApiControllerFacts+TheGetStatsDownloadsAction" method="VerifyStatsDownloadsReturnsNotFoundWhenStatsNotAvailable" time="0.0550886" result="Pass" />
      <test name="NuGetGallery.ApiControllerFacts+TheGetStatsDownloadsAction.VerifyRecentPopularityStatsDownloadsCount" type="NuGetGallery.ApiControllerFacts+TheGetStatsDownloadsAction" method="VerifyRecentPopularityStatsDownloadsCount" time="0.4488822" result="Pass" />
      <test name="NuGetGallery.ApiControllerFacts+TheGetStatsDownloadsAction.VerifyRecentPopularityStatsDownloads" type="NuGetGallery.ApiControllerFacts+TheGetStatsDownloadsAction" method="VerifyRecentPopularityStatsDownloads" time="0.088388" result="Pass" />
    </collection>
    <collection total="2" passed="2" failed="0" skipped="0" name="Test collection for NuGetGallery.MessageServiceFacts+TheReportMyPackageMethod" time="0.213">
      <test name="NuGetGallery.MessageServiceFacts+TheReportMyPackageMethod.WillSendEmailToGalleryOwner" type="NuGetGallery.MessageServiceFacts+TheReportMyPackageMethod" method="WillSendEmailToGalleryOwner" time="0.1554651" result="Pass" />
      <test name="NuGetGallery.MessageServiceFacts+TheReportMyPackageMethod.WillCopySenderIfAsked" type="NuGetGallery.MessageServiceFacts+TheReportMyPackageMethod" method="WillCopySenderIfAsked" time="0.0575687" result="Pass" />
    </collection>
    <collection total="2" passed="2" failed="0" skipped="0" name="Test collection for NuGetGallery.UsersControllerFacts+TheGenerateApiKeyAction" time="0.275">
      <test name="NuGetGallery.UsersControllerFacts+TheGenerateApiKeyAction.ReplacesTheApiKeyCredential" type="NuGetGallery.UsersControllerFacts+TheGenerateApiKeyAction" method="ReplacesTheApiKeyCredential" time="0.1356222" result="Pass" />
      <test name="NuGetGallery.UsersControllerFacts+TheGenerateApiKeyAction.RedirectsToAccountPage" type="NuGetGallery.UsersControllerFacts+TheGenerateApiKeyAction" method="RedirectsToAccountPage" time="0.1397419" result="Pass" />
    </collection>
    <collection total="2" passed="2" failed="0" skipped="0" name="Test collection for NuGetGallery.Infrastructure.Jobs.UpdateStatisticsJobFacts+TheExecuteMethod" time="0.012">
      <test name="NuGetGallery.Infrastructure.Jobs.UpdateStatisticsJobFacts+TheExecuteMethod.CreatesNewContextOnEachRun" type="NuGetGallery.Infrastructure.Jobs.UpdateStatisticsJobFacts+TheExecuteMethod" method="CreatesNewContextOnEachRun" time="0.0114768" result="Pass" />
      <test name="NuGetGallery.Infrastructure.Jobs.UpdateStatisticsJobFacts+TheExecuteMethod.ReturnsATask" type="NuGetGallery.Infrastructure.Jobs.UpdateStatisticsJobFacts+TheExecuteMethod" method="ReturnsATask" time="0.0007057" result="Pass" />
    </collection>
    <collection total="5" passed="5" failed="0" skipped="0" name="Test collection for NuGetGallery.UploadFileServiceFacts+TheSaveUploadFileMethod" time="0.019">
      <test name="NuGetGallery.UploadFileServiceFacts+TheSaveUploadFileMethod.WillSaveTheUploadToTheUploadsFolder" type="NuGetGallery.UploadFileServiceFacts+TheSaveUploadFileMethod" method="WillSaveTheUploadToTheUploadsFolder" time="0.0017348" result="Pass" />
      <test name="NuGetGallery.UploadFileServiceFacts+TheSaveUploadFileMethod.WillSaveTheUploadFileStream" type="NuGetGallery.UploadFileServiceFacts+TheSaveUploadFileMethod" method="WillSaveTheUploadFileStream" time="0.0130913" result="Pass" />
      <test name="NuGetGallery.UploadFileServiceFacts+TheSaveUploadFileMethod.WillThrowIfTheUploadFileStreamIsNull" type="NuGetGallery.UploadFileServiceFacts+TheSaveUploadFileMethod" method="WillThrowIfTheUploadFileStreamIsNull" time="0.0007614" result="Pass" />
      <test name="NuGetGallery.UploadFileServiceFacts+TheSaveUploadFileMethod.WillUseTheUserKeyInTheFileName" type="NuGetGallery.UploadFileServiceFacts+TheSaveUploadFileMethod" method="WillUseTheUserKeyInTheFileName" time="0.002505" result="Pass" />
      <test name="NuGetGallery.UploadFileServiceFacts+TheSaveUploadFileMethod.WillThrowIfTheUserKeyIsMissing" type="NuGetGallery.UploadFileServiceFacts+TheSaveUploadFileMethod" method="WillThrowIfTheUserKeyIsMissing" time="0.0005956" result="Pass" />
    </collection>
    <collection total="3" passed="3" failed="0" skipped="0" name="Test collection for NuGetGallery.UserServiceFacts+TheCancelChangeEmailAddressMethod" time="0.008">
      <test name="NuGetGallery.UserServiceFacts+TheCancelChangeEmailAddressMethod.ClearsEmailConfirmationToken" type="NuGetGallery.UserServiceFacts+TheCancelChangeEmailAddressMethod" method="ClearsEmailConfirmationToken" time="0.0045956" result="Pass" />
      <test name="NuGetGallery.UserServiceFacts+TheCancelChangeEmailAddressMethod.WritesAuditRecord" type="NuGetGallery.UserServiceFacts+TheCancelChangeEmailAddressMethod" method="WritesAuditRecord" time="0.0022046" result="Pass" />
      <test name="NuGetGallery.UserServiceFacts+TheCancelChangeEmailAddressMethod.ClearsUnconfirmedEmail" type="NuGetGallery.UserServiceFacts+TheCancelChangeEmailAddressMethod" method="ClearsUnconfirmedEmail" time="0.001569" result="Pass" />
    </collection>
    <collection total="3" passed="3" failed="0" skipped="0" name="Test collection for NuGetGallery.Authentication.AuthenticationServiceFacts+TheDescribeCredentialMethod" time="0.335">
      <test name="NuGetGallery.Authentication.AuthenticationServiceFacts+TheDescribeCredentialMethod.GivenATokenCredential_ItDescribesItCorrectly" type="NuGetGallery.Authentication.AuthenticationServiceFacts+TheDescribeCredentialMethod" method="GivenATokenCredential_ItDescribesItCorrectly" time="0.1092554" result="Pass" />
      <test name="NuGetGallery.Authentication.AuthenticationServiceFacts+TheDescribeCredentialMethod.GivenAnExternalCredential_ItDescribesItCorrectly" type="NuGetGallery.Authentication.AuthenticationServiceFacts+TheDescribeCredentialMethod" method="GivenAnExternalCredential_ItDescribesItCorrectly" time="0.0892114" result="Pass" />
      <test name="NuGetGallery.Authentication.AuthenticationServiceFacts+TheDescribeCredentialMethod.GivenAPasswordCredential_ItDescribesItCorrectly" type="NuGetGallery.Authentication.AuthenticationServiceFacts+TheDescribeCredentialMethod" method="GivenAPasswordCredential_ItDescribesItCorrectly" time="0.1365744" result="Pass" />
    </collection>
    <collection total="3" passed="3" failed="0" skipped="0" name="Test collection for NuGetGallery.CuratedPackagesControllerFacts+TheGetCreateCuratedPackageFormAction" time="0.376">
      <test name="NuGetGallery.CuratedPackagesControllerFacts+TheGetCreateCuratedPackageFormAction.WillReturn403IfTheCurrentUsersIsNotAManagerOfTheCuratedFeed" type="NuGetGallery.CuratedPackagesControllerFacts+TheGetCreateCuratedPackageFormAction" method="WillReturn403IfTheCurrentUsersIsNotAManagerOfTheCuratedFeed" time="0.0677462" result="Pass" />
      <test name="NuGetGallery.CuratedPackagesControllerFacts+TheGetCreateCuratedPackageFormAction.WillReturn404IfTheCuratedFeedDoesNotExist" type="NuGetGallery.CuratedPackagesControllerFacts+TheGetCreateCuratedPackageFormAction" method="WillReturn404IfTheCuratedFeedDoesNotExist" time="0.0930902" result="Pass" />
      <test name="NuGetGallery.CuratedPackagesControllerFacts+TheGetCreateCuratedPackageFormAction.WillPushTheCuratedFeedNameIntoTheViewBag" type="NuGetGallery.CuratedPackagesControllerFacts+TheGetCreateCuratedPackageFormAction" method="WillPushTheCuratedFeedNameIntoTheViewBag" time="0.2147934" result="Pass" />
    </collection>
    <collection total="1" passed="1" failed="0" skipped="0" name="Test collection for NuGetGallery.FeedServiceFacts+TheV1Feed+TheSearchMethod" time="0.261">
      <test name="NuGetGallery.FeedServiceFacts+TheV1Feed+TheSearchMethod.V1FeedSearchDoesNotReturnPrereleasePackages" type="NuGetGallery.FeedServiceFacts+TheV1Feed+TheSearchMethod" method="V1FeedSearchDoesNotReturnPrereleasePackages" time="0.2610626" result="Pass" />
    </collection>
    <collection total="6" passed="6" failed="0" skipped="0" name="Test collection for NuGetGallery.Authentication.Providers.ApiKey.ApiKeyAuthenticationHandlerFacts+TheApplyResponseChallengeAsyncMethod" time="0.048">
      <test name="NuGetGallery.Authentication.Providers.ApiKey.ApiKeyAuthenticationHandlerFacts+TheApplyResponseChallengeAsyncMethod.GivenA401ResponseInPassiveModeWithMatchingAuthenticationTypeAndNoHeader_ItWrites401WithApiKeyRequiredMessage" type="NuGetGallery.Authentication.Providers.ApiKey.ApiKeyAuthenticationHandlerFacts+TheApplyResponseChallengeAsyncMethod" method="GivenA401ResponseInPassiveModeWithMatchingAuthenticationTypeAndNoHeader_ItWrites401WithApiKeyRequiredMessage" time="0.0216463" result="Pass" />
      <test name="NuGetGallery.Authentication.Providers.ApiKey.ApiKeyAuthenticationHandlerFacts+TheApplyResponseChallengeAsyncMethod.GivenA401ResponseInPassiveModeWithMatchingAuthenticationTypeAndHeader_ItReturnsApiKeyNotAuthorized" type="NuGetGallery.Authentication.Providers.ApiKey.ApiKeyAuthenticationHandlerFacts+TheApplyResponseChallengeAsyncMethod" method="GivenA401ResponseInPassiveModeWithMatchingAuthenticationTypeAndHeader_ItReturnsApiKeyNotAuthorized" time="0.003846" result="Pass" />
      <test name="NuGetGallery.Authentication.Providers.ApiKey.ApiKeyAuthenticationHandlerFacts+TheApplyResponseChallengeAsyncMethod.GivenA401ResponseInActiveModeAndHeader_ItReturns403ApiKeyNotAuthorized" type="NuGetGallery.Authentication.Providers.ApiKey.ApiKeyAuthenticationHandlerFacts+TheApplyResponseChallengeAsyncMethod" method="GivenA401ResponseInActiveModeAndHeader_ItReturns403ApiKeyNotAuthorized" time="0.0037113" result="Pass" />
      <test name="NuGetGallery.Authentication.Providers.ApiKey.ApiKeyAuthenticationHandlerFacts+TheApplyResponseChallengeAsyncMethod.GivenA401ResponseInPassiveModeWithoutMatchingAuthenticationType_ItPassesThrough" type="NuGetGallery.Authentication.Providers.ApiKey.ApiKeyAuthenticationHandlerFacts+TheApplyResponseChallengeAsyncMethod" method="GivenA401ResponseInPassiveModeWithoutMatchingAuthenticationType_ItPassesThrough" time="0.0017846" result="Pass" />
      <test name="NuGetGallery.Authentication.Providers.ApiKey.ApiKeyAuthenticationHandlerFacts+TheApplyResponseChallengeAsyncMethod.GivenA401ResponseInActiveModeAndNoHeader_ItReturns401ApiKeyRequired" type="NuGetGallery.Authentication.Providers.ApiKey.ApiKeyAuthenticationHandlerFacts+TheApplyResponseChallengeAsyncMethod" method="GivenA401ResponseInActiveModeAndNoHeader_ItReturns401ApiKeyRequired" time="0.0151057" result="Pass" />
      <test name="NuGetGallery.Authentication.Providers.ApiKey.ApiKeyAuthenticationHandlerFacts+TheApplyResponseChallengeAsyncMethod.GivenANon401ResponseInActiveMode_ItPassesThrough" type="NuGetGallery.Authentication.Providers.ApiKey.ApiKeyAuthenticationHandlerFacts+TheApplyResponseChallengeAsyncMethod" method="GivenANon401ResponseInActiveMode_ItPassesThrough" time="0.0018055" result="Pass" />
    </collection>
    <collection total="2" passed="2" failed="0" skipped="0" name="Test collection for NuGetGallery.PackagesControllerFacts+TheUploadProgressAction" time="0.190">
      <test name="NuGetGallery.PackagesControllerFacts+TheUploadProgressAction.WillReturnCorrectResultForKnownUser" type="NuGetGallery.PackagesControllerFacts+TheUploadProgressAction" method="WillReturnCorrectResultForKnownUser" time="0.0681974" result="Pass" />
      <test name="NuGetGallery.PackagesControllerFacts+TheUploadProgressAction.WillReturnHttpNotFoundForUnknownUser" type="NuGetGallery.PackagesControllerFacts+TheUploadProgressAction" method="WillReturnHttpNotFoundForUnknownUser" time="0.1218357" result="Pass" />
    </collection>
    <collection total="9" passed="9" failed="0" skipped="0" name="Test collection for NuGetGallery.FileSystemFileStorgeServiceFacts+TheSaveFileMethod" time="0.025">
      <test name="NuGetGallery.FileSystemFileStorgeServiceFacts+TheSaveFileMethod.WillThrowIfFileNameIsNull(fileName: &quot;&quot;)" type="NuGetGallery.FileSystemFileStorgeServiceFacts+TheSaveFileMethod" method="WillThrowIfFileNameIsNull" time="0.0025942" result="Pass" />
      <test name="NuGetGallery.FileSystemFileStorgeServiceFacts+TheSaveFileMethod.WillThrowIfFileNameIsNull(fileName: null)" type="NuGetGallery.FileSystemFileStorgeServiceFacts+TheSaveFileMethod" method="WillThrowIfFileNameIsNull" time="0.0005967" result="Pass" />
      <test name="NuGetGallery.FileSystemFileStorgeServiceFacts+TheSaveFileMethod.WillThrowIfFolderNameIsNull(folderName: &quot;&quot;)" type="NuGetGallery.FileSystemFileStorgeServiceFacts+TheSaveFileMethod" method="WillThrowIfFolderNameIsNull" time="0.0016724" result="Pass" />
      <test name="NuGetGallery.FileSystemFileStorgeServiceFacts+TheSaveFileMethod.WillThrowIfFolderNameIsNull(folderName: null)" type="NuGetGallery.FileSystemFileStorgeServiceFacts+TheSaveFileMethod" method="WillThrowIfFolderNameIsNull" time="0.0007321" result="Pass" />
      <test name="NuGetGallery.FileSystemFileStorgeServiceFacts+TheSaveFileMethod.WillThrowIfFileStreamIsNull" type="NuGetGallery.FileSystemFileStorgeServiceFacts+TheSaveFileMethod" method="WillThrowIfFileStreamIsNull" time="0.0017171" result="Pass" />
      <test name="NuGetGallery.FileSystemFileStorgeServiceFacts+TheSaveFileMethod.WillCreateTheConfiguredFileStorageDirectoryIfItDoesNotExist" type="NuGetGallery.FileSystemFileStorgeServiceFacts+TheSaveFileMethod" method="WillCreateTheConfiguredFileStorageDirectoryIfItDoesNotExist" time="0.0053701" result="Pass" />
      <test name="NuGetGallery.FileSystemFileStorgeServiceFacts+TheSaveFileMethod.WillCreateTheFolderPathIfItDoesNotExist" type="NuGetGallery.FileSystemFileStorgeServiceFacts+TheSaveFileMethod" method="WillCreateTheFolderPathIfItDoesNotExist" time="0.003767" result="Pass" />
      <test name="NuGetGallery.FileSystemFileStorgeServiceFacts+TheSaveFileMethod.WillSaveThePackageFileBytes" type="NuGetGallery.FileSystemFileStorgeServiceFacts+TheSaveFileMethod" method="WillSaveThePackageFileBytes" time="0.0038858" result="Pass" />
      <test name="NuGetGallery.FileSystemFileStorgeServiceFacts+TheSaveFileMethod.WillSaveThePackageFileToTheSpecifiedFolder" type="NuGetGallery.FileSystemFileStorgeServiceFacts+TheSaveFileMethod" method="WillSaveThePackageFileToTheSpecifiedFolder" time="0.004339" result="Pass" />
    </collection>
    <collection total="2" passed="2" failed="0" skipped="0" name="Test collection for NuGetGallery.UsersControllerFacts+TheThanksAction" time="0.379">
      <test name="NuGetGallery.UsersControllerFacts+TheThanksAction.ShowsDefaultThanksView" type="NuGetGallery.UsersControllerFacts+TheThanksAction" method="ShowsDefaultThanksView" time="0.1767716" result="Pass" />
      <test name="NuGetGallery.UsersControllerFacts+TheThanksAction.ShowsConfirmViewWithModelWhenConfirmingEmailAddressIsNotRequired" type="NuGetGallery.UsersControllerFacts+TheThanksAction" method="ShowsConfirmViewWithModelWhenConfirmingEmailAddressIsNotRequired" time="0.2019124" result="Pass" />
    </collection>
    <collection total="2" passed="2" failed="0" skipped="0" name="Test collection for NuGetGallery.PackageServiceFacts+TheAddPackageOwnerMethod" time="0.009">
      <test name="NuGetGallery.PackageServiceFacts+TheAddPackageOwnerMethod.AddsUserToPackageOwnerCollection" type="NuGetGallery.PackageServiceFacts+TheAddPackageOwnerMethod" method="AddsUserToPackageOwnerCollection" time="0.0039363" result="Pass" />
      <test name="NuGetGallery.PackageServiceFacts+TheAddPackageOwnerMethod.RemovesRelatedPendingOwnerRequest" type="NuGetGallery.PackageServiceFacts+TheAddPackageOwnerMethod" method="RemovesRelatedPendingOwnerRequest" time="0.0047045" result="Pass" />
    </collection>
    <collection total="7" passed="7" failed="0" skipped="0" name="Test collection for NuGetGallery.UsersControllerFacts+TheConfirmAction" time="1.381">
      <test name="NuGetGallery.UsersControllerFacts+TheConfirmAction.ShowsAnErrorForWrongToken" type="NuGetGallery.UsersControllerFacts+TheConfirmAction" method="ShowsAnErrorForWrongToken" time="0.1381167" result="Pass" />
      <test name="NuGetGallery.UsersControllerFacts+TheConfirmAction.ConfirmsTheUser" type="NuGetGallery.UsersControllerFacts+TheConfirmAction" method="ConfirmsTheUser" time="0.1407754" result="Pass" />
      <test name="NuGetGallery.UsersControllerFacts+TheConfirmAction.SendsAccountChangedNoticeWhenConfirmingChangedEmail" type="NuGetGallery.UsersControllerFacts+TheConfirmAction" method="SendsAccountChangedNoticeWhenConfirmingChangedEmail" time="0.2170178" result="Pass" />
      <test name="NuGetGallery.UsersControllerFacts+TheConfirmAction.ShowsAnErrorForWrongUsername" type="NuGetGallery.UsersControllerFacts+TheConfirmAction" method="ShowsAnErrorForWrongUsername" time="0.183907" result="Pass" />
      <test name="NuGetGallery.UsersControllerFacts+TheConfirmAction.ShowsAnErrorForConflictingEmailAddress" type="NuGetGallery.UsersControllerFacts+TheConfirmAction" method="ShowsAnErrorForConflictingEmailAddress" time="0.1801798" result="Pass" />
      <test name="NuGetGallery.UsersControllerFacts+TheConfirmAction.DoesntSendAccountChangedEmailsWhenNoOldConfirmedAddress" type="NuGetGallery.UsersControllerFacts+TheConfirmAction" method="DoesntSendAccountChangedEmailsWhenNoOldConfirmedAddress" time="0.112524" result="Pass" />
      <test name="NuGetGallery.UsersControllerFacts+TheConfirmAction.DoesntSendAccountChangedEmailsIfConfirmationTokenDoesntMatch" type="NuGetGallery.UsersControllerFacts+TheConfirmAction" method="DoesntSendAccountChangedEmailsIfConfirmationTokenDoesntMatch" time="0.4081856" result="Pass" />
    </collection>
    <collection total="6" passed="6" failed="0" skipped="0" name="Test collection for NuGetGallery.Authentication.AuthenticationServiceFacts+TheExtractExternalLoginCredentialsMethod" time="0.914">
      <test name="NuGetGallery.Authentication.AuthenticationServiceFacts+TheExtractExternalLoginCredentialsMethod.GivenAnIdentity_ItCreatesAnExternalCredential" type="NuGetGallery.Authentication.AuthenticationServiceFacts+TheExtractExternalLoginCredentialsMethod" method="GivenAnIdentity_ItCreatesAnExternalCredential" time="0.1951495" result="Pass" />
      <test name="NuGetGallery.Authentication.AuthenticationServiceFacts+TheExtractExternalLoginCredentialsMethod.GivenNoMatchingIssuer_ItReturnsEmptyAuther" type="NuGetGallery.Authentication.AuthenticationServiceFacts+TheExtractExternalLoginCredentialsMethod" method="GivenNoMatchingIssuer_ItReturnsEmptyAuther" time="0.30768" result="Pass" />
      <test name="NuGetGallery.Authentication.AuthenticationServiceFacts+TheExtractExternalLoginCredentialsMethod.GivenNoExternalCredentials_ItReturnsEmptyResult" type="NuGetGallery.Authentication.AuthenticationServiceFacts+TheExtractExternalLoginCredentialsMethod" method="GivenNoExternalCredentials_ItReturnsEmptyResult" time="0.1135243" result="Pass" />
      <test name="NuGetGallery.Authentication.AuthenticationServiceFacts+TheExtractExternalLoginCredentialsMethod.GivenNoNameClaim_ItReturnsEmptyResult" type="NuGetGallery.Authentication.AuthenticationServiceFacts+TheExtractExternalLoginCredentialsMethod" method="GivenNoNameClaim_ItReturnsEmptyResult" time="0.0655403" result="Pass" />
      <test name="NuGetGallery.Authentication.AuthenticationServiceFacts+TheExtractExternalLoginCredentialsMethod.GivenMatchingIssuer_ItReturnsTheAutherWithThatName" type="NuGetGallery.Authentication.AuthenticationServiceFacts+TheExtractExternalLoginCredentialsMethod" method="GivenMatchingIssuer_ItReturnsTheAutherWithThatName" time="0.149129" result="Pass" />
      <test name="NuGetGallery.Authentication.AuthenticationServiceFacts+TheExtractExternalLoginCredentialsMethod.GivenNoIdClaim_ItReturnsEmptyResult" type="NuGetGallery.Authentication.AuthenticationServiceFacts+TheExtractExternalLoginCredentialsMethod" method="GivenNoIdClaim_ItReturnsEmptyResult" time="0.0833328" result="Pass" />
    </collection>
    <collection total="1" passed="1" failed="0" skipped="0" name="Test collection for NuGetGallery.UsersControllerFacts+TheConfirmationRequiredAction" time="0.289">
      <test name="NuGetGallery.UsersControllerFacts+TheConfirmationRequiredAction.WillSendNewUserEmailWhenPosted" type="NuGetGallery.UsersControllerFacts+TheConfirmationRequiredAction" method="WillSendNewUserEmailWhenPosted" time="0.2887967" result="Pass" />
    </collection>
    <collection total="4" passed="4" failed="0" skipped="0" name="Test collection for NuGetGallery.ApiControllerFacts+TheVerifyPackageKeyAction" time="0.627">
      <test name="NuGetGallery.ApiControllerFacts+TheVerifyPackageKeyAction.VerifyPackageKeyReturnsEmptyResultIfApiKeyExistsButIdAndVersionAreEmpty" type="NuGetGallery.ApiControllerFacts+TheVerifyPackageKeyAction" method="VerifyPackageKeyReturnsEmptyResultIfApiKeyExistsButIdAndVersionAreEmpty" time="0.1027587" result="Pass" />
      <test name="NuGetGallery.ApiControllerFacts+TheVerifyPackageKeyAction.VerifyPackageKeyReturns403IfUserIsNotAnOwner" type="NuGetGallery.ApiControllerFacts+TheVerifyPackageKeyAction" method="VerifyPackageKeyReturns403IfUserIsNotAnOwner" time="0.1187294" result="Pass" />
      <test name="NuGetGallery.ApiControllerFacts+TheVerifyPackageKeyAction.VerifyPackageKeyReturns200IfUserIsAnOwner" type="NuGetGallery.ApiControllerFacts+TheVerifyPackageKeyAction" method="VerifyPackageKeyReturns200IfUserIsAnOwner" time="0.0994729" result="Pass" />
      <test name="NuGetGallery.ApiControllerFacts+TheVerifyPackageKeyAction.VerifyPackageKeyReturns404IfPackageDoesNotExist" type="NuGetGallery.ApiControllerFacts+TheVerifyPackageKeyAction" method="VerifyPackageKeyReturns404IfPackageDoesNotExist" time="0.3060954" result="Pass" />
    </collection>
    <collection total="3" passed="3" failed="0" skipped="0" name="Test collection for NuGetGallery.Helpers.EnumHelperFacts+TheGetDescriptionMethod" time="0.003">
      <test name="NuGetGallery.Helpers.EnumHelperFacts+TheGetDescriptionMethod.GetsCorrectDescription(value: Foo, description: &quot;Foo&quot;)" type="NuGetGallery.Helpers.EnumHelperFacts+TheGetDescriptionMethod" method="GetsCorrectDescription" time="0.0028136" result="Pass" />
      <test name="NuGetGallery.Helpers.EnumHelperFacts+TheGetDescriptionMethod.GetsCorrectDescription(value: Baz, description: &quot;Qux&quot;)" type="NuGetGallery.Helpers.EnumHelperFacts+TheGetDescriptionMethod" method="GetsCorrectDescription" time="0.0000256" result="Pass" />
      <test name="NuGetGallery.Helpers.EnumHelperFacts+TheGetDescriptionMethod.GetsCorrectDescription(value: Bar, description: &quot;Bar&quot;)" type="NuGetGallery.Helpers.EnumHelperFacts+TheGetDescriptionMethod" method="GetsCorrectDescription" time="0.000007" result="Pass" />
    </collection>
  </assembly>
</assemblies>